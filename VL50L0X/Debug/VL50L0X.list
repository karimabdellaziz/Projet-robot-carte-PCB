
VL50L0X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007890  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08007a60  08007a60  00017a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b34  08007b34  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007b34  08007b34  00017b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b3c  08007b3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b40  08007b40  00017b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000070  08007bb4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08007bb4  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a5b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273f  00000000  00000000  00034afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00037240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  000383d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027aa4  00000000  00000000  00039478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001587f  00000000  00000000  00060f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f546f  00000000  00000000  0007679b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016bc0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f4  00000000  00000000  0016bc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a48 	.word	0x08007a48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007a48 	.word	0x08007a48

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b974 	b.w	8000a38 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f806 	bl	8000768 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__udivmoddi4>:
 8000768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800076c:	9d08      	ldr	r5, [sp, #32]
 800076e:	4604      	mov	r4, r0
 8000770:	468e      	mov	lr, r1
 8000772:	2b00      	cmp	r3, #0
 8000774:	d14d      	bne.n	8000812 <__udivmoddi4+0xaa>
 8000776:	428a      	cmp	r2, r1
 8000778:	4694      	mov	ip, r2
 800077a:	d969      	bls.n	8000850 <__udivmoddi4+0xe8>
 800077c:	fab2 f282 	clz	r2, r2
 8000780:	b152      	cbz	r2, 8000798 <__udivmoddi4+0x30>
 8000782:	fa01 f302 	lsl.w	r3, r1, r2
 8000786:	f1c2 0120 	rsb	r1, r2, #32
 800078a:	fa20 f101 	lsr.w	r1, r0, r1
 800078e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000792:	ea41 0e03 	orr.w	lr, r1, r3
 8000796:	4094      	lsls	r4, r2
 8000798:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800079c:	0c21      	lsrs	r1, r4, #16
 800079e:	fbbe f6f8 	udiv	r6, lr, r8
 80007a2:	fa1f f78c 	uxth.w	r7, ip
 80007a6:	fb08 e316 	mls	r3, r8, r6, lr
 80007aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ae:	fb06 f107 	mul.w	r1, r6, r7
 80007b2:	4299      	cmp	r1, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x64>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80007be:	f080 811f 	bcs.w	8000a00 <__udivmoddi4+0x298>
 80007c2:	4299      	cmp	r1, r3
 80007c4:	f240 811c 	bls.w	8000a00 <__udivmoddi4+0x298>
 80007c8:	3e02      	subs	r6, #2
 80007ca:	4463      	add	r3, ip
 80007cc:	1a5b      	subs	r3, r3, r1
 80007ce:	b2a4      	uxth	r4, r4
 80007d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007d4:	fb08 3310 	mls	r3, r8, r0, r3
 80007d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007dc:	fb00 f707 	mul.w	r7, r0, r7
 80007e0:	42a7      	cmp	r7, r4
 80007e2:	d90a      	bls.n	80007fa <__udivmoddi4+0x92>
 80007e4:	eb1c 0404 	adds.w	r4, ip, r4
 80007e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ec:	f080 810a 	bcs.w	8000a04 <__udivmoddi4+0x29c>
 80007f0:	42a7      	cmp	r7, r4
 80007f2:	f240 8107 	bls.w	8000a04 <__udivmoddi4+0x29c>
 80007f6:	4464      	add	r4, ip
 80007f8:	3802      	subs	r0, #2
 80007fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007fe:	1be4      	subs	r4, r4, r7
 8000800:	2600      	movs	r6, #0
 8000802:	b11d      	cbz	r5, 800080c <__udivmoddi4+0xa4>
 8000804:	40d4      	lsrs	r4, r2
 8000806:	2300      	movs	r3, #0
 8000808:	e9c5 4300 	strd	r4, r3, [r5]
 800080c:	4631      	mov	r1, r6
 800080e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000812:	428b      	cmp	r3, r1
 8000814:	d909      	bls.n	800082a <__udivmoddi4+0xc2>
 8000816:	2d00      	cmp	r5, #0
 8000818:	f000 80ef 	beq.w	80009fa <__udivmoddi4+0x292>
 800081c:	2600      	movs	r6, #0
 800081e:	e9c5 0100 	strd	r0, r1, [r5]
 8000822:	4630      	mov	r0, r6
 8000824:	4631      	mov	r1, r6
 8000826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082a:	fab3 f683 	clz	r6, r3
 800082e:	2e00      	cmp	r6, #0
 8000830:	d14a      	bne.n	80008c8 <__udivmoddi4+0x160>
 8000832:	428b      	cmp	r3, r1
 8000834:	d302      	bcc.n	800083c <__udivmoddi4+0xd4>
 8000836:	4282      	cmp	r2, r0
 8000838:	f200 80f9 	bhi.w	8000a2e <__udivmoddi4+0x2c6>
 800083c:	1a84      	subs	r4, r0, r2
 800083e:	eb61 0303 	sbc.w	r3, r1, r3
 8000842:	2001      	movs	r0, #1
 8000844:	469e      	mov	lr, r3
 8000846:	2d00      	cmp	r5, #0
 8000848:	d0e0      	beq.n	800080c <__udivmoddi4+0xa4>
 800084a:	e9c5 4e00 	strd	r4, lr, [r5]
 800084e:	e7dd      	b.n	800080c <__udivmoddi4+0xa4>
 8000850:	b902      	cbnz	r2, 8000854 <__udivmoddi4+0xec>
 8000852:	deff      	udf	#255	; 0xff
 8000854:	fab2 f282 	clz	r2, r2
 8000858:	2a00      	cmp	r2, #0
 800085a:	f040 8092 	bne.w	8000982 <__udivmoddi4+0x21a>
 800085e:	eba1 010c 	sub.w	r1, r1, ip
 8000862:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000866:	fa1f fe8c 	uxth.w	lr, ip
 800086a:	2601      	movs	r6, #1
 800086c:	0c20      	lsrs	r0, r4, #16
 800086e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000872:	fb07 1113 	mls	r1, r7, r3, r1
 8000876:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800087a:	fb0e f003 	mul.w	r0, lr, r3
 800087e:	4288      	cmp	r0, r1
 8000880:	d908      	bls.n	8000894 <__udivmoddi4+0x12c>
 8000882:	eb1c 0101 	adds.w	r1, ip, r1
 8000886:	f103 38ff 	add.w	r8, r3, #4294967295
 800088a:	d202      	bcs.n	8000892 <__udivmoddi4+0x12a>
 800088c:	4288      	cmp	r0, r1
 800088e:	f200 80cb 	bhi.w	8000a28 <__udivmoddi4+0x2c0>
 8000892:	4643      	mov	r3, r8
 8000894:	1a09      	subs	r1, r1, r0
 8000896:	b2a4      	uxth	r4, r4
 8000898:	fbb1 f0f7 	udiv	r0, r1, r7
 800089c:	fb07 1110 	mls	r1, r7, r0, r1
 80008a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008a4:	fb0e fe00 	mul.w	lr, lr, r0
 80008a8:	45a6      	cmp	lr, r4
 80008aa:	d908      	bls.n	80008be <__udivmoddi4+0x156>
 80008ac:	eb1c 0404 	adds.w	r4, ip, r4
 80008b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b4:	d202      	bcs.n	80008bc <__udivmoddi4+0x154>
 80008b6:	45a6      	cmp	lr, r4
 80008b8:	f200 80bb 	bhi.w	8000a32 <__udivmoddi4+0x2ca>
 80008bc:	4608      	mov	r0, r1
 80008be:	eba4 040e 	sub.w	r4, r4, lr
 80008c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008c6:	e79c      	b.n	8000802 <__udivmoddi4+0x9a>
 80008c8:	f1c6 0720 	rsb	r7, r6, #32
 80008cc:	40b3      	lsls	r3, r6
 80008ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80008d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008d6:	fa20 f407 	lsr.w	r4, r0, r7
 80008da:	fa01 f306 	lsl.w	r3, r1, r6
 80008de:	431c      	orrs	r4, r3
 80008e0:	40f9      	lsrs	r1, r7
 80008e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008e6:	fa00 f306 	lsl.w	r3, r0, r6
 80008ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80008ee:	0c20      	lsrs	r0, r4, #16
 80008f0:	fa1f fe8c 	uxth.w	lr, ip
 80008f4:	fb09 1118 	mls	r1, r9, r8, r1
 80008f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000900:	4288      	cmp	r0, r1
 8000902:	fa02 f206 	lsl.w	r2, r2, r6
 8000906:	d90b      	bls.n	8000920 <__udivmoddi4+0x1b8>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000910:	f080 8088 	bcs.w	8000a24 <__udivmoddi4+0x2bc>
 8000914:	4288      	cmp	r0, r1
 8000916:	f240 8085 	bls.w	8000a24 <__udivmoddi4+0x2bc>
 800091a:	f1a8 0802 	sub.w	r8, r8, #2
 800091e:	4461      	add	r1, ip
 8000920:	1a09      	subs	r1, r1, r0
 8000922:	b2a4      	uxth	r4, r4
 8000924:	fbb1 f0f9 	udiv	r0, r1, r9
 8000928:	fb09 1110 	mls	r1, r9, r0, r1
 800092c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000930:	fb00 fe0e 	mul.w	lr, r0, lr
 8000934:	458e      	cmp	lr, r1
 8000936:	d908      	bls.n	800094a <__udivmoddi4+0x1e2>
 8000938:	eb1c 0101 	adds.w	r1, ip, r1
 800093c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000940:	d26c      	bcs.n	8000a1c <__udivmoddi4+0x2b4>
 8000942:	458e      	cmp	lr, r1
 8000944:	d96a      	bls.n	8000a1c <__udivmoddi4+0x2b4>
 8000946:	3802      	subs	r0, #2
 8000948:	4461      	add	r1, ip
 800094a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800094e:	fba0 9402 	umull	r9, r4, r0, r2
 8000952:	eba1 010e 	sub.w	r1, r1, lr
 8000956:	42a1      	cmp	r1, r4
 8000958:	46c8      	mov	r8, r9
 800095a:	46a6      	mov	lr, r4
 800095c:	d356      	bcc.n	8000a0c <__udivmoddi4+0x2a4>
 800095e:	d053      	beq.n	8000a08 <__udivmoddi4+0x2a0>
 8000960:	b15d      	cbz	r5, 800097a <__udivmoddi4+0x212>
 8000962:	ebb3 0208 	subs.w	r2, r3, r8
 8000966:	eb61 010e 	sbc.w	r1, r1, lr
 800096a:	fa01 f707 	lsl.w	r7, r1, r7
 800096e:	fa22 f306 	lsr.w	r3, r2, r6
 8000972:	40f1      	lsrs	r1, r6
 8000974:	431f      	orrs	r7, r3
 8000976:	e9c5 7100 	strd	r7, r1, [r5]
 800097a:	2600      	movs	r6, #0
 800097c:	4631      	mov	r1, r6
 800097e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000982:	f1c2 0320 	rsb	r3, r2, #32
 8000986:	40d8      	lsrs	r0, r3
 8000988:	fa0c fc02 	lsl.w	ip, ip, r2
 800098c:	fa21 f303 	lsr.w	r3, r1, r3
 8000990:	4091      	lsls	r1, r2
 8000992:	4301      	orrs	r1, r0
 8000994:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000998:	fa1f fe8c 	uxth.w	lr, ip
 800099c:	fbb3 f0f7 	udiv	r0, r3, r7
 80009a0:	fb07 3610 	mls	r6, r7, r0, r3
 80009a4:	0c0b      	lsrs	r3, r1, #16
 80009a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009aa:	fb00 f60e 	mul.w	r6, r0, lr
 80009ae:	429e      	cmp	r6, r3
 80009b0:	fa04 f402 	lsl.w	r4, r4, r2
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x260>
 80009b6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80009be:	d22f      	bcs.n	8000a20 <__udivmoddi4+0x2b8>
 80009c0:	429e      	cmp	r6, r3
 80009c2:	d92d      	bls.n	8000a20 <__udivmoddi4+0x2b8>
 80009c4:	3802      	subs	r0, #2
 80009c6:	4463      	add	r3, ip
 80009c8:	1b9b      	subs	r3, r3, r6
 80009ca:	b289      	uxth	r1, r1
 80009cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80009d0:	fb07 3316 	mls	r3, r7, r6, r3
 80009d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009d8:	fb06 f30e 	mul.w	r3, r6, lr
 80009dc:	428b      	cmp	r3, r1
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x28a>
 80009e0:	eb1c 0101 	adds.w	r1, ip, r1
 80009e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80009e8:	d216      	bcs.n	8000a18 <__udivmoddi4+0x2b0>
 80009ea:	428b      	cmp	r3, r1
 80009ec:	d914      	bls.n	8000a18 <__udivmoddi4+0x2b0>
 80009ee:	3e02      	subs	r6, #2
 80009f0:	4461      	add	r1, ip
 80009f2:	1ac9      	subs	r1, r1, r3
 80009f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009f8:	e738      	b.n	800086c <__udivmoddi4+0x104>
 80009fa:	462e      	mov	r6, r5
 80009fc:	4628      	mov	r0, r5
 80009fe:	e705      	b.n	800080c <__udivmoddi4+0xa4>
 8000a00:	4606      	mov	r6, r0
 8000a02:	e6e3      	b.n	80007cc <__udivmoddi4+0x64>
 8000a04:	4618      	mov	r0, r3
 8000a06:	e6f8      	b.n	80007fa <__udivmoddi4+0x92>
 8000a08:	454b      	cmp	r3, r9
 8000a0a:	d2a9      	bcs.n	8000960 <__udivmoddi4+0x1f8>
 8000a0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a10:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a14:	3801      	subs	r0, #1
 8000a16:	e7a3      	b.n	8000960 <__udivmoddi4+0x1f8>
 8000a18:	4646      	mov	r6, r8
 8000a1a:	e7ea      	b.n	80009f2 <__udivmoddi4+0x28a>
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	e794      	b.n	800094a <__udivmoddi4+0x1e2>
 8000a20:	4640      	mov	r0, r8
 8000a22:	e7d1      	b.n	80009c8 <__udivmoddi4+0x260>
 8000a24:	46d0      	mov	r8, sl
 8000a26:	e77b      	b.n	8000920 <__udivmoddi4+0x1b8>
 8000a28:	3b02      	subs	r3, #2
 8000a2a:	4461      	add	r1, ip
 8000a2c:	e732      	b.n	8000894 <__udivmoddi4+0x12c>
 8000a2e:	4630      	mov	r0, r6
 8000a30:	e709      	b.n	8000846 <__udivmoddi4+0xde>
 8000a32:	4464      	add	r4, ip
 8000a34:	3802      	subs	r0, #2
 8000a36:	e742      	b.n	80008be <__udivmoddi4+0x156>

08000a38 <__aeabi_idiv0>:
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000a44:	1d39      	adds	r1, r7, #4
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4803      	ldr	r0, [pc, #12]	; (8000a5c <__io_putchar+0x20>)
 8000a4e:	f004 f949 	bl	8004ce4 <HAL_UART_Transmit>

	return ch;
 8000a52:	687b      	ldr	r3, [r7, #4]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200001e0 	.word	0x200001e0

08000a60 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	; 0x38
 8000a64:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a66:	f001 f8d4 	bl	8001c12 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a6a:	f000 f831 	bl	8000ad0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a6e:	f000 f99b 	bl	8000da8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000a72:	f000 f94b 	bl	8000d0c <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8000a76:	f000 f893 	bl	8000ba0 <MX_I2C1_Init>
	MX_DMA_Init();
 8000a7a:	f000 f977 	bl	8000d6c <MX_DMA_Init>
	MX_TIM6_Init();
 8000a7e:	f000 f90f 	bl	8000ca0 <MX_TIM6_Init>
	MX_I2C3_Init();
 8000a82:	f000 f8cd 	bl	8000c20 <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */

	printf("bonjour\r\n");
 8000a86:	4810      	ldr	r0, [pc, #64]	; (8000ac8 <main+0x68>)
 8000a88:	f005 fe92 	bl	80067b0 <puts>
	HAL_Delay(100);
 8000a8c:	2064      	movs	r0, #100	; 0x64
 8000a8e:	f001 f91d 	bl	8001ccc <HAL_Delay>

	char msgBuffer[52];
	for (uint8_t i = 0; i < 52; i++) {
 8000a92:	2300      	movs	r3, #0
 8000a94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a98:	e00b      	b.n	8000ab2 <main+0x52>
		msgBuffer[i] = ' ';
 8000a9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a9e:	3338      	adds	r3, #56	; 0x38
 8000aa0:	443b      	add	r3, r7
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	f803 2c38 	strb.w	r2, [r3, #-56]
	for (uint8_t i = 0; i < 52; i++) {
 8000aa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000aac:	3301      	adds	r3, #1
 8000aae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000ab2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ab6:	2b33      	cmp	r3, #51	; 0x33
 8000ab8:	d9ef      	bls.n	8000a9a <main+0x3a>
	}

	// Initialise the VL53L0X

	initVXL_right();
 8000aba:	f005 fc63 	bl	8006384 <initVXL_right>





	HAL_TIM_Base_Start_IT(&htim6);
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <main+0x6c>)
 8000ac0:	f003 fdac 	bl	800461c <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <main+0x64>
 8000ac6:	bf00      	nop
 8000ac8:	08007a60 	.word	0x08007a60
 8000acc:	20000134 	.word	0x20000134

08000ad0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b094      	sub	sp, #80	; 0x50
 8000ad4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0320 	add.w	r3, r7, #32
 8000ada:	2230      	movs	r2, #48	; 0x30
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f005 fdd8 	bl	8006694 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000af4:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <SystemClock_Config+0xc8>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a27      	ldr	r2, [pc, #156]	; (8000b98 <SystemClock_Config+0xc8>)
 8000afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <SystemClock_Config+0xc8>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b0c:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <SystemClock_Config+0xcc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b14:	4a21      	ldr	r2, [pc, #132]	; (8000b9c <SystemClock_Config+0xcc>)
 8000b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <SystemClock_Config+0xcc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b30:	2310      	movs	r3, #16
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b34:	2302      	movs	r3, #2
 8000b36:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 10;
 8000b3c:	230a      	movs	r3, #10
 8000b3e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 210;
 8000b40:	23d2      	movs	r3, #210	; 0xd2
 8000b42:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 fc91 	bl	8003478 <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x90>
	{
		Error_Handler();
 8000b5c:	f000 fd76 	bl	800164c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	230f      	movs	r3, #15
 8000b62:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b64:	2302      	movs	r3, #2
 8000b66:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b70:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b76:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2105      	movs	r1, #5
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 ff1e 	bl	80039c0 <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xbe>
	{
		Error_Handler();
 8000b8a:	f000 fd5f 	bl	800164c <Error_Handler>
	}
}
 8000b8e:	bf00      	nop
 8000b90:	3750      	adds	r7, #80	; 0x50
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40007000 	.word	0x40007000

08000ba0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <MX_I2C1_Init+0x78>)
 8000ba8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0040154A;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bac:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <MX_I2C1_Init+0x7c>)
 8000bae:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bda:	480e      	ldr	r0, [pc, #56]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bdc:	f001 fe5c 	bl	8002898 <HAL_I2C_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000be6:	f000 fd31 	bl	800164c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bee:	f002 fbab 	bl	8003348 <HAL_I2CEx_ConfigAnalogFilter>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000bf8:	f000 fd28 	bl	800164c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000c00:	f002 fbed 	bl	80033de <HAL_I2CEx_ConfigDigitalFilter>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000c0a:	f000 fd1f 	bl	800164c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000008c 	.word	0x2000008c
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	0040154a 	.word	0x0040154a

08000c20 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c26:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <MX_I2C3_Init+0x78>)
 8000c28:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00A0A3F7;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <MX_I2C3_Init+0x7c>)
 8000c2e:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c5a:	480e      	ldr	r0, [pc, #56]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c5c:	f001 fe1c 	bl	8002898 <HAL_I2C_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8000c66:	f000 fcf1 	bl	800164c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c6e:	f002 fb6b 	bl	8003348 <HAL_I2CEx_ConfigAnalogFilter>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8000c78:	f000 fce8 	bl	800164c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_I2C3_Init+0x74>)
 8000c80:	f002 fbad 	bl	80033de <HAL_I2CEx_ConfigDigitalFilter>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8000c8a:	f000 fcdf 	bl	800164c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000e0 	.word	0x200000e0
 8000c98:	40005c00 	.word	0x40005c00
 8000c9c:	00a0a3f7 	.word	0x00a0a3f7

08000ca0 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_TIM6_Init+0x64>)
 8000cb2:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <MX_TIM6_Init+0x68>)
 8000cb4:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 16800-1;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_TIM6_Init+0x64>)
 8000cb8:	f244 129f 	movw	r2, #16799	; 0x419f
 8000cbc:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_TIM6_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 100-1;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_TIM6_Init+0x64>)
 8000cc6:	2263      	movs	r2, #99	; 0x63
 8000cc8:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_TIM6_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <MX_TIM6_Init+0x64>)
 8000cd2:	f003 fc4b 	bl	800456c <HAL_TIM_Base_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 8000cdc:	f000 fcb6 	bl	800164c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_TIM6_Init+0x64>)
 8000cee:	f003 feff 	bl	8004af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 8000cf8:	f000 fca8 	bl	800164c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000134 	.word	0x20000134
 8000d08:	40001000 	.word	0x40001000

08000d0c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_USART1_UART_Init+0x58>)
 8000d12:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <MX_USART1_UART_Init+0x5c>)
 8000d14:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <MX_USART1_UART_Init+0x58>)
 8000d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d1c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_USART1_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_USART1_UART_Init+0x58>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_USART1_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_USART1_UART_Init+0x58>)
 8000d32:	220c      	movs	r2, #12
 8000d34:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_USART1_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_USART1_UART_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_USART1_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_USART1_UART_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_USART1_UART_Init+0x58>)
 8000d50:	f003 ff7a 	bl	8004c48 <HAL_UART_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8000d5a:	f000 fc77 	bl	800164c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200001e0 	.word	0x200001e0
 8000d68:	40011000 	.word	0x40011000

08000d6c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_DMA_Init+0x38>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <MX_DMA_Init+0x38>)
 8000d78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_DMA_Init+0x38>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	200c      	movs	r0, #12
 8000d90:	f001 f89b 	bl	8001eca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d94:	200c      	movs	r0, #12
 8000d96:	f001 f8b4 	bl	8001f02 <HAL_NVIC_EnableIRQ>

}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800

08000da8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b090      	sub	sp, #64	; 0x40
 8000dac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000dbe:	4bad      	ldr	r3, [pc, #692]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4aac      	ldr	r2, [pc, #688]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4baa      	ldr	r3, [pc, #680]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd6:	4ba7      	ldr	r3, [pc, #668]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4aa6      	ldr	r2, [pc, #664]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4ba4      	ldr	r3, [pc, #656]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
 8000dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4ba1      	ldr	r3, [pc, #644]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4aa0      	ldr	r2, [pc, #640]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b9e      	ldr	r3, [pc, #632]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	623b      	str	r3, [r7, #32]
 8000e04:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e06:	4b9b      	ldr	r3, [pc, #620]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a9a      	ldr	r2, [pc, #616]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b98      	ldr	r3, [pc, #608]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	61fb      	str	r3, [r7, #28]
 8000e1c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	4b95      	ldr	r3, [pc, #596]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a94      	ldr	r2, [pc, #592]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b92      	ldr	r3, [pc, #584]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b8f      	ldr	r3, [pc, #572]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a8e      	ldr	r2, [pc, #568]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b8c      	ldr	r3, [pc, #560]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e4e:	4b89      	ldr	r3, [pc, #548]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a88      	ldr	r2, [pc, #544]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b86      	ldr	r3, [pc, #536]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8000e66:	4b83      	ldr	r3, [pc, #524]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a82      	ldr	r2, [pc, #520]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b80      	ldr	r3, [pc, #512]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8000e7e:	4b7d      	ldr	r3, [pc, #500]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a7c      	ldr	r2, [pc, #496]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b7a      	ldr	r3, [pc, #488]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000e96:	4b77      	ldr	r3, [pc, #476]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a76      	ldr	r2, [pc, #472]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000e9c:	f043 0320 	orr.w	r3, r3, #32
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b74      	ldr	r3, [pc, #464]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0320 	and.w	r3, r3, #32
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000eae:	4b71      	ldr	r3, [pc, #452]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a70      	ldr	r2, [pc, #448]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b6e      	ldr	r3, [pc, #440]	; (8001074 <MX_GPIO_Init+0x2cc>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2120      	movs	r1, #32
 8000eca:	486b      	ldr	r0, [pc, #428]	; (8001078 <MX_GPIO_Init+0x2d0>)
 8000ecc:	f001 fcca 	bl	8002864 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f241 010c 	movw	r1, #4108	; 0x100c
 8000ed6:	4869      	ldr	r0, [pc, #420]	; (800107c <MX_GPIO_Init+0x2d4>)
 8000ed8:	f001 fcc4 	bl	8002864 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2108      	movs	r1, #8
 8000ee0:	4867      	ldr	r0, [pc, #412]	; (8001080 <MX_GPIO_Init+0x2d8>)
 8000ee2:	f001 fcbf 	bl	8002864 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eec:	4865      	ldr	r0, [pc, #404]	; (8001084 <MX_GPIO_Init+0x2dc>)
 8000eee:	f001 fcb9 	bl	8002864 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	21c8      	movs	r1, #200	; 0xc8
 8000ef6:	4864      	ldr	r0, [pc, #400]	; (8001088 <MX_GPIO_Init+0x2e0>)
 8000ef8:	f001 fcb4 	bl	8002864 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LCD_B0_Pin */
	GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000efc:	2310      	movs	r3, #16
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f0c:	230e      	movs	r3, #14
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f14:	4619      	mov	r1, r3
 8000f16:	485d      	ldr	r0, [pc, #372]	; (800108c <MX_GPIO_Init+0x2e4>)
 8000f18:	f001 faf8 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4857      	ldr	r0, [pc, #348]	; (800108c <MX_GPIO_Init+0x2e4>)
 8000f30:	f001 faec 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000f34:	2304      	movs	r3, #4
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f44:	2309      	movs	r3, #9
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	484f      	ldr	r0, [pc, #316]	; (800108c <MX_GPIO_Init+0x2e4>)
 8000f50:	f001 fadc 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000f54:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f66:	230b      	movs	r3, #11
 8000f68:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4845      	ldr	r0, [pc, #276]	; (8001088 <MX_GPIO_Init+0x2e0>)
 8000f72:	f001 facb 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
	GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000f76:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			|FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
			|FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f88:	230c      	movs	r3, #12
 8000f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f90:	4619      	mov	r1, r3
 8000f92:	483e      	ldr	r0, [pc, #248]	; (800108c <MX_GPIO_Init+0x2e4>)
 8000f94:	f001 faba 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000f98:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000faa:	230a      	movs	r3, #10
 8000fac:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4836      	ldr	r0, [pc, #216]	; (8001090 <MX_GPIO_Init+0x2e8>)
 8000fb6:	f001 faa9 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000fba:	2310      	movs	r3, #16
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	482e      	ldr	r0, [pc, #184]	; (8001090 <MX_GPIO_Init+0x2e8>)
 8000fd6:	f001 fa99 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000fea:	2308      	movs	r3, #8
 8000fec:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4820      	ldr	r0, [pc, #128]	; (8001078 <MX_GPIO_Init+0x2d0>)
 8000ff6:	f001 fa89 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000ffa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
			|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800100c:	230c      	movs	r3, #12
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001014:	4619      	mov	r1, r3
 8001016:	481f      	ldr	r0, [pc, #124]	; (8001094 <MX_GPIO_Init+0x2ec>)
 8001018:	f001 fa78 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800101c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800102e:	2301      	movs	r3, #1
 8001030:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001036:	4619      	mov	r1, r3
 8001038:	4817      	ldr	r0, [pc, #92]	; (8001098 <MX_GPIO_Init+0x2f0>)
 800103a:	f001 fa67 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800103e:	2360      	movs	r3, #96	; 0x60
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800104e:	230d      	movs	r3, #13
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001056:	4619      	mov	r1, r3
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <MX_GPIO_Init+0x2e4>)
 800105a:	f001 fa57 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800105e:	2340      	movs	r3, #64	; 0x40
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800106e:	230a      	movs	r3, #10
 8001070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001072:	e013      	b.n	800109c <MX_GPIO_Init+0x2f4>
 8001074:	40023800 	.word	0x40023800
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40022000 	.word	0x40022000
 8001080:	40022800 	.word	0x40022800
 8001084:	40021c00 	.word	0x40021c00
 8001088:	40021800 	.word	0x40021800
 800108c:	40021000 	.word	0x40021000
 8001090:	40020400 	.word	0x40020400
 8001094:	40020800 	.word	0x40020800
 8001098:	40020000 	.word	0x40020000
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a0:	4619      	mov	r1, r3
 80010a2:	48bc      	ldr	r0, [pc, #752]	; (8001394 <MX_GPIO_Init+0x5ec>)
 80010a4:	f001 fa32 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
	GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80010a8:	f248 1333 	movw	r3, #33075	; 0x8133
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
			|FMC_BA1_Pin|FMC_BA0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010ba:	230c      	movs	r3, #12
 80010bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c2:	4619      	mov	r1, r3
 80010c4:	48b4      	ldr	r0, [pc, #720]	; (8001398 <MX_GPIO_Init+0x5f0>)
 80010c6:	f001 fa21 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
	GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80010ca:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			|LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
			|LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
			|LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010dc:	230e      	movs	r3, #14
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e4:	4619      	mov	r1, r3
 80010e6:	48ad      	ldr	r0, [pc, #692]	; (800139c <MX_GPIO_Init+0x5f4>)
 80010e8:	f001 fa10 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80010ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fe:	4619      	mov	r1, r3
 8001100:	48a6      	ldr	r0, [pc, #664]	; (800139c <MX_GPIO_Init+0x5f4>)
 8001102:	f001 fa03 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001106:	2340      	movs	r3, #64	; 0x40
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800110a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001118:	4619      	mov	r1, r3
 800111a:	48a1      	ldr	r0, [pc, #644]	; (80013a0 <MX_GPIO_Init+0x5f8>)
 800111c:	f001 f9f6 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
	GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001120:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
			|FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001132:	230c      	movs	r3, #12
 8001134:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113a:	4619      	mov	r1, r3
 800113c:	4898      	ldr	r0, [pc, #608]	; (80013a0 <MX_GPIO_Init+0x5f8>)
 800113e:	f001 f9e5 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001142:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001154:	230a      	movs	r3, #10
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800115c:	4619      	mov	r1, r3
 800115e:	4891      	ldr	r0, [pc, #580]	; (80013a4 <MX_GPIO_Init+0x5fc>)
 8001160:	f001 f9d4 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
	GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001164:	23f0      	movs	r3, #240	; 0xf0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001174:	230a      	movs	r3, #10
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	488a      	ldr	r0, [pc, #552]	; (80013a8 <MX_GPIO_Init+0x600>)
 8001180:	f001 f9c4 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
	GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001184:	23f7      	movs	r3, #247	; 0xf7
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
			|LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001194:	230e      	movs	r3, #14
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119c:	4619      	mov	r1, r3
 800119e:	4883      	ldr	r0, [pc, #524]	; (80013ac <MX_GPIO_Init+0x604>)
 80011a0:	f001 f9b4 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_B4_Pin */
	GPIO_InitStruct.Pin = LCD_B4_Pin;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011b6:	2309      	movs	r3, #9
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011be:	4619      	mov	r1, r3
 80011c0:	4875      	ldr	r0, [pc, #468]	; (8001398 <MX_GPIO_Init+0x5f0>)
 80011c2:	f001 f9a3 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : SAI2_SDB_Pin */
	GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80011c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80011d8:	230a      	movs	r3, #10
 80011da:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e0:	4619      	mov	r1, r3
 80011e2:	486d      	ldr	r0, [pc, #436]	; (8001398 <MX_GPIO_Init+0x5f0>)
 80011e4:	f001 f992 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011e8:	2320      	movs	r3, #32
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fc:	4619      	mov	r1, r3
 80011fe:	4868      	ldr	r0, [pc, #416]	; (80013a0 <MX_GPIO_Init+0x5f8>)
 8001200:	f001 f984 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001204:	2308      	movs	r3, #8
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001214:	230d      	movs	r3, #13
 8001216:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121c:	4619      	mov	r1, r3
 800121e:	4860      	ldr	r0, [pc, #384]	; (80013a0 <MX_GPIO_Init+0x5f8>)
 8001220:	f001 f974 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001224:	f241 030c 	movw	r3, #4108	; 0x100c
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800123a:	4619      	mov	r1, r3
 800123c:	485a      	ldr	r0, [pc, #360]	; (80013a8 <MX_GPIO_Init+0x600>)
 800123e:	f001 f965 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001254:	4619      	mov	r1, r3
 8001256:	4856      	ldr	r0, [pc, #344]	; (80013b0 <MX_GPIO_Init+0x608>)
 8001258:	f001 f958 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
	GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800125c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
			|FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
			|FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800126e:	230c      	movs	r3, #12
 8001270:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001276:	4619      	mov	r1, r3
 8001278:	484e      	ldr	r0, [pc, #312]	; (80013b4 <MX_GPIO_Init+0x60c>)
 800127a:	f001 f947 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
	GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800127e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001290:	230e      	movs	r3, #14
 8001292:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001294:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001298:	4619      	mov	r1, r3
 800129a:	4843      	ldr	r0, [pc, #268]	; (80013a8 <MX_GPIO_Init+0x600>)
 800129c:	f001 f936 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80012a0:	2308      	movs	r3, #8
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b4:	4619      	mov	r1, r3
 80012b6:	483d      	ldr	r0, [pc, #244]	; (80013ac <MX_GPIO_Init+0x604>)
 80012b8:	f001 f928 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80012bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012ce:	230d      	movs	r3, #13
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d6:	4619      	mov	r1, r3
 80012d8:	482f      	ldr	r0, [pc, #188]	; (8001398 <MX_GPIO_Init+0x5f0>)
 80012da:	f001 f917 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80012de:	2310      	movs	r3, #16
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e2:	2300      	movs	r3, #0
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ee:	4619      	mov	r1, r3
 80012f0:	482b      	ldr	r0, [pc, #172]	; (80013a0 <MX_GPIO_Init+0x5f8>)
 80012f2:	f001 f90b 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80012f6:	2304      	movs	r3, #4
 80012f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001306:	230c      	movs	r3, #12
 8001308:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800130e:	4619      	mov	r1, r3
 8001310:	4823      	ldr	r0, [pc, #140]	; (80013a0 <MX_GPIO_Init+0x5f8>)
 8001312:	f001 f8fb 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001316:	f248 0304 	movw	r3, #32772	; 0x8004
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001328:	4619      	mov	r1, r3
 800132a:	4823      	ldr	r0, [pc, #140]	; (80013b8 <MX_GPIO_Init+0x610>)
 800132c:	f001 f8ee 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001330:	2302      	movs	r3, #2
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001340:	2305      	movs	r3, #5
 8001342:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001348:	4619      	mov	r1, r3
 800134a:	4817      	ldr	r0, [pc, #92]	; (80013a8 <MX_GPIO_Init+0x600>)
 800134c:	f001 f8de 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001366:	4619      	mov	r1, r3
 8001368:	4813      	ldr	r0, [pc, #76]	; (80013b8 <MX_GPIO_Init+0x610>)
 800136a:	f001 f8cf 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800136e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
			|DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001380:	230d      	movs	r3, #13
 8001382:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001388:	4619      	mov	r1, r3
 800138a:	480b      	ldr	r0, [pc, #44]	; (80013b8 <MX_GPIO_Init+0x610>)
 800138c:	f001 f8be 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001390:	2301      	movs	r3, #1
 8001392:	e013      	b.n	80013bc <MX_GPIO_Init+0x614>
 8001394:	40020400 	.word	0x40020400
 8001398:	40021800 	.word	0x40021800
 800139c:	40022400 	.word	0x40022400
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40022000 	.word	0x40022000
 80013ac:	40022800 	.word	0x40022800
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40021400 	.word	0x40021400
 80013b8:	40021c00 	.word	0x40021c00
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013ca:	2302      	movs	r3, #2
 80013cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d2:	4619      	mov	r1, r3
 80013d4:	4895      	ldr	r0, [pc, #596]	; (800162c <MX_GPIO_Init+0x884>)
 80013d6:	f001 f899 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80013da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f4:	4619      	mov	r1, r3
 80013f6:	488e      	ldr	r0, [pc, #568]	; (8001630 <MX_GPIO_Init+0x888>)
 80013f8:	f001 f888 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 80013fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001402:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001410:	4619      	mov	r1, r3
 8001412:	4886      	ldr	r0, [pc, #536]	; (800162c <MX_GPIO_Init+0x884>)
 8001414:	f001 f87a 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001418:	23c0      	movs	r3, #192	; 0xc0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001428:	2308      	movs	r3, #8
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001430:	4619      	mov	r1, r3
 8001432:	4880      	ldr	r0, [pc, #512]	; (8001634 <MX_GPIO_Init+0x88c>)
 8001434:	f001 f86a 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001438:	2310      	movs	r3, #16
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001448:	230a      	movs	r3, #10
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001450:	4619      	mov	r1, r3
 8001452:	4879      	ldr	r0, [pc, #484]	; (8001638 <MX_GPIO_Init+0x890>)
 8001454:	f001 f85a 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
	GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001458:	2328      	movs	r3, #40	; 0x28
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001468:	230c      	movs	r3, #12
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800146c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001470:	4619      	mov	r1, r3
 8001472:	4871      	ldr	r0, [pc, #452]	; (8001638 <MX_GPIO_Init+0x890>)
 8001474:	f001 f84a 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001478:	23c8      	movs	r3, #200	; 0xc8
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800148c:	4619      	mov	r1, r3
 800148e:	486b      	ldr	r0, [pc, #428]	; (800163c <MX_GPIO_Init+0x894>)
 8001490:	f001 f83c 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001494:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149a:	2303      	movs	r3, #3
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a6:	4619      	mov	r1, r3
 80014a8:	4865      	ldr	r0, [pc, #404]	; (8001640 <MX_GPIO_Init+0x898>)
 80014aa:	f001 f82f 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : FMC_SDCKE0_Pin */
	GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80014ae:	2308      	movs	r3, #8
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014be:	230c      	movs	r3, #12
 80014c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80014c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c6:	4619      	mov	r1, r3
 80014c8:	485a      	ldr	r0, [pc, #360]	; (8001634 <MX_GPIO_Init+0x88c>)
 80014ca:	f001 f81f 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80014ce:	2305      	movs	r3, #5
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014de:	230a      	movs	r3, #10
 80014e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e6:	4619      	mov	r1, r3
 80014e8:	4852      	ldr	r0, [pc, #328]	; (8001634 <MX_GPIO_Init+0x88c>)
 80014ea:	f001 f80f 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014ee:	2332      	movs	r3, #50	; 0x32
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014fe:	230b      	movs	r3, #11
 8001500:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001506:	4619      	mov	r1, r3
 8001508:	484a      	ldr	r0, [pc, #296]	; (8001634 <MX_GPIO_Init+0x88c>)
 800150a:	f000 ffff 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800150e:	2304      	movs	r3, #4
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800151e:	2309      	movs	r3, #9
 8001520:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001526:	4619      	mov	r1, r3
 8001528:	4846      	ldr	r0, [pc, #280]	; (8001644 <MX_GPIO_Init+0x89c>)
 800152a:	f000 ffef 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800152e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001540:	2309      	movs	r3, #9
 8001542:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001548:	4619      	mov	r1, r3
 800154a:	483f      	ldr	r0, [pc, #252]	; (8001648 <MX_GPIO_Init+0x8a0>)
 800154c:	f000 ffde 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001550:	2304      	movs	r3, #4
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001560:	4619      	mov	r1, r3
 8001562:	4836      	ldr	r0, [pc, #216]	; (800163c <MX_GPIO_Init+0x894>)
 8001564:	f000 ffd2 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001568:	2386      	movs	r3, #134	; 0x86
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001578:	230b      	movs	r3, #11
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001580:	4619      	mov	r1, r3
 8001582:	482b      	ldr	r0, [pc, #172]	; (8001630 <MX_GPIO_Init+0x888>)
 8001584:	f000 ffc2 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_A0_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001588:	2301      	movs	r3, #1
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800158c:	2303      	movs	r3, #3
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001598:	4619      	mov	r1, r3
 800159a:	4825      	ldr	r0, [pc, #148]	; (8001630 <MX_GPIO_Init+0x888>)
 800159c:	f000 ffb6 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80015a0:	2350      	movs	r3, #80	; 0x50
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015b0:	230d      	movs	r3, #13
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b8:	4619      	mov	r1, r3
 80015ba:	481d      	ldr	r0, [pc, #116]	; (8001630 <MX_GPIO_Init+0x888>)
 80015bc:	f000 ffa6 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80015c0:	2328      	movs	r3, #40	; 0x28
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015d0:	230a      	movs	r3, #10
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d8:	4619      	mov	r1, r3
 80015da:	4815      	ldr	r0, [pc, #84]	; (8001630 <MX_GPIO_Init+0x888>)
 80015dc:	f000 ff96 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80015e0:	2340      	movs	r3, #64	; 0x40
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80015f0:	2309      	movs	r3, #9
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f8:	4619      	mov	r1, r3
 80015fa:	480f      	ldr	r0, [pc, #60]	; (8001638 <MX_GPIO_Init+0x890>)
 80015fc:	f000 ff86 	bl	800250c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001600:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001612:	2305      	movs	r3, #5
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161a:	4619      	mov	r1, r3
 800161c:	4809      	ldr	r0, [pc, #36]	; (8001644 <MX_GPIO_Init+0x89c>)
 800161e:	f000 ff75 	bl	800250c <HAL_GPIO_Init>

}
 8001622:	bf00      	nop
 8001624:	3740      	adds	r7, #64	; 0x40
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40022000 	.word	0x40022000
 8001630:	40020000 	.word	0x40020000
 8001634:	40020800 	.word	0x40020800
 8001638:	40021c00 	.word	0x40021c00
 800163c:	40021800 	.word	0x40021800
 8001640:	40021400 	.word	0x40021400
 8001644:	40020400 	.word	0x40020400
 8001648:	40020c00 	.word	0x40020c00

0800164c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001650:	b672      	cpsid	i
}
 8001652:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001654:	e7fe      	b.n	8001654 <Error_Handler+0x8>
	...

08001658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <HAL_MspInit+0x44>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a0e      	ldr	r2, [pc, #56]	; (800169c <HAL_MspInit+0x44>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_MspInit+0x44>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_MspInit+0x44>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a08      	ldr	r2, [pc, #32]	; (800169c <HAL_MspInit+0x44>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_MspInit+0x44>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b0ac      	sub	sp, #176	; 0xb0
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b8:	f107 0318 	add.w	r3, r7, #24
 80016bc:	2284      	movs	r2, #132	; 0x84
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f004 ffe7 	bl	8006694 <memset>
  if(hi2c->Instance==I2C1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a44      	ldr	r2, [pc, #272]	; (80017dc <HAL_I2C_MspInit+0x13c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d13d      	bne.n	800174c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016da:	f107 0318 	add.w	r3, r7, #24
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 fb54 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80016ea:	f7ff ffaf 	bl	800164c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <HAL_I2C_MspInit+0x140>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a3b      	ldr	r2, [pc, #236]	; (80017e0 <HAL_I2C_MspInit+0x140>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_I2C_MspInit+0x140>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001706:	f44f 7340 	mov.w	r3, #768	; 0x300
 800170a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170e:	2312      	movs	r3, #18
 8001710:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001720:	2304      	movs	r3, #4
 8001722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800172a:	4619      	mov	r1, r3
 800172c:	482d      	ldr	r0, [pc, #180]	; (80017e4 <HAL_I2C_MspInit+0x144>)
 800172e:	f000 feed 	bl	800250c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001732:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <HAL_I2C_MspInit+0x140>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a2a      	ldr	r2, [pc, #168]	; (80017e0 <HAL_I2C_MspInit+0x140>)
 8001738:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_I2C_MspInit+0x140>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800174a:	e042      	b.n	80017d2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <HAL_I2C_MspInit+0x148>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d13d      	bne.n	80017d2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800175c:	2300      	movs	r3, #0
 800175e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001762:	f107 0318 	add.w	r3, r7, #24
 8001766:	4618      	mov	r0, r3
 8001768:	f002 fb10 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001772:	f7ff ff6b 	bl	800164c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_I2C_MspInit+0x140>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <HAL_I2C_MspInit+0x140>)
 800177c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_I2C_MspInit+0x140>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800178e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001796:	2312      	movs	r3, #18
 8001798:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017a8:	2304      	movs	r3, #4
 80017aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017b2:	4619      	mov	r1, r3
 80017b4:	480d      	ldr	r0, [pc, #52]	; (80017ec <HAL_I2C_MspInit+0x14c>)
 80017b6:	f000 fea9 	bl	800250c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_I2C_MspInit+0x140>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_I2C_MspInit+0x140>)
 80017c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_I2C_MspInit+0x140>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
}
 80017d2:	bf00      	nop
 80017d4:	37b0      	adds	r7, #176	; 0xb0
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40005400 	.word	0x40005400
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40005c00 	.word	0x40005c00
 80017ec:	40021c00 	.word	0x40021c00

080017f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a25      	ldr	r2, [pc, #148]	; (8001894 <HAL_TIM_Base_MspInit+0xa4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d143      	bne.n	800188a <HAL_TIM_Base_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a24      	ldr	r2, [pc, #144]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 8001808:	f043 0310 	orr.w	r3, r3, #16
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 DMA Init */
    /* TIM6_UP Init */
    hdma_tim6_up.Instance = DMA1_Stream1;
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_TIM_Base_MspInit+0xac>)
 800181c:	4a20      	ldr	r2, [pc, #128]	; (80018a0 <HAL_TIM_Base_MspInit+0xb0>)
 800181e:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_TIM_Base_MspInit+0xac>)
 8001822:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001826:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <HAL_TIM_Base_MspInit+0xac>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_TIM_Base_MspInit+0xac>)
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_TIM_Base_MspInit+0xac>)
 8001836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800183a:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_TIM_Base_MspInit+0xac>)
 800183e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001842:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_TIM_Base_MspInit+0xac>)
 8001846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800184a:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <HAL_TIM_Base_MspInit+0xac>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_TIM_Base_MspInit+0xac>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_TIM_Base_MspInit+0xac>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 800185e:	480f      	ldr	r0, [pc, #60]	; (800189c <HAL_TIM_Base_MspInit+0xac>)
 8001860:	f000 fb6a 	bl	8001f38 <HAL_DMA_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 800186a:	f7ff feef 	bl	800164c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_TIM_Base_MspInit+0xac>)
 8001872:	621a      	str	r2, [r3, #32]
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <HAL_TIM_Base_MspInit+0xac>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	2036      	movs	r0, #54	; 0x36
 8001880:	f000 fb23 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001884:	2036      	movs	r0, #54	; 0x36
 8001886:	f000 fb3c 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40001000 	.word	0x40001000
 8001898:	40023800 	.word	0x40023800
 800189c:	20000180 	.word	0x20000180
 80018a0:	40026028 	.word	0x40026028

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0ac      	sub	sp, #176	; 0xb0
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018bc:	f107 0318 	add.w	r3, r7, #24
 80018c0:	2284      	movs	r2, #132	; 0x84
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 fee5 	bl	8006694 <memset>
  if(huart->Instance==USART1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a32      	ldr	r2, [pc, #200]	; (8001998 <HAL_UART_MspInit+0xf4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d15c      	bne.n	800198e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018d4:	2340      	movs	r3, #64	; 0x40
 80018d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018d8:	2300      	movs	r3, #0
 80018da:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018dc:	f107 0318 	add.w	r3, r7, #24
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 fa53 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018ec:	f7ff feae 	bl	800164c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f0:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_UART_MspInit+0xf8>)
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	4a29      	ldr	r2, [pc, #164]	; (800199c <HAL_UART_MspInit+0xf8>)
 80018f6:	f043 0310 	orr.w	r3, r3, #16
 80018fa:	6453      	str	r3, [r2, #68]	; 0x44
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_UART_MspInit+0xf8>)
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_UART_MspInit+0xf8>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	4a23      	ldr	r2, [pc, #140]	; (800199c <HAL_UART_MspInit+0xf8>)
 800190e:	f043 0302 	orr.w	r3, r3, #2
 8001912:	6313      	str	r3, [r2, #48]	; 0x30
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_UART_MspInit+0xf8>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_UART_MspInit+0xf8>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	4a1d      	ldr	r2, [pc, #116]	; (800199c <HAL_UART_MspInit+0xf8>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6313      	str	r3, [r2, #48]	; 0x30
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_UART_MspInit+0xf8>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001950:	2307      	movs	r3, #7
 8001952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800195a:	4619      	mov	r1, r3
 800195c:	4810      	ldr	r0, [pc, #64]	; (80019a0 <HAL_UART_MspInit+0xfc>)
 800195e:	f000 fdd5 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001962:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001966:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800197c:	2307      	movs	r3, #7
 800197e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001986:	4619      	mov	r1, r3
 8001988:	4806      	ldr	r0, [pc, #24]	; (80019a4 <HAL_UART_MspInit+0x100>)
 800198a:	f000 fdbf 	bl	800250c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800198e:	bf00      	nop
 8001990:	37b0      	adds	r7, #176	; 0xb0
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40011000 	.word	0x40011000
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020400 	.word	0x40020400
 80019a4:	40020000 	.word	0x40020000

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80019ac:	e7fe      	b.n	80019ac <NMI_Handler+0x4>

080019ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <HardFault_Handler+0x4>

080019b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <MemManage_Handler+0x4>

080019ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <BusFault_Handler+0x4>

080019c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <UsageFault_Handler+0x4>

080019c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f4:	f000 f94a 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}

080019fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <DMA1_Stream1_IRQHandler+0x10>)
 8001a02:	f000 fb47 	bl	8002094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000180 	.word	0x20000180

08001a10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	tof1.right.distance=tof1.right.drv_tof.readRangeSingleMillimeters(&distanceStr);
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <TIM6_DAC_IRQHandler+0x30>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	480a      	ldr	r0, [pc, #40]	; (8001a44 <TIM6_DAC_IRQHandler+0x34>)
 8001a1a:	4798      	blx	r3
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <TIM6_DAC_IRQHandler+0x30>)
 8001a22:	601a      	str	r2, [r3, #0]
	sprintf(msgBuffer, "Distance: %d\r\n", &tof1.right.distance);
 8001a24:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <TIM6_DAC_IRQHandler+0x30>)
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <TIM6_DAC_IRQHandler+0x38>)
 8001a28:	4808      	ldr	r0, [pc, #32]	; (8001a4c <TIM6_DAC_IRQHandler+0x3c>)
 8001a2a:	f004 fec9 	bl	80067c0 <siprintf>
	printf(msgBuffer);
 8001a2e:	4807      	ldr	r0, [pc, #28]	; (8001a4c <TIM6_DAC_IRQHandler+0x3c>)
 8001a30:	f004 fe38 	bl	80066a4 <iprintf>
//	distance = readRangeSingleMillimeters(&distanceStr);
//	//distance=distance-65;//removing offset
//	sprintf(msgBuffer, "Distance: %d\r\n", distance);
//	printf(msgBuffer);
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a34:	4806      	ldr	r0, [pc, #24]	; (8001a50 <TIM6_DAC_IRQHandler+0x40>)
 8001a36:	f002 fe69 	bl	800470c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000274 	.word	0x20000274
 8001a44:	20000268 	.word	0x20000268
 8001a48:	08007a6c 	.word	0x08007a6c
 8001a4c:	2000030c 	.word	0x2000030c
 8001a50:	20000134 	.word	0x20000134

08001a54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e00a      	b.n	8001a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a66:	f3af 8000 	nop.w
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	60ba      	str	r2, [r7, #8]
 8001a72:	b2ca      	uxtb	r2, r1
 8001a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	dbf0      	blt.n	8001a66 <_read+0x12>
	}

return len;
 8001a84:	687b      	ldr	r3, [r7, #4]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e009      	b.n	8001ab4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	60ba      	str	r2, [r7, #8]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe ffc7 	bl	8000a3c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dbf1      	blt.n	8001aa0 <_write+0x12>
	}
	return len;
 8001abc:	687b      	ldr	r3, [r7, #4]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_close>:

int _close(int file)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
	return -1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aee:	605a      	str	r2, [r3, #4]
	return 0;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <_isatty>:

int _isatty(int file)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
	return 1;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f004 fd60 	bl	8006624 <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20050000 	.word	0x20050000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	200002a4 	.word	0x200002a4
 8001b98:	20000320 	.word	0x20000320

08001b9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <SystemInit+0x20>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <SystemInit+0x20>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bc6:	490e      	ldr	r1, [pc, #56]	; (8001c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bc8:	4a0e      	ldr	r2, [pc, #56]	; (8001c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bdc:	4c0b      	ldr	r4, [pc, #44]	; (8001c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bea:	f7ff ffd7 	bl	8001b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bee:	f004 fd1f 	bl	8006630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf2:	f7fe ff35 	bl	8000a60 <main>
  bx  lr    
 8001bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bf8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c04:	08007b44 	.word	0x08007b44
  ldr r2, =_sbss
 8001c08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c0c:	20000320 	.word	0x20000320

08001c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC_IRQHandler>

08001c12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c16:	2003      	movs	r0, #3
 8001c18:	f000 f94c 	bl	8001eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f000 f805 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c22:	f7ff fd19 	bl	8001658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x54>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f967 	bl	8001f1e <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f000 f92f 	bl	8001eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <HAL_InitTick+0x5c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000008 	.word	0x20000008
 8001c88:	20000004 	.word	0x20000004

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_IncTick+0x20>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	200002a8 	.word	0x200002a8

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	200002a8 	.word	0x200002a8

08001ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff ffee 	bl	8001cb4 <HAL_GetTick>
 8001cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d005      	beq.n	8001cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_Delay+0x44>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf2:	bf00      	nop
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8f7      	bhi.n	8001cf4 <HAL_Delay+0x28>
  {
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000008 	.word	0x20000008

08001d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <__NVIC_SetPriorityGrouping+0x40>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d30:	4013      	ands	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d42:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <__NVIC_SetPriorityGrouping+0x40>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	60d3      	str	r3, [r2, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00
 8001d58:	05fa0000 	.word	0x05fa0000

08001d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <__NVIC_GetPriorityGrouping+0x18>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	f003 0307 	and.w	r3, r3, #7
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	db0b      	blt.n	8001da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	f003 021f 	and.w	r2, r3, #31
 8001d90:	4907      	ldr	r1, [pc, #28]	; (8001db0 <__NVIC_EnableIRQ+0x38>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	2001      	movs	r0, #1
 8001d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db0a      	blt.n	8001dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	490c      	ldr	r1, [pc, #48]	; (8001e00 <__NVIC_SetPriority+0x4c>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ddc:	e00a      	b.n	8001df4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4908      	ldr	r1, [pc, #32]	; (8001e04 <__NVIC_SetPriority+0x50>)
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3b04      	subs	r3, #4
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	440b      	add	r3, r1
 8001df2:	761a      	strb	r2, [r3, #24]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf28      	it	cs
 8001e26:	2304      	movcs	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d902      	bls.n	8001e38 <NVIC_EncodePriority+0x30>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3b03      	subs	r3, #3
 8001e36:	e000      	b.n	8001e3a <NVIC_EncodePriority+0x32>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43d9      	mvns	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	4313      	orrs	r3, r2
         );
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e80:	d301      	bcc.n	8001e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00f      	b.n	8001ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <SysTick_Config+0x40>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8e:	210f      	movs	r1, #15
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f7ff ff8e 	bl	8001db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <SysTick_Config+0x40>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9e:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <SysTick_Config+0x40>)
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	e000e010 	.word	0xe000e010

08001eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff29 	bl	8001d14 <__NVIC_SetPriorityGrouping>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001edc:	f7ff ff3e 	bl	8001d5c <__NVIC_GetPriorityGrouping>
 8001ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	6978      	ldr	r0, [r7, #20]
 8001ee8:	f7ff ff8e 	bl	8001e08 <NVIC_EncodePriority>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff5d 	bl	8001db4 <__NVIC_SetPriority>
}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff31 	bl	8001d78 <__NVIC_EnableIRQ>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffa2 	bl	8001e70 <SysTick_Config>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff feb6 	bl	8001cb4 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e099      	b.n	8002088 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f74:	e00f      	b.n	8001f96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f76:	f7ff fe9d 	bl	8001cb4 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d908      	bls.n	8001f96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e078      	b.n	8002088 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1e8      	bne.n	8001f76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	4b38      	ldr	r3, [pc, #224]	; (8002090 <HAL_DMA_Init+0x158>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d107      	bne.n	8002000 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f023 0307 	bic.w	r3, r3, #7
 8002016:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4313      	orrs	r3, r2
 8002020:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	2b04      	cmp	r3, #4
 8002028:	d117      	bne.n	800205a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00e      	beq.n	800205a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f9e9 	bl	8002414 <DMA_CheckFifoParam>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2240      	movs	r2, #64	; 0x40
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002056:	2301      	movs	r3, #1
 8002058:	e016      	b.n	8002088 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f9a0 	bl	80023a8 <DMA_CalcBaseAndBitshift>
 8002068:	4603      	mov	r3, r0
 800206a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	223f      	movs	r2, #63	; 0x3f
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	f010803f 	.word	0xf010803f

08002094 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80020a0:	4b8e      	ldr	r3, [pc, #568]	; (80022dc <HAL_DMA_IRQHandler+0x248>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a8e      	ldr	r2, [pc, #568]	; (80022e0 <HAL_DMA_IRQHandler+0x24c>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	0a9b      	lsrs	r3, r3, #10
 80020ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020be:	2208      	movs	r2, #8
 80020c0:	409a      	lsls	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d01a      	beq.n	8002100 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d013      	beq.n	8002100 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0204 	bic.w	r2, r2, #4
 80020e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	2208      	movs	r2, #8
 80020ee:	409a      	lsls	r2, r3
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	2201      	movs	r2, #1
 8002106:	409a      	lsls	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d012      	beq.n	8002136 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002122:	2201      	movs	r2, #1
 8002124:	409a      	lsls	r2, r3
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212e:	f043 0202 	orr.w	r2, r3, #2
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213a:	2204      	movs	r2, #4
 800213c:	409a      	lsls	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d012      	beq.n	800216c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00b      	beq.n	800216c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	2204      	movs	r2, #4
 800215a:	409a      	lsls	r2, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002164:	f043 0204 	orr.w	r2, r3, #4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	2210      	movs	r2, #16
 8002172:	409a      	lsls	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d043      	beq.n	8002204 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d03c      	beq.n	8002204 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	2210      	movs	r2, #16
 8002190:	409a      	lsls	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d018      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d108      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d024      	beq.n	8002204 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
 80021c2:	e01f      	b.n	8002204 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01b      	beq.n	8002204 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
 80021d4:	e016      	b.n	8002204 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d107      	bne.n	80021f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0208 	bic.w	r2, r2, #8
 80021f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	2220      	movs	r2, #32
 800220a:	409a      	lsls	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 808f 	beq.w	8002334 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 8087 	beq.w	8002334 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222a:	2220      	movs	r2, #32
 800222c:	409a      	lsls	r2, r3
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b05      	cmp	r3, #5
 800223c:	d136      	bne.n	80022ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0216 	bic.w	r2, r2, #22
 800224c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800225c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d103      	bne.n	800226e <HAL_DMA_IRQHandler+0x1da>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0208 	bic.w	r2, r2, #8
 800227c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	223f      	movs	r2, #63	; 0x3f
 8002284:	409a      	lsls	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d07e      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
        }
        return;
 80022aa:	e079      	b.n	80023a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d01d      	beq.n	80022f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10d      	bne.n	80022e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d031      	beq.n	8002334 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
 80022d8:	e02c      	b.n	8002334 <HAL_DMA_IRQHandler+0x2a0>
 80022da:	bf00      	nop
 80022dc:	20000000 	.word	0x20000000
 80022e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d023      	beq.n	8002334 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	4798      	blx	r3
 80022f4:	e01e      	b.n	8002334 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10f      	bne.n	8002324 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0210 	bic.w	r2, r2, #16
 8002312:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	2b00      	cmp	r3, #0
 800233a:	d032      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d022      	beq.n	800238e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2205      	movs	r2, #5
 800234c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	3301      	adds	r3, #1
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	429a      	cmp	r2, r3
 800236a:	d307      	bcc.n	800237c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f2      	bne.n	8002360 <HAL_DMA_IRQHandler+0x2cc>
 800237a:	e000      	b.n	800237e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800237c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3
 800239e:	e000      	b.n	80023a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023a0:	bf00      	nop
    }
  }
}
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	3b10      	subs	r3, #16
 80023b8:	4a13      	ldr	r2, [pc, #76]	; (8002408 <DMA_CalcBaseAndBitshift+0x60>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <DMA_CalcBaseAndBitshift+0x64>)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4413      	add	r3, r2
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d908      	bls.n	80023e8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <DMA_CalcBaseAndBitshift+0x68>)
 80023de:	4013      	ands	r3, r2
 80023e0:	1d1a      	adds	r2, r3, #4
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	659a      	str	r2, [r3, #88]	; 0x58
 80023e6:	e006      	b.n	80023f6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <DMA_CalcBaseAndBitshift+0x68>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	aaaaaaab 	.word	0xaaaaaaab
 800240c:	08007a94 	.word	0x08007a94
 8002410:	fffffc00 	.word	0xfffffc00

08002414 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d11f      	bne.n	800246e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b03      	cmp	r3, #3
 8002432:	d856      	bhi.n	80024e2 <DMA_CheckFifoParam+0xce>
 8002434:	a201      	add	r2, pc, #4	; (adr r2, 800243c <DMA_CheckFifoParam+0x28>)
 8002436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243a:	bf00      	nop
 800243c:	0800244d 	.word	0x0800244d
 8002440:	0800245f 	.word	0x0800245f
 8002444:	0800244d 	.word	0x0800244d
 8002448:	080024e3 	.word	0x080024e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d046      	beq.n	80024e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800245c:	e043      	b.n	80024e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002466:	d140      	bne.n	80024ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246c:	e03d      	b.n	80024ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002476:	d121      	bne.n	80024bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b03      	cmp	r3, #3
 800247c:	d837      	bhi.n	80024ee <DMA_CheckFifoParam+0xda>
 800247e:	a201      	add	r2, pc, #4	; (adr r2, 8002484 <DMA_CheckFifoParam+0x70>)
 8002480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002484:	08002495 	.word	0x08002495
 8002488:	0800249b 	.word	0x0800249b
 800248c:	08002495 	.word	0x08002495
 8002490:	080024ad 	.word	0x080024ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
      break;
 8002498:	e030      	b.n	80024fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d025      	beq.n	80024f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024aa:	e022      	b.n	80024f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024b4:	d11f      	bne.n	80024f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024ba:	e01c      	b.n	80024f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d903      	bls.n	80024ca <DMA_CheckFifoParam+0xb6>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d003      	beq.n	80024d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024c8:	e018      	b.n	80024fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
      break;
 80024ce:	e015      	b.n	80024fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00e      	beq.n	80024fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
      break;
 80024e0:	e00b      	b.n	80024fa <DMA_CheckFifoParam+0xe6>
      break;
 80024e2:	bf00      	nop
 80024e4:	e00a      	b.n	80024fc <DMA_CheckFifoParam+0xe8>
      break;
 80024e6:	bf00      	nop
 80024e8:	e008      	b.n	80024fc <DMA_CheckFifoParam+0xe8>
      break;
 80024ea:	bf00      	nop
 80024ec:	e006      	b.n	80024fc <DMA_CheckFifoParam+0xe8>
      break;
 80024ee:	bf00      	nop
 80024f0:	e004      	b.n	80024fc <DMA_CheckFifoParam+0xe8>
      break;
 80024f2:	bf00      	nop
 80024f4:	e002      	b.n	80024fc <DMA_CheckFifoParam+0xe8>
      break;   
 80024f6:	bf00      	nop
 80024f8:	e000      	b.n	80024fc <DMA_CheckFifoParam+0xe8>
      break;
 80024fa:	bf00      	nop
    }
  } 
  
  return status; 
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop

0800250c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e175      	b.n	8002818 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	f040 8164 	bne.w	8002812 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d005      	beq.n	8002562 <HAL_GPIO_Init+0x56>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d130      	bne.n	80025c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	2203      	movs	r2, #3
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002598:	2201      	movs	r2, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 0201 	and.w	r2, r3, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d017      	beq.n	8002600 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d123      	bne.n	8002654 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	220f      	movs	r2, #15
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	08da      	lsrs	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0203 	and.w	r2, r3, #3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80be 	beq.w	8002812 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	4b66      	ldr	r3, [pc, #408]	; (8002830 <HAL_GPIO_Init+0x324>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	4a65      	ldr	r2, [pc, #404]	; (8002830 <HAL_GPIO_Init+0x324>)
 800269c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a0:	6453      	str	r3, [r2, #68]	; 0x44
 80026a2:	4b63      	ldr	r3, [pc, #396]	; (8002830 <HAL_GPIO_Init+0x324>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026ae:	4a61      	ldr	r2, [pc, #388]	; (8002834 <HAL_GPIO_Init+0x328>)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	3302      	adds	r3, #2
 80026b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	220f      	movs	r2, #15
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a58      	ldr	r2, [pc, #352]	; (8002838 <HAL_GPIO_Init+0x32c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d037      	beq.n	800274a <HAL_GPIO_Init+0x23e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a57      	ldr	r2, [pc, #348]	; (800283c <HAL_GPIO_Init+0x330>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d031      	beq.n	8002746 <HAL_GPIO_Init+0x23a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a56      	ldr	r2, [pc, #344]	; (8002840 <HAL_GPIO_Init+0x334>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d02b      	beq.n	8002742 <HAL_GPIO_Init+0x236>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a55      	ldr	r2, [pc, #340]	; (8002844 <HAL_GPIO_Init+0x338>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d025      	beq.n	800273e <HAL_GPIO_Init+0x232>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a54      	ldr	r2, [pc, #336]	; (8002848 <HAL_GPIO_Init+0x33c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01f      	beq.n	800273a <HAL_GPIO_Init+0x22e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a53      	ldr	r2, [pc, #332]	; (800284c <HAL_GPIO_Init+0x340>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d019      	beq.n	8002736 <HAL_GPIO_Init+0x22a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a52      	ldr	r2, [pc, #328]	; (8002850 <HAL_GPIO_Init+0x344>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_GPIO_Init+0x226>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a51      	ldr	r2, [pc, #324]	; (8002854 <HAL_GPIO_Init+0x348>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00d      	beq.n	800272e <HAL_GPIO_Init+0x222>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a50      	ldr	r2, [pc, #320]	; (8002858 <HAL_GPIO_Init+0x34c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d007      	beq.n	800272a <HAL_GPIO_Init+0x21e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4f      	ldr	r2, [pc, #316]	; (800285c <HAL_GPIO_Init+0x350>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_GPIO_Init+0x21a>
 8002722:	2309      	movs	r3, #9
 8002724:	e012      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002726:	230a      	movs	r3, #10
 8002728:	e010      	b.n	800274c <HAL_GPIO_Init+0x240>
 800272a:	2308      	movs	r3, #8
 800272c:	e00e      	b.n	800274c <HAL_GPIO_Init+0x240>
 800272e:	2307      	movs	r3, #7
 8002730:	e00c      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002732:	2306      	movs	r3, #6
 8002734:	e00a      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002736:	2305      	movs	r3, #5
 8002738:	e008      	b.n	800274c <HAL_GPIO_Init+0x240>
 800273a:	2304      	movs	r3, #4
 800273c:	e006      	b.n	800274c <HAL_GPIO_Init+0x240>
 800273e:	2303      	movs	r3, #3
 8002740:	e004      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002742:	2302      	movs	r3, #2
 8002744:	e002      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_GPIO_Init+0x240>
 800274a:	2300      	movs	r3, #0
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	f002 0203 	and.w	r2, r2, #3
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	4093      	lsls	r3, r2
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800275c:	4935      	ldr	r1, [pc, #212]	; (8002834 <HAL_GPIO_Init+0x328>)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800276a:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <HAL_GPIO_Init+0x354>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800278e:	4a34      	ldr	r2, [pc, #208]	; (8002860 <HAL_GPIO_Init+0x354>)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002794:	4b32      	ldr	r3, [pc, #200]	; (8002860 <HAL_GPIO_Init+0x354>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b8:	4a29      	ldr	r2, [pc, #164]	; (8002860 <HAL_GPIO_Init+0x354>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027be:	4b28      	ldr	r3, [pc, #160]	; (8002860 <HAL_GPIO_Init+0x354>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e2:	4a1f      	ldr	r2, [pc, #124]	; (8002860 <HAL_GPIO_Init+0x354>)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_GPIO_Init+0x354>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <HAL_GPIO_Init+0x354>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3301      	adds	r3, #1
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	2b0f      	cmp	r3, #15
 800281c:	f67f ae86 	bls.w	800252c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3724      	adds	r7, #36	; 0x24
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	40013800 	.word	0x40013800
 8002838:	40020000 	.word	0x40020000
 800283c:	40020400 	.word	0x40020400
 8002840:	40020800 	.word	0x40020800
 8002844:	40020c00 	.word	0x40020c00
 8002848:	40021000 	.word	0x40021000
 800284c:	40021400 	.word	0x40021400
 8002850:	40021800 	.word	0x40021800
 8002854:	40021c00 	.word	0x40021c00
 8002858:	40022000 	.word	0x40022000
 800285c:	40022400 	.word	0x40022400
 8002860:	40013c00 	.word	0x40013c00

08002864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
 8002870:	4613      	mov	r3, r2
 8002872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002874:	787b      	ldrb	r3, [r7, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002880:	e003      	b.n	800288a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	041a      	lsls	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	619a      	str	r2, [r3, #24]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e07f      	b.n	80029aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe feee 	bl	80016a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2224      	movs	r2, #36	; 0x24
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	e006      	b.n	8002920 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800291e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d104      	bne.n	8002932 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002930:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <HAL_I2C_Init+0x11c>)
 800293e:	430b      	orrs	r3, r1
 8002940:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002950:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69d9      	ldr	r1, [r3, #28]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1a      	ldr	r2, [r3, #32]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	02008000 	.word	0x02008000

080029b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	4608      	mov	r0, r1
 80029c2:	4611      	mov	r1, r2
 80029c4:	461a      	mov	r2, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	817b      	strh	r3, [r7, #10]
 80029ca:	460b      	mov	r3, r1
 80029cc:	813b      	strh	r3, [r7, #8]
 80029ce:	4613      	mov	r3, r2
 80029d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b20      	cmp	r3, #32
 80029dc:	f040 80f9 	bne.w	8002bd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_I2C_Mem_Write+0x34>
 80029e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d105      	bne.n	80029f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0ed      	b.n	8002bd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_I2C_Mem_Write+0x4e>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e0e6      	b.n	8002bd4 <HAL_I2C_Mem_Write+0x21c>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a0e:	f7ff f951 	bl	8001cb4 <HAL_GetTick>
 8002a12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	2319      	movs	r3, #25
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fac3 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0d1      	b.n	8002bd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2221      	movs	r2, #33	; 0x21
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2240      	movs	r2, #64	; 0x40
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a3a      	ldr	r2, [r7, #32]
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a58:	88f8      	ldrh	r0, [r7, #6]
 8002a5a:	893a      	ldrh	r2, [r7, #8]
 8002a5c:	8979      	ldrh	r1, [r7, #10]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	4603      	mov	r3, r0
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f9d3 	bl	8002e14 <I2C_RequestMemoryWrite>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0a9      	b.n	8002bd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2bff      	cmp	r3, #255	; 0xff
 8002a88:	d90e      	bls.n	8002aa8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	22ff      	movs	r2, #255	; 0xff
 8002a8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	8979      	ldrh	r1, [r7, #10]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fc1f 	bl	80032e4 <I2C_TransferConfig>
 8002aa6:	e00f      	b.n	8002ac8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	8979      	ldrh	r1, [r7, #10]
 8002aba:	2300      	movs	r3, #0
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fc0e 	bl	80032e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 faad 	bl	800302c <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e07b      	b.n	8002bd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d034      	beq.n	8002b80 <HAL_I2C_Mem_Write+0x1c8>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d130      	bne.n	8002b80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b24:	2200      	movs	r2, #0
 8002b26:	2180      	movs	r1, #128	; 0x80
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fa3f 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e04d      	b.n	8002bd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2bff      	cmp	r3, #255	; 0xff
 8002b40:	d90e      	bls.n	8002b60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	22ff      	movs	r2, #255	; 0xff
 8002b46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	8979      	ldrh	r1, [r7, #10]
 8002b50:	2300      	movs	r3, #0
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fbc3 	bl	80032e4 <I2C_TransferConfig>
 8002b5e:	e00f      	b.n	8002b80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	8979      	ldrh	r1, [r7, #10]
 8002b72:	2300      	movs	r3, #0
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fbb2 	bl	80032e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d19e      	bne.n	8002ac8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fa8c 	bl	80030ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e01a      	b.n	8002bd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_I2C_Mem_Write+0x224>)
 8002bb2:	400b      	ands	r3, r1
 8002bb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e000      	b.n	8002bd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002bd2:	2302      	movs	r3, #2
  }
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	fe00e800 	.word	0xfe00e800

08002be0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	817b      	strh	r3, [r7, #10]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	813b      	strh	r3, [r7, #8]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	f040 80fd 	bne.w	8002e02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_I2C_Mem_Read+0x34>
 8002c0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d105      	bne.n	8002c20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0f1      	b.n	8002e04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_I2C_Mem_Read+0x4e>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e0ea      	b.n	8002e04 <HAL_I2C_Mem_Read+0x224>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c36:	f7ff f83d 	bl	8001cb4 <HAL_GetTick>
 8002c3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2319      	movs	r3, #25
 8002c42:	2201      	movs	r2, #1
 8002c44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f9af 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0d5      	b.n	8002e04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2222      	movs	r2, #34	; 0x22
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2240      	movs	r2, #64	; 0x40
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a3a      	ldr	r2, [r7, #32]
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c80:	88f8      	ldrh	r0, [r7, #6]
 8002c82:	893a      	ldrh	r2, [r7, #8]
 8002c84:	8979      	ldrh	r1, [r7, #10]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	4603      	mov	r3, r0
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f913 	bl	8002ebc <I2C_RequestMemoryRead>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0ad      	b.n	8002e04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2bff      	cmp	r3, #255	; 0xff
 8002cb0:	d90e      	bls.n	8002cd0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	22ff      	movs	r2, #255	; 0xff
 8002cb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	8979      	ldrh	r1, [r7, #10]
 8002cc0:	4b52      	ldr	r3, [pc, #328]	; (8002e0c <HAL_I2C_Mem_Read+0x22c>)
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 fb0b 	bl	80032e4 <I2C_TransferConfig>
 8002cce:	e00f      	b.n	8002cf0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	8979      	ldrh	r1, [r7, #10]
 8002ce2:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <HAL_I2C_Mem_Read+0x22c>)
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fafa 	bl	80032e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f956 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e07c      	b.n	8002e04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d034      	beq.n	8002db0 <HAL_I2C_Mem_Read+0x1d0>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d130      	bne.n	8002db0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	2200      	movs	r2, #0
 8002d56:	2180      	movs	r1, #128	; 0x80
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f927 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e04d      	b.n	8002e04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2bff      	cmp	r3, #255	; 0xff
 8002d70:	d90e      	bls.n	8002d90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	22ff      	movs	r2, #255	; 0xff
 8002d76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	8979      	ldrh	r1, [r7, #10]
 8002d80:	2300      	movs	r3, #0
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 faab 	bl	80032e4 <I2C_TransferConfig>
 8002d8e:	e00f      	b.n	8002db0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	8979      	ldrh	r1, [r7, #10]
 8002da2:	2300      	movs	r3, #0
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 fa9a 	bl	80032e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d19a      	bne.n	8002cf0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f974 	bl	80030ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e01a      	b.n	8002e04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_I2C_Mem_Read+0x230>)
 8002de2:	400b      	ands	r3, r1
 8002de4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e000      	b.n	8002e04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
  }
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	80002400 	.word	0x80002400
 8002e10:	fe00e800 	.word	0xfe00e800

08002e14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	461a      	mov	r2, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	817b      	strh	r3, [r7, #10]
 8002e26:	460b      	mov	r3, r1
 8002e28:	813b      	strh	r3, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	8979      	ldrh	r1, [r7, #10]
 8002e34:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <I2C_RequestMemoryWrite+0xa4>)
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fa51 	bl	80032e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	69b9      	ldr	r1, [r7, #24]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f8f0 	bl	800302c <I2C_WaitOnTXISFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e02c      	b.n	8002eb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e5c:	893b      	ldrh	r3, [r7, #8]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	629a      	str	r2, [r3, #40]	; 0x28
 8002e66:	e015      	b.n	8002e94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e68:	893b      	ldrh	r3, [r7, #8]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	69b9      	ldr	r1, [r7, #24]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f8d6 	bl	800302c <I2C_WaitOnTXISFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e012      	b.n	8002eb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e8a:	893b      	ldrh	r3, [r7, #8]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f884 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	80002000 	.word	0x80002000

08002ebc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	817b      	strh	r3, [r7, #10]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	813b      	strh	r3, [r7, #8]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	8979      	ldrh	r1, [r7, #10]
 8002edc:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <I2C_RequestMemoryRead+0xa4>)
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f9fe 	bl	80032e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	69b9      	ldr	r1, [r7, #24]
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f89d 	bl	800302c <I2C_WaitOnTXISFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e02c      	b.n	8002f56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f02:	893b      	ldrh	r3, [r7, #8]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f0c:	e015      	b.n	8002f3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f0e:	893b      	ldrh	r3, [r7, #8]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	69b9      	ldr	r1, [r7, #24]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f883 	bl	800302c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e012      	b.n	8002f56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f30:	893b      	ldrh	r3, [r7, #8]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2200      	movs	r2, #0
 8002f42:	2140      	movs	r1, #64	; 0x40
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f831 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	80002000 	.word	0x80002000

08002f64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d103      	bne.n	8002f82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d007      	beq.n	8002fa0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	619a      	str	r2, [r3, #24]
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbc:	e022      	b.n	8003004 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d01e      	beq.n	8003004 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc6:	f7fe fe75 	bl	8001cb4 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d302      	bcc.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d113      	bne.n	8003004 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	f043 0220 	orr.w	r2, r3, #32
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e00f      	b.n	8003024 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	429a      	cmp	r2, r3
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	429a      	cmp	r2, r3
 8003020:	d0cd      	beq.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003038:	e02c      	b.n	8003094 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f870 	bl	8003124 <I2C_IsErrorOccurred>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e02a      	b.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d01e      	beq.n	8003094 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003056:	f7fe fe2d 	bl	8001cb4 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	429a      	cmp	r2, r3
 8003064:	d302      	bcc.n	800306c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d113      	bne.n	8003094 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e007      	b.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d1cb      	bne.n	800303a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030b8:	e028      	b.n	800310c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f830 	bl	8003124 <I2C_IsErrorOccurred>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e026      	b.n	800311c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ce:	f7fe fdf1 	bl	8001cb4 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d113      	bne.n	800310c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e007      	b.n	800311c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b20      	cmp	r3, #32
 8003118:	d1cf      	bne.n	80030ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d068      	beq.n	8003222 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2210      	movs	r2, #16
 8003156:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003158:	e049      	b.n	80031ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d045      	beq.n	80031ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7fe fda7 	bl	8001cb4 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <I2C_IsErrorOccurred+0x54>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d13a      	bne.n	80031ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003182:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800318a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319a:	d121      	bne.n	80031e0 <I2C_IsErrorOccurred+0xbc>
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031a2:	d01d      	beq.n	80031e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d01a      	beq.n	80031e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031ba:	f7fe fd7b 	bl	8001cb4 <HAL_GetTick>
 80031be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031c0:	e00e      	b.n	80031e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031c2:	f7fe fd77 	bl	8001cb4 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b19      	cmp	r3, #25
 80031ce:	d907      	bls.n	80031e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	f043 0320 	orr.w	r3, r3, #32
 80031d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80031de:	e006      	b.n	80031ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d1e9      	bne.n	80031c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d003      	beq.n	8003204 <I2C_IsErrorOccurred+0xe0>
 80031fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0aa      	beq.n	800315a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003208:	2b00      	cmp	r3, #0
 800320a:	d103      	bne.n	8003214 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2220      	movs	r2, #32
 8003212:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003244:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	f043 0308 	orr.w	r3, r3, #8
 800325c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003266:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00b      	beq.n	8003290 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	f043 0302 	orr.w	r3, r3, #2
 800327e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003288:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01c      	beq.n	80032d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7ff fe63 	bl	8002f64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <I2C_IsErrorOccurred+0x1bc>)
 80032aa:	400b      	ands	r3, r1
 80032ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	431a      	orrs	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80032d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3728      	adds	r7, #40	; 0x28
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	fe00e800 	.word	0xfe00e800

080032e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	817b      	strh	r3, [r7, #10]
 80032f2:	4613      	mov	r3, r2
 80032f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032f6:	897b      	ldrh	r3, [r7, #10]
 80032f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032fc:	7a7b      	ldrb	r3, [r7, #9]
 80032fe:	041b      	lsls	r3, r3, #16
 8003300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003304:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	4313      	orrs	r3, r2
 800330e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003312:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	0d5b      	lsrs	r3, r3, #21
 800331e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <I2C_TransferConfig+0x60>)
 8003324:	430b      	orrs	r3, r1
 8003326:	43db      	mvns	r3, r3
 8003328:	ea02 0103 	and.w	r1, r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	03ff63ff 	.word	0x03ff63ff

08003348 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b20      	cmp	r3, #32
 800335c:	d138      	bne.n	80033d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003368:	2302      	movs	r3, #2
 800336a:	e032      	b.n	80033d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2224      	movs	r2, #36	; 0x24
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800339a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d139      	bne.n	8003468 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033fe:	2302      	movs	r3, #2
 8003400:	e033      	b.n	800346a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2224      	movs	r2, #36	; 0x24
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003430:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	e000      	b.n	800346a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003468:	2302      	movs	r3, #2
  }
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003480:	2300      	movs	r3, #0
 8003482:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e291      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8087 	beq.w	80035aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800349c:	4b96      	ldr	r3, [pc, #600]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d00c      	beq.n	80034c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a8:	4b93      	ldr	r3, [pc, #588]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d112      	bne.n	80034da <HAL_RCC_OscConfig+0x62>
 80034b4:	4b90      	ldr	r3, [pc, #576]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c0:	d10b      	bne.n	80034da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c2:	4b8d      	ldr	r3, [pc, #564]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d06c      	beq.n	80035a8 <HAL_RCC_OscConfig+0x130>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d168      	bne.n	80035a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e26b      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x7a>
 80034e4:	4b84      	ldr	r3, [pc, #528]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a83      	ldr	r2, [pc, #524]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	e02e      	b.n	8003550 <HAL_RCC_OscConfig+0xd8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x9c>
 80034fa:	4b7f      	ldr	r3, [pc, #508]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a7e      	ldr	r2, [pc, #504]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b7c      	ldr	r3, [pc, #496]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a7b      	ldr	r2, [pc, #492]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 800350c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e01d      	b.n	8003550 <HAL_RCC_OscConfig+0xd8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0xc0>
 800351e:	4b76      	ldr	r3, [pc, #472]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a75      	ldr	r2, [pc, #468]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	4b73      	ldr	r3, [pc, #460]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a72      	ldr	r2, [pc, #456]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e00b      	b.n	8003550 <HAL_RCC_OscConfig+0xd8>
 8003538:	4b6f      	ldr	r3, [pc, #444]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a6e      	ldr	r2, [pc, #440]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 800353e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b6c      	ldr	r3, [pc, #432]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a6b      	ldr	r2, [pc, #428]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 800354a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d013      	beq.n	8003580 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fe fbac 	bl	8001cb4 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003560:	f7fe fba8 	bl	8001cb4 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e21f      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	4b61      	ldr	r3, [pc, #388]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0xe8>
 800357e:	e014      	b.n	80035aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fe fb98 	bl	8001cb4 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003588:	f7fe fb94 	bl	8001cb4 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e20b      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359a:	4b57      	ldr	r3, [pc, #348]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x110>
 80035a6:	e000      	b.n	80035aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d069      	beq.n	800368a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035b6:	4b50      	ldr	r3, [pc, #320]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c2:	4b4d      	ldr	r3, [pc, #308]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 030c 	and.w	r3, r3, #12
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d11c      	bne.n	8003608 <HAL_RCC_OscConfig+0x190>
 80035ce:	4b4a      	ldr	r3, [pc, #296]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d116      	bne.n	8003608 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	4b47      	ldr	r3, [pc, #284]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_RCC_OscConfig+0x17a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d001      	beq.n	80035f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e1df      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f2:	4b41      	ldr	r3, [pc, #260]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	493d      	ldr	r1, [pc, #244]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003606:	e040      	b.n	800368a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d023      	beq.n	8003658 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003610:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a38      	ldr	r2, [pc, #224]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fe fb4a 	bl	8001cb4 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003624:	f7fe fb46 	bl	8001cb4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e1bd      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003636:	4b30      	ldr	r3, [pc, #192]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003642:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4929      	ldr	r1, [pc, #164]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
 8003656:	e018      	b.n	800368a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003658:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a26      	ldr	r2, [pc, #152]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fe fb26 	bl	8001cb4 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366c:	f7fe fb22 	bl	8001cb4 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e199      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367e:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d038      	beq.n	8003708 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d019      	beq.n	80036d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800369e:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a2:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fe fb03 	bl	8001cb4 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b2:	f7fe faff 	bl	8001cb4 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e176      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x23a>
 80036d0:	e01a      	b.n	8003708 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d6:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <HAL_RCC_OscConfig+0x280>)
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036de:	f7fe fae9 	bl	8001cb4 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	e00a      	b.n	80036fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e6:	f7fe fae5 	bl	8001cb4 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d903      	bls.n	80036fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e15c      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
 80036f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fc:	4b91      	ldr	r3, [pc, #580]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80036fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1ee      	bne.n	80036e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80a4 	beq.w	800385e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003716:	4b8b      	ldr	r3, [pc, #556]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10d      	bne.n	800373e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003722:	4b88      	ldr	r3, [pc, #544]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	4a87      	ldr	r2, [pc, #540]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372c:	6413      	str	r3, [r2, #64]	; 0x40
 800372e:	4b85      	ldr	r3, [pc, #532]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800373e:	4b82      	ldr	r3, [pc, #520]	; (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d118      	bne.n	800377c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800374a:	4b7f      	ldr	r3, [pc, #508]	; (8003948 <HAL_RCC_OscConfig+0x4d0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a7e      	ldr	r2, [pc, #504]	; (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003756:	f7fe faad 	bl	8001cb4 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375e:	f7fe faa9 	bl	8001cb4 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b64      	cmp	r3, #100	; 0x64
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e120      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003770:	4b75      	ldr	r3, [pc, #468]	; (8003948 <HAL_RCC_OscConfig+0x4d0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d106      	bne.n	8003792 <HAL_RCC_OscConfig+0x31a>
 8003784:	4b6f      	ldr	r3, [pc, #444]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	4a6e      	ldr	r2, [pc, #440]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6713      	str	r3, [r2, #112]	; 0x70
 8003790:	e02d      	b.n	80037ee <HAL_RCC_OscConfig+0x376>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x33c>
 800379a:	4b6a      	ldr	r3, [pc, #424]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	4a69      	ldr	r2, [pc, #420]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	6713      	str	r3, [r2, #112]	; 0x70
 80037a6:	4b67      	ldr	r3, [pc, #412]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	4a66      	ldr	r2, [pc, #408]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80037ac:	f023 0304 	bic.w	r3, r3, #4
 80037b0:	6713      	str	r3, [r2, #112]	; 0x70
 80037b2:	e01c      	b.n	80037ee <HAL_RCC_OscConfig+0x376>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d10c      	bne.n	80037d6 <HAL_RCC_OscConfig+0x35e>
 80037bc:	4b61      	ldr	r3, [pc, #388]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	4a60      	ldr	r2, [pc, #384]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80037c2:	f043 0304 	orr.w	r3, r3, #4
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70
 80037c8:	4b5e      	ldr	r3, [pc, #376]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	4a5d      	ldr	r2, [pc, #372]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	; 0x70
 80037d4:	e00b      	b.n	80037ee <HAL_RCC_OscConfig+0x376>
 80037d6:	4b5b      	ldr	r3, [pc, #364]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	4a5a      	ldr	r2, [pc, #360]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	6713      	str	r3, [r2, #112]	; 0x70
 80037e2:	4b58      	ldr	r3, [pc, #352]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	4a57      	ldr	r2, [pc, #348]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80037e8:	f023 0304 	bic.w	r3, r3, #4
 80037ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d015      	beq.n	8003822 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fe fa5d 	bl	8001cb4 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fe fa59 	bl	8001cb4 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	; 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0ce      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003814:	4b4b      	ldr	r3, [pc, #300]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0ee      	beq.n	80037fe <HAL_RCC_OscConfig+0x386>
 8003820:	e014      	b.n	800384c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003822:	f7fe fa47 	bl	8001cb4 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fe fa43 	bl	8001cb4 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e0b8      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003840:	4b40      	ldr	r3, [pc, #256]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ee      	bne.n	800382a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d105      	bne.n	800385e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003852:	4b3c      	ldr	r3, [pc, #240]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	4a3b      	ldr	r2, [pc, #236]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800385c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80a4 	beq.w	80039b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003868:	4b36      	ldr	r3, [pc, #216]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d06b      	beq.n	800394c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d149      	bne.n	8003910 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387c:	4b31      	ldr	r3, [pc, #196]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a30      	ldr	r2, [pc, #192]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fe fa14 	bl	8001cb4 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003890:	f7fe fa10 	bl	8001cb4 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e087      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a2:	4b28      	ldr	r3, [pc, #160]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	019b      	lsls	r3, r3, #6
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	3b01      	subs	r3, #1
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	061b      	lsls	r3, r3, #24
 80038d2:	4313      	orrs	r3, r2
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80038d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038da:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038dc:	4b19      	ldr	r3, [pc, #100]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a18      	ldr	r2, [pc, #96]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 80038e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7fe f9e4 	bl	8001cb4 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f0:	f7fe f9e0 	bl	8001cb4 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e057      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003902:	4b10      	ldr	r3, [pc, #64]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x478>
 800390e:	e04f      	b.n	80039b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a0b      	ldr	r2, [pc, #44]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800391a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe f9ca 	bl	8001cb4 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003924:	f7fe f9c6 	bl	8001cb4 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e03d      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	4b03      	ldr	r3, [pc, #12]	; (8003944 <HAL_RCC_OscConfig+0x4cc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x4ac>
 8003942:	e035      	b.n	80039b0 <HAL_RCC_OscConfig+0x538>
 8003944:	40023800 	.word	0x40023800
 8003948:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <HAL_RCC_OscConfig+0x544>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d028      	beq.n	80039ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d121      	bne.n	80039ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d11a      	bne.n	80039ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800397c:	4013      	ands	r3, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003982:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003984:	4293      	cmp	r3, r2
 8003986:	d111      	bne.n	80039ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	3b01      	subs	r3, #1
 8003996:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d107      	bne.n	80039ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800

080039c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0d0      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039d8:	4b6a      	ldr	r3, [pc, #424]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d910      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b67      	ldr	r3, [pc, #412]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 020f 	bic.w	r2, r3, #15
 80039ee:	4965      	ldr	r1, [pc, #404]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b63      	ldr	r3, [pc, #396]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0b8      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a20:	4b59      	ldr	r3, [pc, #356]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a38:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a52      	ldr	r2, [pc, #328]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b50      	ldr	r3, [pc, #320]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	494d      	ldr	r1, [pc, #308]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d040      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d115      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e07f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a82:	4b41      	ldr	r3, [pc, #260]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d109      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e073      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a92:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e06b      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa2:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f023 0203 	bic.w	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4936      	ldr	r1, [pc, #216]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab4:	f7fe f8fe 	bl	8001cb4 <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	e00a      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003abc:	f7fe f8fa 	bl	8001cb4 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e053      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 020c 	and.w	r2, r3, #12
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d1eb      	bne.n	8003abc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d210      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 020f 	bic.w	r2, r3, #15
 8003afa:	4922      	ldr	r1, [pc, #136]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e032      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4916      	ldr	r1, [pc, #88]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	490e      	ldr	r1, [pc, #56]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b52:	f000 f821 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8003b56:	4602      	mov	r2, r0
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	490a      	ldr	r1, [pc, #40]	; (8003b8c <HAL_RCC_ClockConfig+0x1cc>)
 8003b64:	5ccb      	ldrb	r3, [r1, r3]
 8003b66:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6a:	4a09      	ldr	r2, [pc, #36]	; (8003b90 <HAL_RCC_ClockConfig+0x1d0>)
 8003b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCC_ClockConfig+0x1d4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe f85a 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	08007a7c 	.word	0x08007a7c
 8003b90:	20000000 	.word	0x20000000
 8003b94:	20000004 	.word	0x20000004

08003b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b9c:	b090      	sub	sp, #64	; 0x40
 8003b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba8:	2300      	movs	r3, #0
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb0:	4b59      	ldr	r3, [pc, #356]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d00d      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	f200 80a1 	bhi.w	8003d04 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x34>
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bca:	e09b      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bcc:	4b53      	ldr	r3, [pc, #332]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003bce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd0:	e09b      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd2:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd6:	e098      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003be2:	4b4d      	ldr	r3, [pc, #308]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d028      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bee:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	099b      	lsrs	r3, r3, #6
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	623b      	str	r3, [r7, #32]
 8003bf8:	627a      	str	r2, [r7, #36]	; 0x24
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c00:	2100      	movs	r1, #0
 8003c02:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c04:	fb03 f201 	mul.w	r2, r3, r1
 8003c08:	2300      	movs	r3, #0
 8003c0a:	fb00 f303 	mul.w	r3, r0, r3
 8003c0e:	4413      	add	r3, r2
 8003c10:	4a43      	ldr	r2, [pc, #268]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c12:	fba0 1202 	umull	r1, r2, r0, r2
 8003c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c18:	460a      	mov	r2, r1
 8003c1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1e:	4413      	add	r3, r2
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c24:	2200      	movs	r2, #0
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	61fa      	str	r2, [r7, #28]
 8003c2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c32:	f7fc fd81 	bl	8000738 <__aeabi_uldivmod>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3e:	e053      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c40:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	099b      	lsrs	r3, r3, #6
 8003c46:	2200      	movs	r2, #0
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	617a      	str	r2, [r7, #20]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c52:	f04f 0b00 	mov.w	fp, #0
 8003c56:	4652      	mov	r2, sl
 8003c58:	465b      	mov	r3, fp
 8003c5a:	f04f 0000 	mov.w	r0, #0
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	0159      	lsls	r1, r3, #5
 8003c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c68:	0150      	lsls	r0, r2, #5
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	ebb2 080a 	subs.w	r8, r2, sl
 8003c72:	eb63 090b 	sbc.w	r9, r3, fp
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c8a:	ebb2 0408 	subs.w	r4, r2, r8
 8003c8e:	eb63 0509 	sbc.w	r5, r3, r9
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	00eb      	lsls	r3, r5, #3
 8003c9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca0:	00e2      	lsls	r2, r4, #3
 8003ca2:	4614      	mov	r4, r2
 8003ca4:	461d      	mov	r5, r3
 8003ca6:	eb14 030a 	adds.w	r3, r4, sl
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	eb45 030b 	adc.w	r3, r5, fp
 8003cb0:	607b      	str	r3, [r7, #4]
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	028b      	lsls	r3, r1, #10
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cc8:	4621      	mov	r1, r4
 8003cca:	028a      	lsls	r2, r1, #10
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	60fa      	str	r2, [r7, #12]
 8003cd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cdc:	f7fc fd2c 	bl	8000738 <__aeabi_uldivmod>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	0c1b      	lsrs	r3, r3, #16
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d02:	e002      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3740      	adds	r7, #64	; 0x40
 8003d10:	46bd      	mov	sp, r7
 8003d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	00f42400 	.word	0x00f42400
 8003d20:	017d7840 	.word	0x017d7840

08003d24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000000 	.word	0x20000000

08003d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d40:	f7ff fff0 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	0a9b      	lsrs	r3, r3, #10
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4903      	ldr	r1, [pc, #12]	; (8003d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	08007a8c 	.word	0x08007a8c

08003d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d68:	f7ff ffdc 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	0b5b      	lsrs	r3, r3, #13
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	4903      	ldr	r1, [pc, #12]	; (8003d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	08007a8c 	.word	0x08007a8c

08003d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d012      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003db4:	4b69      	ldr	r3, [pc, #420]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a68      	ldr	r2, [pc, #416]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dbe:	6093      	str	r3, [r2, #8]
 8003dc0:	4b66      	ldr	r3, [pc, #408]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc8:	4964      	ldr	r1, [pc, #400]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d017      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003de6:	4b5d      	ldr	r3, [pc, #372]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df4:	4959      	ldr	r1, [pc, #356]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e04:	d101      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d017      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e22:	4b4e      	ldr	r3, [pc, #312]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	494a      	ldr	r1, [pc, #296]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e40:	d101      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e42:	2301      	movs	r3, #1
 8003e44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 808b 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e70:	4b3a      	ldr	r3, [pc, #232]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	4a39      	ldr	r2, [pc, #228]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7c:	4b37      	ldr	r3, [pc, #220]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e88:	4b35      	ldr	r3, [pc, #212]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a34      	ldr	r2, [pc, #208]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e94:	f7fd ff0e 	bl	8001cb4 <HAL_GetTick>
 8003e98:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9c:	f7fd ff0a 	bl	8001cb4 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	; 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e357      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003eae:	4b2c      	ldr	r3, [pc, #176]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eba:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d035      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d02e      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ed8:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eee:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a1a      	ldr	r2, [pc, #104]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003efa:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f00:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d114      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fd fed2 	bl	8001cb4 <HAL_GetTick>
 8003f10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f12:	e00a      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f14:	f7fd fece 	bl	8001cb4 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e319      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2a:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0ee      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f42:	d111      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f50:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f52:	400b      	ands	r3, r1
 8003f54:	4901      	ldr	r1, [pc, #4]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40007000 	.word	0x40007000
 8003f64:	0ffffcff 	.word	0x0ffffcff
 8003f68:	4baa      	ldr	r3, [pc, #680]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4aa9      	ldr	r2, [pc, #676]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f72:	6093      	str	r3, [r2, #8]
 8003f74:	4ba7      	ldr	r3, [pc, #668]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f80:	49a4      	ldr	r1, [pc, #656]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d010      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f92:	4ba0      	ldr	r3, [pc, #640]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f98:	4a9e      	ldr	r2, [pc, #632]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003fa2:	4b9c      	ldr	r3, [pc, #624]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	4999      	ldr	r1, [pc, #612]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fc0:	4b94      	ldr	r3, [pc, #592]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fce:	4991      	ldr	r1, [pc, #580]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fe2:	4b8c      	ldr	r3, [pc, #560]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff0:	4988      	ldr	r1, [pc, #544]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004004:	4b83      	ldr	r3, [pc, #524]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004012:	4980      	ldr	r1, [pc, #512]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004026:	4b7b      	ldr	r3, [pc, #492]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4977      	ldr	r1, [pc, #476]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004048:	4b72      	ldr	r3, [pc, #456]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	f023 0203 	bic.w	r2, r3, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	496f      	ldr	r1, [pc, #444]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800406a:	4b6a      	ldr	r3, [pc, #424]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	f023 020c 	bic.w	r2, r3, #12
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004078:	4966      	ldr	r1, [pc, #408]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800408c:	4b61      	ldr	r3, [pc, #388]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409a:	495e      	ldr	r1, [pc, #376]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040ae:	4b59      	ldr	r3, [pc, #356]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040bc:	4955      	ldr	r1, [pc, #340]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040d0:	4b50      	ldr	r3, [pc, #320]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040de:	494d      	ldr	r1, [pc, #308]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040f2:	4b48      	ldr	r3, [pc, #288]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004100:	4944      	ldr	r1, [pc, #272]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004114:	4b3f      	ldr	r3, [pc, #252]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	493c      	ldr	r1, [pc, #240]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004136:	4b37      	ldr	r3, [pc, #220]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004144:	4933      	ldr	r1, [pc, #204]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004158:	4b2e      	ldr	r3, [pc, #184]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004166:	492b      	ldr	r1, [pc, #172]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d011      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800417a:	4b26      	ldr	r3, [pc, #152]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004180:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004188:	4922      	ldr	r1, [pc, #136]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004194:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004198:	d101      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800419a:	2301      	movs	r3, #1
 800419c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041aa:	2301      	movs	r3, #1
 80041ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ba:	4b16      	ldr	r3, [pc, #88]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c8:	4912      	ldr	r1, [pc, #72]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00b      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041dc:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ec:	4909      	ldr	r1, [pc, #36]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d006      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80d9 	beq.w	80043ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004208:	4b02      	ldr	r3, [pc, #8]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a01      	ldr	r2, [pc, #4]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004212:	e001      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004214:	40023800 	.word	0x40023800
 8004218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421a:	f7fd fd4b 	bl	8001cb4 <HAL_GetTick>
 800421e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004222:	f7fd fd47 	bl	8001cb4 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b64      	cmp	r3, #100	; 0x64
 800422e:	d901      	bls.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e194      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004234:	4b6c      	ldr	r3, [pc, #432]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f0      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d021      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004250:	2b00      	cmp	r3, #0
 8004252:	d11d      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004254:	4b64      	ldr	r3, [pc, #400]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425a:	0c1b      	lsrs	r3, r3, #16
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004262:	4b61      	ldr	r3, [pc, #388]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004268:	0e1b      	lsrs	r3, r3, #24
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	019a      	lsls	r2, r3, #6
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	431a      	orrs	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	061b      	lsls	r3, r3, #24
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	071b      	lsls	r3, r3, #28
 8004288:	4957      	ldr	r1, [pc, #348]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d02e      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ba:	d129      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042bc:	4b4a      	ldr	r3, [pc, #296]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c2:	0c1b      	lsrs	r3, r3, #16
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042ca:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d0:	0f1b      	lsrs	r3, r3, #28
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	019a      	lsls	r2, r3, #6
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	061b      	lsls	r3, r3, #24
 80042ea:	431a      	orrs	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	071b      	lsls	r3, r3, #28
 80042f0:	493d      	ldr	r1, [pc, #244]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042f8:	4b3b      	ldr	r3, [pc, #236]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042fe:	f023 021f 	bic.w	r2, r3, #31
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	3b01      	subs	r3, #1
 8004308:	4937      	ldr	r1, [pc, #220]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01d      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800431c:	4b32      	ldr	r3, [pc, #200]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800431e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004322:	0e1b      	lsrs	r3, r3, #24
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800432a:	4b2f      	ldr	r3, [pc, #188]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800432c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004330:	0f1b      	lsrs	r3, r3, #28
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	019a      	lsls	r2, r3, #6
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	041b      	lsls	r3, r3, #16
 8004344:	431a      	orrs	r2, r3
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	431a      	orrs	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	071b      	lsls	r3, r3, #28
 8004350:	4925      	ldr	r1, [pc, #148]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d011      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	019a      	lsls	r2, r3, #6
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	041b      	lsls	r3, r3, #16
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	061b      	lsls	r3, r3, #24
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	071b      	lsls	r3, r3, #28
 8004380:	4919      	ldr	r1, [pc, #100]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004388:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a16      	ldr	r2, [pc, #88]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004394:	f7fd fc8e 	bl	8001cb4 <HAL_GetTick>
 8004398:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800439c:	f7fd fc8a 	bl	8001cb4 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	; 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e0d7      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043ae:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	f040 80cd 	bne.w	800455c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043c2:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a08      	ldr	r2, [pc, #32]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ce:	f7fd fc71 	bl	8001cb4 <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043d4:	e00a      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043d6:	f7fd fc6d 	bl	8001cb4 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b64      	cmp	r3, #100	; 0x64
 80043e2:	d903      	bls.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e0ba      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80043e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043ec:	4b5e      	ldr	r3, [pc, #376]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f8:	d0ed      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d009      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004416:	2b00      	cmp	r3, #0
 8004418:	d02e      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d12a      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004422:	4b51      	ldr	r3, [pc, #324]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	0c1b      	lsrs	r3, r3, #16
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004430:	4b4d      	ldr	r3, [pc, #308]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	0f1b      	lsrs	r3, r3, #28
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	019a      	lsls	r2, r3, #6
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	041b      	lsls	r3, r3, #16
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	061b      	lsls	r3, r3, #24
 8004450:	431a      	orrs	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	071b      	lsls	r3, r3, #28
 8004456:	4944      	ldr	r1, [pc, #272]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800445e:	4b42      	ldr	r3, [pc, #264]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004464:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	3b01      	subs	r3, #1
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	493d      	ldr	r1, [pc, #244]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d022      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800448c:	d11d      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800448e:	4b36      	ldr	r3, [pc, #216]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	0e1b      	lsrs	r3, r3, #24
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800449c:	4b32      	ldr	r3, [pc, #200]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	0f1b      	lsrs	r3, r3, #28
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	019a      	lsls	r2, r3, #6
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	041b      	lsls	r3, r3, #16
 80044b6:	431a      	orrs	r2, r3
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	061b      	lsls	r3, r3, #24
 80044bc:	431a      	orrs	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	071b      	lsls	r3, r3, #28
 80044c2:	4929      	ldr	r1, [pc, #164]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d028      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044dc:	0e1b      	lsrs	r3, r3, #24
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044e4:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	019a      	lsls	r2, r3, #6
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	431a      	orrs	r2, r3
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	061b      	lsls	r3, r3, #24
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	071b      	lsls	r3, r3, #28
 800450a:	4917      	ldr	r1, [pc, #92]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	4911      	ldr	r1, [pc, #68]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004528:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a0e      	ldr	r2, [pc, #56]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800452e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fd fbbe 	bl	8001cb4 <HAL_GetTick>
 8004538:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800453c:	f7fd fbba 	bl	8001cb4 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	; 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e007      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800454e:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800455a:	d1ef      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800

0800456c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e049      	b.n	8004612 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fd f92c 	bl	80017f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f000 fa00 	bl	80049b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d001      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e054      	b.n	80046de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a26      	ldr	r2, [pc, #152]	; (80046ec <HAL_TIM_Base_Start_IT+0xd0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d022      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x80>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465e:	d01d      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x80>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a22      	ldr	r2, [pc, #136]	; (80046f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d018      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x80>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a21      	ldr	r2, [pc, #132]	; (80046f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d013      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x80>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1f      	ldr	r2, [pc, #124]	; (80046f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00e      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x80>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1e      	ldr	r2, [pc, #120]	; (80046fc <HAL_TIM_Base_Start_IT+0xe0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d009      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x80>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a1c      	ldr	r2, [pc, #112]	; (8004700 <HAL_TIM_Base_Start_IT+0xe4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x80>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1b      	ldr	r2, [pc, #108]	; (8004704 <HAL_TIM_Base_Start_IT+0xe8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d115      	bne.n	80046c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	4b19      	ldr	r3, [pc, #100]	; (8004708 <HAL_TIM_Base_Start_IT+0xec>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b06      	cmp	r3, #6
 80046ac:	d015      	beq.n	80046da <HAL_TIM_Base_Start_IT+0xbe>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b4:	d011      	beq.n	80046da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0201 	orr.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c6:	e008      	b.n	80046da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	e000      	b.n	80046dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800
 80046f8:	40000c00 	.word	0x40000c00
 80046fc:	40010400 	.word	0x40010400
 8004700:	40014000 	.word	0x40014000
 8004704:	40001800 	.word	0x40001800
 8004708:	00010007 	.word	0x00010007

0800470c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b02      	cmp	r3, #2
 8004720:	d122      	bne.n	8004768 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b02      	cmp	r3, #2
 800472e:	d11b      	bne.n	8004768 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0202 	mvn.w	r2, #2
 8004738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f90f 	bl	8004972 <HAL_TIM_IC_CaptureCallback>
 8004754:	e005      	b.n	8004762 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f901 	bl	800495e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f912 	bl	8004986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b04      	cmp	r3, #4
 8004774:	d122      	bne.n	80047bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b04      	cmp	r3, #4
 8004782:	d11b      	bne.n	80047bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0204 	mvn.w	r2, #4
 800478c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2202      	movs	r2, #2
 8004792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f8e5 	bl	8004972 <HAL_TIM_IC_CaptureCallback>
 80047a8:	e005      	b.n	80047b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f8d7 	bl	800495e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f8e8 	bl	8004986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d122      	bne.n	8004810 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d11b      	bne.n	8004810 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0208 	mvn.w	r2, #8
 80047e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2204      	movs	r2, #4
 80047e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f8bb 	bl	8004972 <HAL_TIM_IC_CaptureCallback>
 80047fc:	e005      	b.n	800480a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f8ad 	bl	800495e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f8be 	bl	8004986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0310 	and.w	r3, r3, #16
 800481a:	2b10      	cmp	r3, #16
 800481c:	d122      	bne.n	8004864 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	2b10      	cmp	r3, #16
 800482a:	d11b      	bne.n	8004864 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0210 	mvn.w	r2, #16
 8004834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2208      	movs	r2, #8
 800483a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f891 	bl	8004972 <HAL_TIM_IC_CaptureCallback>
 8004850:	e005      	b.n	800485e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f883 	bl	800495e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f894 	bl	8004986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b01      	cmp	r3, #1
 8004870:	d10e      	bne.n	8004890 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d107      	bne.n	8004890 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0201 	mvn.w	r2, #1
 8004888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f85d 	bl	800494a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489a:	2b80      	cmp	r3, #128	; 0x80
 800489c:	d10e      	bne.n	80048bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a8:	2b80      	cmp	r3, #128	; 0x80
 80048aa:	d107      	bne.n	80048bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9b2 	bl	8004c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ca:	d10e      	bne.n	80048ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	d107      	bne.n	80048ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f9a5 	bl	8004c34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d10e      	bne.n	8004916 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004902:	2b40      	cmp	r3, #64	; 0x40
 8004904:	d107      	bne.n	8004916 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800490e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f842 	bl	800499a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b20      	cmp	r3, #32
 8004922:	d10e      	bne.n	8004942 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b20      	cmp	r3, #32
 8004930:	d107      	bne.n	8004942 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f06f 0220 	mvn.w	r2, #32
 800493a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f965 	bl	8004c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a40      	ldr	r2, [pc, #256]	; (8004ac4 <TIM_Base_SetConfig+0x114>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <TIM_Base_SetConfig+0x40>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ce:	d00f      	beq.n	80049f0 <TIM_Base_SetConfig+0x40>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a3d      	ldr	r2, [pc, #244]	; (8004ac8 <TIM_Base_SetConfig+0x118>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00b      	beq.n	80049f0 <TIM_Base_SetConfig+0x40>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a3c      	ldr	r2, [pc, #240]	; (8004acc <TIM_Base_SetConfig+0x11c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d007      	beq.n	80049f0 <TIM_Base_SetConfig+0x40>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a3b      	ldr	r2, [pc, #236]	; (8004ad0 <TIM_Base_SetConfig+0x120>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_Base_SetConfig+0x40>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a3a      	ldr	r2, [pc, #232]	; (8004ad4 <TIM_Base_SetConfig+0x124>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d108      	bne.n	8004a02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2f      	ldr	r2, [pc, #188]	; (8004ac4 <TIM_Base_SetConfig+0x114>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d02b      	beq.n	8004a62 <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a10:	d027      	beq.n	8004a62 <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a2c      	ldr	r2, [pc, #176]	; (8004ac8 <TIM_Base_SetConfig+0x118>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d023      	beq.n	8004a62 <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a2b      	ldr	r2, [pc, #172]	; (8004acc <TIM_Base_SetConfig+0x11c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01f      	beq.n	8004a62 <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a2a      	ldr	r2, [pc, #168]	; (8004ad0 <TIM_Base_SetConfig+0x120>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d01b      	beq.n	8004a62 <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a29      	ldr	r2, [pc, #164]	; (8004ad4 <TIM_Base_SetConfig+0x124>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d017      	beq.n	8004a62 <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a28      	ldr	r2, [pc, #160]	; (8004ad8 <TIM_Base_SetConfig+0x128>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a27      	ldr	r2, [pc, #156]	; (8004adc <TIM_Base_SetConfig+0x12c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00f      	beq.n	8004a62 <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a26      	ldr	r2, [pc, #152]	; (8004ae0 <TIM_Base_SetConfig+0x130>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00b      	beq.n	8004a62 <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a25      	ldr	r2, [pc, #148]	; (8004ae4 <TIM_Base_SetConfig+0x134>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d007      	beq.n	8004a62 <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a24      	ldr	r2, [pc, #144]	; (8004ae8 <TIM_Base_SetConfig+0x138>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d003      	beq.n	8004a62 <TIM_Base_SetConfig+0xb2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a23      	ldr	r2, [pc, #140]	; (8004aec <TIM_Base_SetConfig+0x13c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d108      	bne.n	8004a74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <TIM_Base_SetConfig+0x114>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d003      	beq.n	8004aa8 <TIM_Base_SetConfig+0xf8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a0c      	ldr	r2, [pc, #48]	; (8004ad4 <TIM_Base_SetConfig+0x124>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d103      	bne.n	8004ab0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	615a      	str	r2, [r3, #20]
}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40010400 	.word	0x40010400
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40014400 	.word	0x40014400
 8004ae0:	40014800 	.word	0x40014800
 8004ae4:	40001800 	.word	0x40001800
 8004ae8:	40001c00 	.word	0x40001c00
 8004aec:	40002000 	.word	0x40002000

08004af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e06d      	b.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a30      	ldr	r2, [pc, #192]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2f      	ldr	r2, [pc, #188]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d108      	bne.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a20      	ldr	r2, [pc, #128]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d022      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7a:	d01d      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1d      	ldr	r2, [pc, #116]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d018      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1c      	ldr	r2, [pc, #112]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d013      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1a      	ldr	r2, [pc, #104]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00e      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a15      	ldr	r2, [pc, #84]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d009      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a16      	ldr	r2, [pc, #88]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d004      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a15      	ldr	r2, [pc, #84]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d10c      	bne.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	40010000 	.word	0x40010000
 8004bf4:	40010400 	.word	0x40010400
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800
 8004c00:	40000c00 	.word	0x40000c00
 8004c04:	40014000 	.word	0x40014000
 8004c08:	40001800 	.word	0x40001800

08004c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e040      	b.n	8004cdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fc fe1a 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2224      	movs	r2, #36	; 0x24
 8004c74:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f8b0 	bl	8004dec <UART_SetConfig>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e022      	b.n	8004cdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fb08 	bl	80052b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fb8f 	bl	80053f8 <UART_CheckIdleState>
 8004cda:	4603      	mov	r3, r0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08a      	sub	sp, #40	; 0x28
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d171      	bne.n	8004de0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_UART_Transmit+0x24>
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e06a      	b.n	8004de2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2221      	movs	r2, #33	; 0x21
 8004d18:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d1a:	f7fc ffcb 	bl	8001cb4 <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	88fa      	ldrh	r2, [r7, #6]
 8004d2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d38:	d108      	bne.n	8004d4c <HAL_UART_Transmit+0x68>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d104      	bne.n	8004d4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	e003      	b.n	8004d54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d54:	e02c      	b.n	8004db0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2180      	movs	r1, #128	; 0x80
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fb80 	bl	8005466 <UART_WaitOnFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e038      	b.n	8004de2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10b      	bne.n	8004d8e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	3302      	adds	r3, #2
 8004d8a:	61bb      	str	r3, [r7, #24]
 8004d8c:	e007      	b.n	8004d9e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	781a      	ldrb	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1cc      	bne.n	8004d56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2140      	movs	r1, #64	; 0x40
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 fb4d 	bl	8005466 <UART_WaitOnFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e005      	b.n	8004de2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e000      	b.n	8004de2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004de0:	2302      	movs	r3, #2
  }
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3720      	adds	r7, #32
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4ba6      	ldr	r3, [pc, #664]	; (80050b0 <UART_SetConfig+0x2c4>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	6979      	ldr	r1, [r7, #20]
 8004e20:	430b      	orrs	r3, r1
 8004e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a94      	ldr	r2, [pc, #592]	; (80050b4 <UART_SetConfig+0x2c8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d120      	bne.n	8004eaa <UART_SetConfig+0xbe>
 8004e68:	4b93      	ldr	r3, [pc, #588]	; (80050b8 <UART_SetConfig+0x2cc>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d816      	bhi.n	8004ea4 <UART_SetConfig+0xb8>
 8004e76:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <UART_SetConfig+0x90>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004e8d 	.word	0x08004e8d
 8004e80:	08004e99 	.word	0x08004e99
 8004e84:	08004e93 	.word	0x08004e93
 8004e88:	08004e9f 	.word	0x08004e9f
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	77fb      	strb	r3, [r7, #31]
 8004e90:	e150      	b.n	8005134 <UART_SetConfig+0x348>
 8004e92:	2302      	movs	r3, #2
 8004e94:	77fb      	strb	r3, [r7, #31]
 8004e96:	e14d      	b.n	8005134 <UART_SetConfig+0x348>
 8004e98:	2304      	movs	r3, #4
 8004e9a:	77fb      	strb	r3, [r7, #31]
 8004e9c:	e14a      	b.n	8005134 <UART_SetConfig+0x348>
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	77fb      	strb	r3, [r7, #31]
 8004ea2:	e147      	b.n	8005134 <UART_SetConfig+0x348>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e144      	b.n	8005134 <UART_SetConfig+0x348>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a83      	ldr	r2, [pc, #524]	; (80050bc <UART_SetConfig+0x2d0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d132      	bne.n	8004f1a <UART_SetConfig+0x12e>
 8004eb4:	4b80      	ldr	r3, [pc, #512]	; (80050b8 <UART_SetConfig+0x2cc>)
 8004eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b0c      	cmp	r3, #12
 8004ec0:	d828      	bhi.n	8004f14 <UART_SetConfig+0x128>
 8004ec2:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <UART_SetConfig+0xdc>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004efd 	.word	0x08004efd
 8004ecc:	08004f15 	.word	0x08004f15
 8004ed0:	08004f15 	.word	0x08004f15
 8004ed4:	08004f15 	.word	0x08004f15
 8004ed8:	08004f09 	.word	0x08004f09
 8004edc:	08004f15 	.word	0x08004f15
 8004ee0:	08004f15 	.word	0x08004f15
 8004ee4:	08004f15 	.word	0x08004f15
 8004ee8:	08004f03 	.word	0x08004f03
 8004eec:	08004f15 	.word	0x08004f15
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f15 	.word	0x08004f15
 8004ef8:	08004f0f 	.word	0x08004f0f
 8004efc:	2300      	movs	r3, #0
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	e118      	b.n	8005134 <UART_SetConfig+0x348>
 8004f02:	2302      	movs	r3, #2
 8004f04:	77fb      	strb	r3, [r7, #31]
 8004f06:	e115      	b.n	8005134 <UART_SetConfig+0x348>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e112      	b.n	8005134 <UART_SetConfig+0x348>
 8004f0e:	2308      	movs	r3, #8
 8004f10:	77fb      	strb	r3, [r7, #31]
 8004f12:	e10f      	b.n	8005134 <UART_SetConfig+0x348>
 8004f14:	2310      	movs	r3, #16
 8004f16:	77fb      	strb	r3, [r7, #31]
 8004f18:	e10c      	b.n	8005134 <UART_SetConfig+0x348>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a68      	ldr	r2, [pc, #416]	; (80050c0 <UART_SetConfig+0x2d4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d120      	bne.n	8004f66 <UART_SetConfig+0x17a>
 8004f24:	4b64      	ldr	r3, [pc, #400]	; (80050b8 <UART_SetConfig+0x2cc>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f2e:	2b30      	cmp	r3, #48	; 0x30
 8004f30:	d013      	beq.n	8004f5a <UART_SetConfig+0x16e>
 8004f32:	2b30      	cmp	r3, #48	; 0x30
 8004f34:	d814      	bhi.n	8004f60 <UART_SetConfig+0x174>
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d009      	beq.n	8004f4e <UART_SetConfig+0x162>
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d810      	bhi.n	8004f60 <UART_SetConfig+0x174>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <UART_SetConfig+0x15c>
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d006      	beq.n	8004f54 <UART_SetConfig+0x168>
 8004f46:	e00b      	b.n	8004f60 <UART_SetConfig+0x174>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e0f2      	b.n	8005134 <UART_SetConfig+0x348>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	77fb      	strb	r3, [r7, #31]
 8004f52:	e0ef      	b.n	8005134 <UART_SetConfig+0x348>
 8004f54:	2304      	movs	r3, #4
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	e0ec      	b.n	8005134 <UART_SetConfig+0x348>
 8004f5a:	2308      	movs	r3, #8
 8004f5c:	77fb      	strb	r3, [r7, #31]
 8004f5e:	e0e9      	b.n	8005134 <UART_SetConfig+0x348>
 8004f60:	2310      	movs	r3, #16
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	e0e6      	b.n	8005134 <UART_SetConfig+0x348>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a56      	ldr	r2, [pc, #344]	; (80050c4 <UART_SetConfig+0x2d8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d120      	bne.n	8004fb2 <UART_SetConfig+0x1c6>
 8004f70:	4b51      	ldr	r3, [pc, #324]	; (80050b8 <UART_SetConfig+0x2cc>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f7c:	d013      	beq.n	8004fa6 <UART_SetConfig+0x1ba>
 8004f7e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f80:	d814      	bhi.n	8004fac <UART_SetConfig+0x1c0>
 8004f82:	2b80      	cmp	r3, #128	; 0x80
 8004f84:	d009      	beq.n	8004f9a <UART_SetConfig+0x1ae>
 8004f86:	2b80      	cmp	r3, #128	; 0x80
 8004f88:	d810      	bhi.n	8004fac <UART_SetConfig+0x1c0>
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <UART_SetConfig+0x1a8>
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d006      	beq.n	8004fa0 <UART_SetConfig+0x1b4>
 8004f92:	e00b      	b.n	8004fac <UART_SetConfig+0x1c0>
 8004f94:	2300      	movs	r3, #0
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	e0cc      	b.n	8005134 <UART_SetConfig+0x348>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	77fb      	strb	r3, [r7, #31]
 8004f9e:	e0c9      	b.n	8005134 <UART_SetConfig+0x348>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e0c6      	b.n	8005134 <UART_SetConfig+0x348>
 8004fa6:	2308      	movs	r3, #8
 8004fa8:	77fb      	strb	r3, [r7, #31]
 8004faa:	e0c3      	b.n	8005134 <UART_SetConfig+0x348>
 8004fac:	2310      	movs	r3, #16
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e0c0      	b.n	8005134 <UART_SetConfig+0x348>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a44      	ldr	r2, [pc, #272]	; (80050c8 <UART_SetConfig+0x2dc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d125      	bne.n	8005008 <UART_SetConfig+0x21c>
 8004fbc:	4b3e      	ldr	r3, [pc, #248]	; (80050b8 <UART_SetConfig+0x2cc>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fca:	d017      	beq.n	8004ffc <UART_SetConfig+0x210>
 8004fcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fd0:	d817      	bhi.n	8005002 <UART_SetConfig+0x216>
 8004fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd6:	d00b      	beq.n	8004ff0 <UART_SetConfig+0x204>
 8004fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fdc:	d811      	bhi.n	8005002 <UART_SetConfig+0x216>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <UART_SetConfig+0x1fe>
 8004fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe6:	d006      	beq.n	8004ff6 <UART_SetConfig+0x20a>
 8004fe8:	e00b      	b.n	8005002 <UART_SetConfig+0x216>
 8004fea:	2300      	movs	r3, #0
 8004fec:	77fb      	strb	r3, [r7, #31]
 8004fee:	e0a1      	b.n	8005134 <UART_SetConfig+0x348>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	77fb      	strb	r3, [r7, #31]
 8004ff4:	e09e      	b.n	8005134 <UART_SetConfig+0x348>
 8004ff6:	2304      	movs	r3, #4
 8004ff8:	77fb      	strb	r3, [r7, #31]
 8004ffa:	e09b      	b.n	8005134 <UART_SetConfig+0x348>
 8004ffc:	2308      	movs	r3, #8
 8004ffe:	77fb      	strb	r3, [r7, #31]
 8005000:	e098      	b.n	8005134 <UART_SetConfig+0x348>
 8005002:	2310      	movs	r3, #16
 8005004:	77fb      	strb	r3, [r7, #31]
 8005006:	e095      	b.n	8005134 <UART_SetConfig+0x348>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a2f      	ldr	r2, [pc, #188]	; (80050cc <UART_SetConfig+0x2e0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d125      	bne.n	800505e <UART_SetConfig+0x272>
 8005012:	4b29      	ldr	r3, [pc, #164]	; (80050b8 <UART_SetConfig+0x2cc>)
 8005014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005018:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800501c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005020:	d017      	beq.n	8005052 <UART_SetConfig+0x266>
 8005022:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005026:	d817      	bhi.n	8005058 <UART_SetConfig+0x26c>
 8005028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800502c:	d00b      	beq.n	8005046 <UART_SetConfig+0x25a>
 800502e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005032:	d811      	bhi.n	8005058 <UART_SetConfig+0x26c>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <UART_SetConfig+0x254>
 8005038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503c:	d006      	beq.n	800504c <UART_SetConfig+0x260>
 800503e:	e00b      	b.n	8005058 <UART_SetConfig+0x26c>
 8005040:	2301      	movs	r3, #1
 8005042:	77fb      	strb	r3, [r7, #31]
 8005044:	e076      	b.n	8005134 <UART_SetConfig+0x348>
 8005046:	2302      	movs	r3, #2
 8005048:	77fb      	strb	r3, [r7, #31]
 800504a:	e073      	b.n	8005134 <UART_SetConfig+0x348>
 800504c:	2304      	movs	r3, #4
 800504e:	77fb      	strb	r3, [r7, #31]
 8005050:	e070      	b.n	8005134 <UART_SetConfig+0x348>
 8005052:	2308      	movs	r3, #8
 8005054:	77fb      	strb	r3, [r7, #31]
 8005056:	e06d      	b.n	8005134 <UART_SetConfig+0x348>
 8005058:	2310      	movs	r3, #16
 800505a:	77fb      	strb	r3, [r7, #31]
 800505c:	e06a      	b.n	8005134 <UART_SetConfig+0x348>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <UART_SetConfig+0x2e4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d138      	bne.n	80050da <UART_SetConfig+0x2ee>
 8005068:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <UART_SetConfig+0x2cc>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005072:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005076:	d017      	beq.n	80050a8 <UART_SetConfig+0x2bc>
 8005078:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800507c:	d82a      	bhi.n	80050d4 <UART_SetConfig+0x2e8>
 800507e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005082:	d00b      	beq.n	800509c <UART_SetConfig+0x2b0>
 8005084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005088:	d824      	bhi.n	80050d4 <UART_SetConfig+0x2e8>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <UART_SetConfig+0x2aa>
 800508e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005092:	d006      	beq.n	80050a2 <UART_SetConfig+0x2b6>
 8005094:	e01e      	b.n	80050d4 <UART_SetConfig+0x2e8>
 8005096:	2300      	movs	r3, #0
 8005098:	77fb      	strb	r3, [r7, #31]
 800509a:	e04b      	b.n	8005134 <UART_SetConfig+0x348>
 800509c:	2302      	movs	r3, #2
 800509e:	77fb      	strb	r3, [r7, #31]
 80050a0:	e048      	b.n	8005134 <UART_SetConfig+0x348>
 80050a2:	2304      	movs	r3, #4
 80050a4:	77fb      	strb	r3, [r7, #31]
 80050a6:	e045      	b.n	8005134 <UART_SetConfig+0x348>
 80050a8:	2308      	movs	r3, #8
 80050aa:	77fb      	strb	r3, [r7, #31]
 80050ac:	e042      	b.n	8005134 <UART_SetConfig+0x348>
 80050ae:	bf00      	nop
 80050b0:	efff69f3 	.word	0xefff69f3
 80050b4:	40011000 	.word	0x40011000
 80050b8:	40023800 	.word	0x40023800
 80050bc:	40004400 	.word	0x40004400
 80050c0:	40004800 	.word	0x40004800
 80050c4:	40004c00 	.word	0x40004c00
 80050c8:	40005000 	.word	0x40005000
 80050cc:	40011400 	.word	0x40011400
 80050d0:	40007800 	.word	0x40007800
 80050d4:	2310      	movs	r3, #16
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e02c      	b.n	8005134 <UART_SetConfig+0x348>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a72      	ldr	r2, [pc, #456]	; (80052a8 <UART_SetConfig+0x4bc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d125      	bne.n	8005130 <UART_SetConfig+0x344>
 80050e4:	4b71      	ldr	r3, [pc, #452]	; (80052ac <UART_SetConfig+0x4c0>)
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050f2:	d017      	beq.n	8005124 <UART_SetConfig+0x338>
 80050f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050f8:	d817      	bhi.n	800512a <UART_SetConfig+0x33e>
 80050fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050fe:	d00b      	beq.n	8005118 <UART_SetConfig+0x32c>
 8005100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005104:	d811      	bhi.n	800512a <UART_SetConfig+0x33e>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <UART_SetConfig+0x326>
 800510a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800510e:	d006      	beq.n	800511e <UART_SetConfig+0x332>
 8005110:	e00b      	b.n	800512a <UART_SetConfig+0x33e>
 8005112:	2300      	movs	r3, #0
 8005114:	77fb      	strb	r3, [r7, #31]
 8005116:	e00d      	b.n	8005134 <UART_SetConfig+0x348>
 8005118:	2302      	movs	r3, #2
 800511a:	77fb      	strb	r3, [r7, #31]
 800511c:	e00a      	b.n	8005134 <UART_SetConfig+0x348>
 800511e:	2304      	movs	r3, #4
 8005120:	77fb      	strb	r3, [r7, #31]
 8005122:	e007      	b.n	8005134 <UART_SetConfig+0x348>
 8005124:	2308      	movs	r3, #8
 8005126:	77fb      	strb	r3, [r7, #31]
 8005128:	e004      	b.n	8005134 <UART_SetConfig+0x348>
 800512a:	2310      	movs	r3, #16
 800512c:	77fb      	strb	r3, [r7, #31]
 800512e:	e001      	b.n	8005134 <UART_SetConfig+0x348>
 8005130:	2310      	movs	r3, #16
 8005132:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800513c:	d15b      	bne.n	80051f6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800513e:	7ffb      	ldrb	r3, [r7, #31]
 8005140:	2b08      	cmp	r3, #8
 8005142:	d828      	bhi.n	8005196 <UART_SetConfig+0x3aa>
 8005144:	a201      	add	r2, pc, #4	; (adr r2, 800514c <UART_SetConfig+0x360>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	08005171 	.word	0x08005171
 8005150:	08005179 	.word	0x08005179
 8005154:	08005181 	.word	0x08005181
 8005158:	08005197 	.word	0x08005197
 800515c:	08005187 	.word	0x08005187
 8005160:	08005197 	.word	0x08005197
 8005164:	08005197 	.word	0x08005197
 8005168:	08005197 	.word	0x08005197
 800516c:	0800518f 	.word	0x0800518f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005170:	f7fe fde4 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 8005174:	61b8      	str	r0, [r7, #24]
        break;
 8005176:	e013      	b.n	80051a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005178:	f7fe fdf4 	bl	8003d64 <HAL_RCC_GetPCLK2Freq>
 800517c:	61b8      	str	r0, [r7, #24]
        break;
 800517e:	e00f      	b.n	80051a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005180:	4b4b      	ldr	r3, [pc, #300]	; (80052b0 <UART_SetConfig+0x4c4>)
 8005182:	61bb      	str	r3, [r7, #24]
        break;
 8005184:	e00c      	b.n	80051a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005186:	f7fe fd07 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 800518a:	61b8      	str	r0, [r7, #24]
        break;
 800518c:	e008      	b.n	80051a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800518e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005192:	61bb      	str	r3, [r7, #24]
        break;
 8005194:	e004      	b.n	80051a0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	77bb      	strb	r3, [r7, #30]
        break;
 800519e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d074      	beq.n	8005290 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	005a      	lsls	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	441a      	add	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	2b0f      	cmp	r3, #15
 80051c0:	d916      	bls.n	80051f0 <UART_SetConfig+0x404>
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c8:	d212      	bcs.n	80051f0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f023 030f 	bic.w	r3, r3, #15
 80051d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	b29a      	uxth	r2, r3
 80051e0:	89fb      	ldrh	r3, [r7, #14]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	89fa      	ldrh	r2, [r7, #14]
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	e04f      	b.n	8005290 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	77bb      	strb	r3, [r7, #30]
 80051f4:	e04c      	b.n	8005290 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051f6:	7ffb      	ldrb	r3, [r7, #31]
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d828      	bhi.n	800524e <UART_SetConfig+0x462>
 80051fc:	a201      	add	r2, pc, #4	; (adr r2, 8005204 <UART_SetConfig+0x418>)
 80051fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005202:	bf00      	nop
 8005204:	08005229 	.word	0x08005229
 8005208:	08005231 	.word	0x08005231
 800520c:	08005239 	.word	0x08005239
 8005210:	0800524f 	.word	0x0800524f
 8005214:	0800523f 	.word	0x0800523f
 8005218:	0800524f 	.word	0x0800524f
 800521c:	0800524f 	.word	0x0800524f
 8005220:	0800524f 	.word	0x0800524f
 8005224:	08005247 	.word	0x08005247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005228:	f7fe fd88 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 800522c:	61b8      	str	r0, [r7, #24]
        break;
 800522e:	e013      	b.n	8005258 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005230:	f7fe fd98 	bl	8003d64 <HAL_RCC_GetPCLK2Freq>
 8005234:	61b8      	str	r0, [r7, #24]
        break;
 8005236:	e00f      	b.n	8005258 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005238:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <UART_SetConfig+0x4c4>)
 800523a:	61bb      	str	r3, [r7, #24]
        break;
 800523c:	e00c      	b.n	8005258 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800523e:	f7fe fcab 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8005242:	61b8      	str	r0, [r7, #24]
        break;
 8005244:	e008      	b.n	8005258 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800524a:	61bb      	str	r3, [r7, #24]
        break;
 800524c:	e004      	b.n	8005258 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	77bb      	strb	r3, [r7, #30]
        break;
 8005256:	bf00      	nop
    }

    if (pclk != 0U)
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d018      	beq.n	8005290 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	085a      	lsrs	r2, r3, #1
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	441a      	add	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005270:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b0f      	cmp	r3, #15
 8005276:	d909      	bls.n	800528c <UART_SetConfig+0x4a0>
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800527e:	d205      	bcs.n	800528c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	b29a      	uxth	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60da      	str	r2, [r3, #12]
 800528a:	e001      	b.n	8005290 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800529c:	7fbb      	ldrb	r3, [r7, #30]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40007c00 	.word	0x40007c00
 80052ac:	40023800 	.word	0x40023800
 80052b0:	00f42400 	.word	0x00f42400

080052b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01a      	beq.n	80053ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b2:	d10a      	bne.n	80053ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	605a      	str	r2, [r3, #4]
  }
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005408:	f7fc fc54 	bl	8001cb4 <HAL_GetTick>
 800540c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b08      	cmp	r3, #8
 800541a:	d10e      	bne.n	800543a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800541c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f81b 	bl	8005466 <UART_WaitOnFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e011      	b.n	800545e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b09c      	sub	sp, #112	; 0x70
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	603b      	str	r3, [r7, #0]
 8005472:	4613      	mov	r3, r2
 8005474:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005476:	e0a7      	b.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547e:	f000 80a3 	beq.w	80055c8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005482:	f7fc fc17 	bl	8001cb4 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <UART_WaitOnFlagUntilTimeout+0x32>
 8005492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005494:	2b00      	cmp	r3, #0
 8005496:	d13f      	bne.n	8005518 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054ac:	667b      	str	r3, [r7, #100]	; 0x64
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e6      	bne.n	8005498 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3308      	adds	r3, #8
 80054d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054dc:	f023 0301 	bic.w	r3, r3, #1
 80054e0:	663b      	str	r3, [r7, #96]	; 0x60
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3308      	adds	r3, #8
 80054e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80054ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e5      	bne.n	80054ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e068      	b.n	80055ea <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	2b00      	cmp	r3, #0
 8005524:	d050      	beq.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005534:	d148      	bne.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800553e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005554:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
 8005560:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005564:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e6      	bne.n	8005540 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	613b      	str	r3, [r7, #16]
   return(result);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	66bb      	str	r3, [r7, #104]	; 0x68
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3308      	adds	r3, #8
 8005590:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005592:	623a      	str	r2, [r7, #32]
 8005594:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	69f9      	ldr	r1, [r7, #28]
 8005598:	6a3a      	ldr	r2, [r7, #32]
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	61bb      	str	r3, [r7, #24]
   return(result);
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e010      	b.n	80055ea <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	4013      	ands	r3, r2
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	bf0c      	ite	eq
 80055d8:	2301      	moveq	r3, #1
 80055da:	2300      	movne	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	f43f af48 	beq.w	8005478 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3770      	adds	r7, #112	; 0x70
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af04      	add	r7, sp, #16
 80055fa:	4603      	mov	r3, r0
 80055fc:	460a      	mov	r2, r1
 80055fe:	71fb      	strb	r3, [r7, #7]
 8005600:	4613      	mov	r3, r2
 8005602:	71bb      	strb	r3, [r7, #6]

	msgBuffer[0] = value; // Assign the value to the buffer.
 8005604:	4a0c      	ldr	r2, [pc, #48]	; (8005638 <writeReg+0x44>)
 8005606:	79bb      	ldrb	r3, [r7, #6]
 8005608:	7013      	strb	r3, [r2, #0]
	i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 800560a:	4b0c      	ldr	r3, [pc, #48]	; (800563c <writeReg+0x48>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	b299      	uxth	r1, r3
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	b29a      	uxth	r2, r3
 8005614:	2364      	movs	r3, #100	; 0x64
 8005616:	9302      	str	r3, [sp, #8]
 8005618:	2301      	movs	r3, #1
 800561a:	9301      	str	r3, [sp, #4]
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <writeReg+0x44>)
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	2301      	movs	r3, #1
 8005622:	4807      	ldr	r0, [pc, #28]	; (8005640 <writeReg+0x4c>)
 8005624:	f7fd f9c8 	bl	80029b8 <HAL_I2C_Mem_Write>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	4b05      	ldr	r3, [pc, #20]	; (8005644 <writeReg+0x50>)
 800562e:	701a      	strb	r2, [r3, #0]
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	2000030c 	.word	0x2000030c
 800563c:	20000009 	.word	0x20000009
 8005640:	200002b8 	.word	0x200002b8
 8005644:	20000310 	.word	0x20000310

08005648 <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af04      	add	r7, sp, #16
 800564e:	4603      	mov	r3, r0
 8005650:	460a      	mov	r2, r1
 8005652:	71fb      	strb	r3, [r7, #7]
 8005654:	4613      	mov	r3, r2
 8005656:	80bb      	strh	r3, [r7, #4]
 8005658:	88ba      	ldrh	r2, [r7, #4]

	memcpy(msgBuffer, &value, 2); // Assign the value to the buffer.
 800565a:	4b0c      	ldr	r3, [pc, #48]	; (800568c <writeReg16Bit+0x44>)
 800565c:	801a      	strh	r2, [r3, #0]
	i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 800565e:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <writeReg16Bit+0x48>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	b299      	uxth	r1, r3
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	b29a      	uxth	r2, r3
 8005668:	2364      	movs	r3, #100	; 0x64
 800566a:	9302      	str	r3, [sp, #8]
 800566c:	2302      	movs	r3, #2
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	4b06      	ldr	r3, [pc, #24]	; (800568c <writeReg16Bit+0x44>)
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	2301      	movs	r3, #1
 8005676:	4807      	ldr	r0, [pc, #28]	; (8005694 <writeReg16Bit+0x4c>)
 8005678:	f7fd f99e 	bl	80029b8 <HAL_I2C_Mem_Write>
 800567c:	4603      	mov	r3, r0
 800567e:	461a      	mov	r2, r3
 8005680:	4b05      	ldr	r3, [pc, #20]	; (8005698 <writeReg16Bit+0x50>)
 8005682:	701a      	strb	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	2000030c 	.word	0x2000030c
 8005690:	20000009 	.word	0x20000009
 8005694:	200002b8 	.word	0x200002b8
 8005698:	20000310 	.word	0x20000310

0800569c <readReg>:
	memcpy(msgBuffer, &value, 4); // Assign the value to the buffer.
	i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 4, I2C_TIMEOUT);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af04      	add	r7, sp, #16
 80056a2:	4603      	mov	r3, r0
 80056a4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 80056a6:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <readReg+0x48>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	b299      	uxth	r1, r3
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	2364      	movs	r3, #100	; 0x64
 80056b8:	9302      	str	r3, [sp, #8]
 80056ba:	2301      	movs	r3, #1
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <readReg+0x4c>)
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	2301      	movs	r3, #1
 80056c4:	4809      	ldr	r0, [pc, #36]	; (80056ec <readReg+0x50>)
 80056c6:	f7fd fa8b 	bl	8002be0 <HAL_I2C_Mem_Read>
 80056ca:	4603      	mov	r3, r0
 80056cc:	461a      	mov	r2, r3
 80056ce:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <readReg+0x54>)
 80056d0:	701a      	strb	r2, [r3, #0]
	value = msgBuffer[0];
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <readReg+0x4c>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	73fb      	strb	r3, [r7, #15]

	return value;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	20000009 	.word	0x20000009
 80056e8:	2000030c 	.word	0x2000030c
 80056ec:	200002b8 	.word	0x200002b8
 80056f0:	20000310 	.word	0x20000310

080056f4 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af04      	add	r7, sp, #16
 80056fa:	4603      	mov	r3, r0
 80056fc:	71fb      	strb	r3, [r7, #7]
	uint16_t value;

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 80056fe:	4b0f      	ldr	r3, [pc, #60]	; (800573c <readReg16Bit+0x48>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	f043 0301 	orr.w	r3, r3, #1
 8005706:	b2db      	uxtb	r3, r3
 8005708:	b299      	uxth	r1, r3
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	b29a      	uxth	r2, r3
 800570e:	2364      	movs	r3, #100	; 0x64
 8005710:	9302      	str	r3, [sp, #8]
 8005712:	2302      	movs	r3, #2
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <readReg16Bit+0x4c>)
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	2301      	movs	r3, #1
 800571c:	4809      	ldr	r0, [pc, #36]	; (8005744 <readReg16Bit+0x50>)
 800571e:	f7fd fa5f 	bl	8002be0 <HAL_I2C_Mem_Read>
 8005722:	4603      	mov	r3, r0
 8005724:	461a      	mov	r2, r3
 8005726:	4b08      	ldr	r3, [pc, #32]	; (8005748 <readReg16Bit+0x54>)
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	4b05      	ldr	r3, [pc, #20]	; (8005740 <readReg16Bit+0x4c>)
 800572c:	881b      	ldrh	r3, [r3, #0]
	memcpy(&value, msgBuffer, 2);
 800572e:	81fb      	strh	r3, [r7, #14]

	return value;
 8005730:	89fb      	ldrh	r3, [r7, #14]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000009 	.word	0x20000009
 8005740:	2000030c 	.word	0x2000030c
 8005744:	200002b8 	.word	0x200002b8
 8005748:	20000310 	.word	0x20000310

0800574c <writeMulti>:
	return value;
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void writeMulti(uint8_t reg, uint8_t const *src, uint8_t count){
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af04      	add	r7, sp, #16
 8005752:	4603      	mov	r3, r0
 8005754:	6039      	str	r1, [r7, #0]
 8005756:	71fb      	strb	r3, [r7, #7]
 8005758:	4613      	mov	r3, r2
 800575a:	71bb      	strb	r3, [r7, #6]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3

	memcpy(msgBuffer, src, 4);
 8005762:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <writeMulti+0x4c>)
 8005764:	601a      	str	r2, [r3, #0]
	i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT);
 8005766:	4b0d      	ldr	r3, [pc, #52]	; (800579c <writeMulti+0x50>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	b299      	uxth	r1, r3
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	b29a      	uxth	r2, r3
 8005770:	79bb      	ldrb	r3, [r7, #6]
 8005772:	b29b      	uxth	r3, r3
 8005774:	2064      	movs	r0, #100	; 0x64
 8005776:	9002      	str	r0, [sp, #8]
 8005778:	9301      	str	r3, [sp, #4]
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <writeMulti+0x4c>)
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	2301      	movs	r3, #1
 8005780:	4807      	ldr	r0, [pc, #28]	; (80057a0 <writeMulti+0x54>)
 8005782:	f7fd f919 	bl	80029b8 <HAL_I2C_Mem_Write>
 8005786:	4603      	mov	r3, r0
 8005788:	461a      	mov	r2, r3
 800578a:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <writeMulti+0x58>)
 800578c:	701a      	strb	r2, [r3, #0]
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	2000030c 	.word	0x2000030c
 800579c:	20000009 	.word	0x20000009
 80057a0:	200002b8 	.word	0x200002b8
 80057a4:	20000310 	.word	0x20000310

080057a8 <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count) {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af04      	add	r7, sp, #16
 80057ae:	4603      	mov	r3, r0
 80057b0:	6039      	str	r1, [r7, #0]
 80057b2:	71fb      	strb	r3, [r7, #7]
 80057b4:	4613      	mov	r3, r2
 80057b6:	71bb      	strb	r3, [r7, #6]

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 80057b8:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <readMulti+0x48>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	b299      	uxth	r1, r3
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	79bb      	ldrb	r3, [r7, #6]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2064      	movs	r0, #100	; 0x64
 80057ce:	9002      	str	r0, [sp, #8]
 80057d0:	9301      	str	r3, [sp, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	2301      	movs	r3, #1
 80057d8:	4806      	ldr	r0, [pc, #24]	; (80057f4 <readMulti+0x4c>)
 80057da:	f7fd fa01 	bl	8002be0 <HAL_I2C_Mem_Read>
 80057de:	4603      	mov	r3, r0
 80057e0:	461a      	mov	r2, r3
 80057e2:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <readMulti+0x50>)
 80057e4:	701a      	strb	r2, [r3, #0]
}
 80057e6:	bf00      	nop
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000009 	.word	0x20000009
 80057f4:	200002b8 	.word	0x200002b8
 80057f8:	20000310 	.word	0x20000310

080057fc <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool initVL53L0X(bool io_2v8, I2C_HandleTypeDef *handler){
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	6039      	str	r1, [r7, #0]
 8005806:	71fb      	strb	r3, [r7, #7]
	// VL53L0X_DataInit() begin

	// Handler
	memcpy(&VL53L0X_I2C_Handler, handler, sizeof(*handler));
 8005808:	2254      	movs	r2, #84	; 0x54
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	4854      	ldr	r0, [pc, #336]	; (8005960 <initVL53L0X+0x164>)
 800580e:	f000 ff33 	bl	8006678 <memcpy>

	// Reset the message buffer.
	msgBuffer[0] = 0;
 8005812:	4b54      	ldr	r3, [pc, #336]	; (8005964 <initVL53L0X+0x168>)
 8005814:	2200      	movs	r2, #0
 8005816:	701a      	strb	r2, [r3, #0]
	msgBuffer[1] = 0;
 8005818:	4b52      	ldr	r3, [pc, #328]	; (8005964 <initVL53L0X+0x168>)
 800581a:	2200      	movs	r2, #0
 800581c:	705a      	strb	r2, [r3, #1]
	msgBuffer[2] = 0;
 800581e:	4b51      	ldr	r3, [pc, #324]	; (8005964 <initVL53L0X+0x168>)
 8005820:	2200      	movs	r2, #0
 8005822:	709a      	strb	r2, [r3, #2]
	msgBuffer[3] = 0;
 8005824:	4b4f      	ldr	r3, [pc, #316]	; (8005964 <initVL53L0X+0x168>)
 8005826:	2200      	movs	r2, #0
 8005828:	70da      	strb	r2, [r3, #3]

	// sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
	if (io_2v8)
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <initVL53L0X+0x4a>
	{
		writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
				readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8005830:	2089      	movs	r0, #137	; 0x89
 8005832:	f7ff ff33 	bl	800569c <readReg>
 8005836:	4603      	mov	r3, r0
		writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	b2db      	uxtb	r3, r3
 800583e:	4619      	mov	r1, r3
 8005840:	2089      	movs	r0, #137	; 0x89
 8005842:	f7ff fed7 	bl	80055f4 <writeReg>
	}

	// "Set I2C standard mode"
	writeReg(0x88, 0x00);
 8005846:	2100      	movs	r1, #0
 8005848:	2088      	movs	r0, #136	; 0x88
 800584a:	f7ff fed3 	bl	80055f4 <writeReg>

	writeReg(0x80, 0x01);
 800584e:	2101      	movs	r1, #1
 8005850:	2080      	movs	r0, #128	; 0x80
 8005852:	f7ff fecf 	bl	80055f4 <writeReg>
	writeReg(0xFF, 0x01);
 8005856:	2101      	movs	r1, #1
 8005858:	20ff      	movs	r0, #255	; 0xff
 800585a:	f7ff fecb 	bl	80055f4 <writeReg>
	writeReg(0x00, 0x00);
 800585e:	2100      	movs	r1, #0
 8005860:	2000      	movs	r0, #0
 8005862:	f7ff fec7 	bl	80055f4 <writeReg>
	g_stopVariable = readReg(0x91);
 8005866:	2091      	movs	r0, #145	; 0x91
 8005868:	f7ff ff18 	bl	800569c <readReg>
 800586c:	4603      	mov	r3, r0
 800586e:	461a      	mov	r2, r3
 8005870:	4b3d      	ldr	r3, [pc, #244]	; (8005968 <initVL53L0X+0x16c>)
 8005872:	701a      	strb	r2, [r3, #0]
	writeReg(0x00, 0x01);
 8005874:	2101      	movs	r1, #1
 8005876:	2000      	movs	r0, #0
 8005878:	f7ff febc 	bl	80055f4 <writeReg>
	writeReg(0xFF, 0x00);
 800587c:	2100      	movs	r1, #0
 800587e:	20ff      	movs	r0, #255	; 0xff
 8005880:	f7ff feb8 	bl	80055f4 <writeReg>
	writeReg(0x80, 0x00);
 8005884:	2100      	movs	r1, #0
 8005886:	2080      	movs	r0, #128	; 0x80
 8005888:	f7ff feb4 	bl	80055f4 <writeReg>

	// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
	writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 800588c:	2060      	movs	r0, #96	; 0x60
 800588e:	f7ff ff05 	bl	800569c <readReg>
 8005892:	4603      	mov	r3, r0
 8005894:	f043 0312 	orr.w	r3, r3, #18
 8005898:	b2db      	uxtb	r3, r3
 800589a:	4619      	mov	r1, r3
 800589c:	2060      	movs	r0, #96	; 0x60
 800589e:	f7ff fea9 	bl	80055f4 <writeReg>

	// set final range signal rate limit to 0.25 MCPS (million counts per second)
	setSignalRateLimit(0.25);
 80058a2:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80058a6:	f000 fa07 	bl	8005cb8 <setSignalRateLimit>

	writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80058aa:	21ff      	movs	r1, #255	; 0xff
 80058ac:	2001      	movs	r0, #1
 80058ae:	f7ff fea1 	bl	80055f4 <writeReg>

	// VL53L0X_StaticInit() begin

	uint8_t spad_count;
	bool spad_type_is_aperture;
	if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80058b2:	f107 0213 	add.w	r2, r7, #19
 80058b6:	f107 0314 	add.w	r3, r7, #20
 80058ba:	4611      	mov	r1, r2
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fc9b 	bl	80061f8 <getSpadInfo>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <initVL53L0X+0xd0>
 80058c8:	2300      	movs	r3, #0
 80058ca:	e1ee      	b.n	8005caa <initVL53L0X+0x4ae>

	// The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
	// the API, but the same data seems to be more easily readable from
	// GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
	uint8_t ref_spad_map[6];
	readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80058cc:	f107 030c 	add.w	r3, r7, #12
 80058d0:	2206      	movs	r2, #6
 80058d2:	4619      	mov	r1, r3
 80058d4:	20b0      	movs	r0, #176	; 0xb0
 80058d6:	f7ff ff67 	bl	80057a8 <readMulti>

	// -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

	writeReg(0xFF, 0x01);
 80058da:	2101      	movs	r1, #1
 80058dc:	20ff      	movs	r0, #255	; 0xff
 80058de:	f7ff fe89 	bl	80055f4 <writeReg>
	writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80058e2:	2100      	movs	r1, #0
 80058e4:	204f      	movs	r0, #79	; 0x4f
 80058e6:	f7ff fe85 	bl	80055f4 <writeReg>
	writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80058ea:	212c      	movs	r1, #44	; 0x2c
 80058ec:	204e      	movs	r0, #78	; 0x4e
 80058ee:	f7ff fe81 	bl	80055f4 <writeReg>
	writeReg(0xFF, 0x00);
 80058f2:	2100      	movs	r1, #0
 80058f4:	20ff      	movs	r0, #255	; 0xff
 80058f6:	f7ff fe7d 	bl	80055f4 <writeReg>
	writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80058fa:	21b4      	movs	r1, #180	; 0xb4
 80058fc:	20b6      	movs	r0, #182	; 0xb6
 80058fe:	f7ff fe79 	bl	80055f4 <writeReg>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8005902:	7cfb      	ldrb	r3, [r7, #19]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <initVL53L0X+0x110>
 8005908:	230c      	movs	r3, #12
 800590a:	e000      	b.n	800590e <initVL53L0X+0x112>
 800590c:	2300      	movs	r3, #0
 800590e:	757b      	strb	r3, [r7, #21]
	uint8_t spads_enabled = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	75fb      	strb	r3, [r7, #23]

	for (uint8_t i = 0; i < 48; i++)
 8005914:	2300      	movs	r3, #0
 8005916:	75bb      	strb	r3, [r7, #22]
 8005918:	e03f      	b.n	800599a <initVL53L0X+0x19e>
	{
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 800591a:	7dba      	ldrb	r2, [r7, #22]
 800591c:	7d7b      	ldrb	r3, [r7, #21]
 800591e:	429a      	cmp	r2, r3
 8005920:	d303      	bcc.n	800592a <initVL53L0X+0x12e>
 8005922:	7d3b      	ldrb	r3, [r7, #20]
 8005924:	7dfa      	ldrb	r2, [r7, #23]
 8005926:	429a      	cmp	r2, r3
 8005928:	d120      	bne.n	800596c <initVL53L0X+0x170>
		{
			// This bit is lower than the first one that should be enabled, or
			// (reference_spad_count) bits have already been enabled, so zero this bit
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
 800592a:	7dbb      	ldrb	r3, [r7, #22]
 800592c:	08db      	lsrs	r3, r3, #3
 800592e:	b2d8      	uxtb	r0, r3
 8005930:	4603      	mov	r3, r0
 8005932:	3318      	adds	r3, #24
 8005934:	443b      	add	r3, r7
 8005936:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800593a:	b25a      	sxtb	r2, r3
 800593c:	7dbb      	ldrb	r3, [r7, #22]
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	2101      	movs	r1, #1
 8005944:	fa01 f303 	lsl.w	r3, r1, r3
 8005948:	b25b      	sxtb	r3, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	b25b      	sxtb	r3, r3
 800594e:	4013      	ands	r3, r2
 8005950:	b25a      	sxtb	r2, r3
 8005952:	4603      	mov	r3, r0
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	3318      	adds	r3, #24
 8005958:	443b      	add	r3, r7
 800595a:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800595e:	e019      	b.n	8005994 <initVL53L0X+0x198>
 8005960:	200002b8 	.word	0x200002b8
 8005964:	2000030c 	.word	0x2000030c
 8005968:	200002b0 	.word	0x200002b0
		}
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 800596c:	7dbb      	ldrb	r3, [r7, #22]
 800596e:	08db      	lsrs	r3, r3, #3
 8005970:	b2db      	uxtb	r3, r3
 8005972:	3318      	adds	r3, #24
 8005974:	443b      	add	r3, r7
 8005976:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800597a:	461a      	mov	r2, r3
 800597c:	7dbb      	ldrb	r3, [r7, #22]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	fa42 f303 	asr.w	r3, r2, r3
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <initVL53L0X+0x198>
		{
			spads_enabled++;
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	3301      	adds	r3, #1
 8005992:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < 48; i++)
 8005994:	7dbb      	ldrb	r3, [r7, #22]
 8005996:	3301      	adds	r3, #1
 8005998:	75bb      	strb	r3, [r7, #22]
 800599a:	7dbb      	ldrb	r3, [r7, #22]
 800599c:	2b2f      	cmp	r3, #47	; 0x2f
 800599e:	d9bc      	bls.n	800591a <initVL53L0X+0x11e>
		}
	}

	writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80059a0:	f107 030c 	add.w	r3, r7, #12
 80059a4:	2206      	movs	r2, #6
 80059a6:	4619      	mov	r1, r3
 80059a8:	20b0      	movs	r0, #176	; 0xb0
 80059aa:	f7ff fecf 	bl	800574c <writeMulti>
	// -- VL53L0X_set_reference_spads() end

	// -- VL53L0X_load_tuning_settings() begin
	// DefaultTuningSettings from vl53l0x_tuning.h

	writeReg(0xFF, 0x01);
 80059ae:	2101      	movs	r1, #1
 80059b0:	20ff      	movs	r0, #255	; 0xff
 80059b2:	f7ff fe1f 	bl	80055f4 <writeReg>
	writeReg(0x00, 0x00);
 80059b6:	2100      	movs	r1, #0
 80059b8:	2000      	movs	r0, #0
 80059ba:	f7ff fe1b 	bl	80055f4 <writeReg>

	writeReg(0xFF, 0x00);
 80059be:	2100      	movs	r1, #0
 80059c0:	20ff      	movs	r0, #255	; 0xff
 80059c2:	f7ff fe17 	bl	80055f4 <writeReg>
	writeReg(0x09, 0x00);
 80059c6:	2100      	movs	r1, #0
 80059c8:	2009      	movs	r0, #9
 80059ca:	f7ff fe13 	bl	80055f4 <writeReg>
	writeReg(0x10, 0x00);
 80059ce:	2100      	movs	r1, #0
 80059d0:	2010      	movs	r0, #16
 80059d2:	f7ff fe0f 	bl	80055f4 <writeReg>
	writeReg(0x11, 0x00);
 80059d6:	2100      	movs	r1, #0
 80059d8:	2011      	movs	r0, #17
 80059da:	f7ff fe0b 	bl	80055f4 <writeReg>

	writeReg(0x24, 0x01);
 80059de:	2101      	movs	r1, #1
 80059e0:	2024      	movs	r0, #36	; 0x24
 80059e2:	f7ff fe07 	bl	80055f4 <writeReg>
	writeReg(0x25, 0xFF);
 80059e6:	21ff      	movs	r1, #255	; 0xff
 80059e8:	2025      	movs	r0, #37	; 0x25
 80059ea:	f7ff fe03 	bl	80055f4 <writeReg>
	writeReg(0x75, 0x00);
 80059ee:	2100      	movs	r1, #0
 80059f0:	2075      	movs	r0, #117	; 0x75
 80059f2:	f7ff fdff 	bl	80055f4 <writeReg>

	writeReg(0xFF, 0x01);
 80059f6:	2101      	movs	r1, #1
 80059f8:	20ff      	movs	r0, #255	; 0xff
 80059fa:	f7ff fdfb 	bl	80055f4 <writeReg>
	writeReg(0x4E, 0x2C);
 80059fe:	212c      	movs	r1, #44	; 0x2c
 8005a00:	204e      	movs	r0, #78	; 0x4e
 8005a02:	f7ff fdf7 	bl	80055f4 <writeReg>
	writeReg(0x48, 0x00);
 8005a06:	2100      	movs	r1, #0
 8005a08:	2048      	movs	r0, #72	; 0x48
 8005a0a:	f7ff fdf3 	bl	80055f4 <writeReg>
	writeReg(0x30, 0x20);
 8005a0e:	2120      	movs	r1, #32
 8005a10:	2030      	movs	r0, #48	; 0x30
 8005a12:	f7ff fdef 	bl	80055f4 <writeReg>

	writeReg(0xFF, 0x00);
 8005a16:	2100      	movs	r1, #0
 8005a18:	20ff      	movs	r0, #255	; 0xff
 8005a1a:	f7ff fdeb 	bl	80055f4 <writeReg>
	writeReg(0x30, 0x09);
 8005a1e:	2109      	movs	r1, #9
 8005a20:	2030      	movs	r0, #48	; 0x30
 8005a22:	f7ff fde7 	bl	80055f4 <writeReg>
	writeReg(0x54, 0x00);
 8005a26:	2100      	movs	r1, #0
 8005a28:	2054      	movs	r0, #84	; 0x54
 8005a2a:	f7ff fde3 	bl	80055f4 <writeReg>
	writeReg(0x31, 0x04);
 8005a2e:	2104      	movs	r1, #4
 8005a30:	2031      	movs	r0, #49	; 0x31
 8005a32:	f7ff fddf 	bl	80055f4 <writeReg>
	writeReg(0x32, 0x03);
 8005a36:	2103      	movs	r1, #3
 8005a38:	2032      	movs	r0, #50	; 0x32
 8005a3a:	f7ff fddb 	bl	80055f4 <writeReg>
	writeReg(0x40, 0x83);
 8005a3e:	2183      	movs	r1, #131	; 0x83
 8005a40:	2040      	movs	r0, #64	; 0x40
 8005a42:	f7ff fdd7 	bl	80055f4 <writeReg>
	writeReg(0x46, 0x25);
 8005a46:	2125      	movs	r1, #37	; 0x25
 8005a48:	2046      	movs	r0, #70	; 0x46
 8005a4a:	f7ff fdd3 	bl	80055f4 <writeReg>
	writeReg(0x60, 0x00);
 8005a4e:	2100      	movs	r1, #0
 8005a50:	2060      	movs	r0, #96	; 0x60
 8005a52:	f7ff fdcf 	bl	80055f4 <writeReg>
	writeReg(0x27, 0x00);
 8005a56:	2100      	movs	r1, #0
 8005a58:	2027      	movs	r0, #39	; 0x27
 8005a5a:	f7ff fdcb 	bl	80055f4 <writeReg>
	writeReg(0x50, 0x06);
 8005a5e:	2106      	movs	r1, #6
 8005a60:	2050      	movs	r0, #80	; 0x50
 8005a62:	f7ff fdc7 	bl	80055f4 <writeReg>
	writeReg(0x51, 0x00);
 8005a66:	2100      	movs	r1, #0
 8005a68:	2051      	movs	r0, #81	; 0x51
 8005a6a:	f7ff fdc3 	bl	80055f4 <writeReg>
	writeReg(0x52, 0x96);
 8005a6e:	2196      	movs	r1, #150	; 0x96
 8005a70:	2052      	movs	r0, #82	; 0x52
 8005a72:	f7ff fdbf 	bl	80055f4 <writeReg>
	writeReg(0x56, 0x08);
 8005a76:	2108      	movs	r1, #8
 8005a78:	2056      	movs	r0, #86	; 0x56
 8005a7a:	f7ff fdbb 	bl	80055f4 <writeReg>
	writeReg(0x57, 0x30);
 8005a7e:	2130      	movs	r1, #48	; 0x30
 8005a80:	2057      	movs	r0, #87	; 0x57
 8005a82:	f7ff fdb7 	bl	80055f4 <writeReg>
	writeReg(0x61, 0x00);
 8005a86:	2100      	movs	r1, #0
 8005a88:	2061      	movs	r0, #97	; 0x61
 8005a8a:	f7ff fdb3 	bl	80055f4 <writeReg>
	writeReg(0x62, 0x00);
 8005a8e:	2100      	movs	r1, #0
 8005a90:	2062      	movs	r0, #98	; 0x62
 8005a92:	f7ff fdaf 	bl	80055f4 <writeReg>
	writeReg(0x64, 0x00);
 8005a96:	2100      	movs	r1, #0
 8005a98:	2064      	movs	r0, #100	; 0x64
 8005a9a:	f7ff fdab 	bl	80055f4 <writeReg>
	writeReg(0x65, 0x00);
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	2065      	movs	r0, #101	; 0x65
 8005aa2:	f7ff fda7 	bl	80055f4 <writeReg>
	writeReg(0x66, 0xA0);
 8005aa6:	21a0      	movs	r1, #160	; 0xa0
 8005aa8:	2066      	movs	r0, #102	; 0x66
 8005aaa:	f7ff fda3 	bl	80055f4 <writeReg>

	writeReg(0xFF, 0x01);
 8005aae:	2101      	movs	r1, #1
 8005ab0:	20ff      	movs	r0, #255	; 0xff
 8005ab2:	f7ff fd9f 	bl	80055f4 <writeReg>
	writeReg(0x22, 0x32);
 8005ab6:	2132      	movs	r1, #50	; 0x32
 8005ab8:	2022      	movs	r0, #34	; 0x22
 8005aba:	f7ff fd9b 	bl	80055f4 <writeReg>
	writeReg(0x47, 0x14);
 8005abe:	2114      	movs	r1, #20
 8005ac0:	2047      	movs	r0, #71	; 0x47
 8005ac2:	f7ff fd97 	bl	80055f4 <writeReg>
	writeReg(0x49, 0xFF);
 8005ac6:	21ff      	movs	r1, #255	; 0xff
 8005ac8:	2049      	movs	r0, #73	; 0x49
 8005aca:	f7ff fd93 	bl	80055f4 <writeReg>
	writeReg(0x4A, 0x00);
 8005ace:	2100      	movs	r1, #0
 8005ad0:	204a      	movs	r0, #74	; 0x4a
 8005ad2:	f7ff fd8f 	bl	80055f4 <writeReg>

	writeReg(0xFF, 0x00);
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	20ff      	movs	r0, #255	; 0xff
 8005ada:	f7ff fd8b 	bl	80055f4 <writeReg>
	writeReg(0x7A, 0x0A);
 8005ade:	210a      	movs	r1, #10
 8005ae0:	207a      	movs	r0, #122	; 0x7a
 8005ae2:	f7ff fd87 	bl	80055f4 <writeReg>
	writeReg(0x7B, 0x00);
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	207b      	movs	r0, #123	; 0x7b
 8005aea:	f7ff fd83 	bl	80055f4 <writeReg>
	writeReg(0x78, 0x21);
 8005aee:	2121      	movs	r1, #33	; 0x21
 8005af0:	2078      	movs	r0, #120	; 0x78
 8005af2:	f7ff fd7f 	bl	80055f4 <writeReg>

	writeReg(0xFF, 0x01);
 8005af6:	2101      	movs	r1, #1
 8005af8:	20ff      	movs	r0, #255	; 0xff
 8005afa:	f7ff fd7b 	bl	80055f4 <writeReg>
	writeReg(0x23, 0x34);
 8005afe:	2134      	movs	r1, #52	; 0x34
 8005b00:	2023      	movs	r0, #35	; 0x23
 8005b02:	f7ff fd77 	bl	80055f4 <writeReg>
	writeReg(0x42, 0x00);
 8005b06:	2100      	movs	r1, #0
 8005b08:	2042      	movs	r0, #66	; 0x42
 8005b0a:	f7ff fd73 	bl	80055f4 <writeReg>
	writeReg(0x44, 0xFF);
 8005b0e:	21ff      	movs	r1, #255	; 0xff
 8005b10:	2044      	movs	r0, #68	; 0x44
 8005b12:	f7ff fd6f 	bl	80055f4 <writeReg>
	writeReg(0x45, 0x26);
 8005b16:	2126      	movs	r1, #38	; 0x26
 8005b18:	2045      	movs	r0, #69	; 0x45
 8005b1a:	f7ff fd6b 	bl	80055f4 <writeReg>
	writeReg(0x46, 0x05);
 8005b1e:	2105      	movs	r1, #5
 8005b20:	2046      	movs	r0, #70	; 0x46
 8005b22:	f7ff fd67 	bl	80055f4 <writeReg>
	writeReg(0x40, 0x40);
 8005b26:	2140      	movs	r1, #64	; 0x40
 8005b28:	2040      	movs	r0, #64	; 0x40
 8005b2a:	f7ff fd63 	bl	80055f4 <writeReg>
	writeReg(0x0E, 0x06);
 8005b2e:	2106      	movs	r1, #6
 8005b30:	200e      	movs	r0, #14
 8005b32:	f7ff fd5f 	bl	80055f4 <writeReg>
	writeReg(0x20, 0x1A);
 8005b36:	211a      	movs	r1, #26
 8005b38:	2020      	movs	r0, #32
 8005b3a:	f7ff fd5b 	bl	80055f4 <writeReg>
	writeReg(0x43, 0x40);
 8005b3e:	2140      	movs	r1, #64	; 0x40
 8005b40:	2043      	movs	r0, #67	; 0x43
 8005b42:	f7ff fd57 	bl	80055f4 <writeReg>

	writeReg(0xFF, 0x00);
 8005b46:	2100      	movs	r1, #0
 8005b48:	20ff      	movs	r0, #255	; 0xff
 8005b4a:	f7ff fd53 	bl	80055f4 <writeReg>
	writeReg(0x34, 0x03);
 8005b4e:	2103      	movs	r1, #3
 8005b50:	2034      	movs	r0, #52	; 0x34
 8005b52:	f7ff fd4f 	bl	80055f4 <writeReg>
	writeReg(0x35, 0x44);
 8005b56:	2144      	movs	r1, #68	; 0x44
 8005b58:	2035      	movs	r0, #53	; 0x35
 8005b5a:	f7ff fd4b 	bl	80055f4 <writeReg>

	writeReg(0xFF, 0x01);
 8005b5e:	2101      	movs	r1, #1
 8005b60:	20ff      	movs	r0, #255	; 0xff
 8005b62:	f7ff fd47 	bl	80055f4 <writeReg>
	writeReg(0x31, 0x04);
 8005b66:	2104      	movs	r1, #4
 8005b68:	2031      	movs	r0, #49	; 0x31
 8005b6a:	f7ff fd43 	bl	80055f4 <writeReg>
	writeReg(0x4B, 0x09);
 8005b6e:	2109      	movs	r1, #9
 8005b70:	204b      	movs	r0, #75	; 0x4b
 8005b72:	f7ff fd3f 	bl	80055f4 <writeReg>
	writeReg(0x4C, 0x05);
 8005b76:	2105      	movs	r1, #5
 8005b78:	204c      	movs	r0, #76	; 0x4c
 8005b7a:	f7ff fd3b 	bl	80055f4 <writeReg>
	writeReg(0x4D, 0x04);
 8005b7e:	2104      	movs	r1, #4
 8005b80:	204d      	movs	r0, #77	; 0x4d
 8005b82:	f7ff fd37 	bl	80055f4 <writeReg>

	writeReg(0xFF, 0x00);
 8005b86:	2100      	movs	r1, #0
 8005b88:	20ff      	movs	r0, #255	; 0xff
 8005b8a:	f7ff fd33 	bl	80055f4 <writeReg>
	writeReg(0x44, 0x00);
 8005b8e:	2100      	movs	r1, #0
 8005b90:	2044      	movs	r0, #68	; 0x44
 8005b92:	f7ff fd2f 	bl	80055f4 <writeReg>
	writeReg(0x45, 0x20);
 8005b96:	2120      	movs	r1, #32
 8005b98:	2045      	movs	r0, #69	; 0x45
 8005b9a:	f7ff fd2b 	bl	80055f4 <writeReg>
	writeReg(0x47, 0x08);
 8005b9e:	2108      	movs	r1, #8
 8005ba0:	2047      	movs	r0, #71	; 0x47
 8005ba2:	f7ff fd27 	bl	80055f4 <writeReg>
	writeReg(0x48, 0x28);
 8005ba6:	2128      	movs	r1, #40	; 0x28
 8005ba8:	2048      	movs	r0, #72	; 0x48
 8005baa:	f7ff fd23 	bl	80055f4 <writeReg>
	writeReg(0x67, 0x00);
 8005bae:	2100      	movs	r1, #0
 8005bb0:	2067      	movs	r0, #103	; 0x67
 8005bb2:	f7ff fd1f 	bl	80055f4 <writeReg>
	writeReg(0x70, 0x04);
 8005bb6:	2104      	movs	r1, #4
 8005bb8:	2070      	movs	r0, #112	; 0x70
 8005bba:	f7ff fd1b 	bl	80055f4 <writeReg>
	writeReg(0x71, 0x01);
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	2071      	movs	r0, #113	; 0x71
 8005bc2:	f7ff fd17 	bl	80055f4 <writeReg>
	writeReg(0x72, 0xFE);
 8005bc6:	21fe      	movs	r1, #254	; 0xfe
 8005bc8:	2072      	movs	r0, #114	; 0x72
 8005bca:	f7ff fd13 	bl	80055f4 <writeReg>
	writeReg(0x76, 0x00);
 8005bce:	2100      	movs	r1, #0
 8005bd0:	2076      	movs	r0, #118	; 0x76
 8005bd2:	f7ff fd0f 	bl	80055f4 <writeReg>
	writeReg(0x77, 0x00);
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	2077      	movs	r0, #119	; 0x77
 8005bda:	f7ff fd0b 	bl	80055f4 <writeReg>

	writeReg(0xFF, 0x01);
 8005bde:	2101      	movs	r1, #1
 8005be0:	20ff      	movs	r0, #255	; 0xff
 8005be2:	f7ff fd07 	bl	80055f4 <writeReg>
	writeReg(0x0D, 0x01);
 8005be6:	2101      	movs	r1, #1
 8005be8:	200d      	movs	r0, #13
 8005bea:	f7ff fd03 	bl	80055f4 <writeReg>

	writeReg(0xFF, 0x00);
 8005bee:	2100      	movs	r1, #0
 8005bf0:	20ff      	movs	r0, #255	; 0xff
 8005bf2:	f7ff fcff 	bl	80055f4 <writeReg>
	writeReg(0x80, 0x01);
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	2080      	movs	r0, #128	; 0x80
 8005bfa:	f7ff fcfb 	bl	80055f4 <writeReg>
	writeReg(0x01, 0xF8);
 8005bfe:	21f8      	movs	r1, #248	; 0xf8
 8005c00:	2001      	movs	r0, #1
 8005c02:	f7ff fcf7 	bl	80055f4 <writeReg>

	writeReg(0xFF, 0x01);
 8005c06:	2101      	movs	r1, #1
 8005c08:	20ff      	movs	r0, #255	; 0xff
 8005c0a:	f7ff fcf3 	bl	80055f4 <writeReg>
	writeReg(0x8E, 0x01);
 8005c0e:	2101      	movs	r1, #1
 8005c10:	208e      	movs	r0, #142	; 0x8e
 8005c12:	f7ff fcef 	bl	80055f4 <writeReg>
	writeReg(0x00, 0x01);
 8005c16:	2101      	movs	r1, #1
 8005c18:	2000      	movs	r0, #0
 8005c1a:	f7ff fceb 	bl	80055f4 <writeReg>
	writeReg(0xFF, 0x00);
 8005c1e:	2100      	movs	r1, #0
 8005c20:	20ff      	movs	r0, #255	; 0xff
 8005c22:	f7ff fce7 	bl	80055f4 <writeReg>
	writeReg(0x80, 0x00);
 8005c26:	2100      	movs	r1, #0
 8005c28:	2080      	movs	r0, #128	; 0x80
 8005c2a:	f7ff fce3 	bl	80055f4 <writeReg>
	// -- VL53L0X_load_tuning_settings() end

	// "Set interrupt config to new sample ready"
	// -- VL53L0X_SetGpioConfig() begin

	writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8005c2e:	2104      	movs	r1, #4
 8005c30:	200a      	movs	r0, #10
 8005c32:	f7ff fcdf 	bl	80055f4 <writeReg>
	writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8005c36:	2084      	movs	r0, #132	; 0x84
 8005c38:	f7ff fd30 	bl	800569c <readReg>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f023 0310 	bic.w	r3, r3, #16
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	4619      	mov	r1, r3
 8005c46:	2084      	movs	r0, #132	; 0x84
 8005c48:	f7ff fcd4 	bl	80055f4 <writeReg>
	writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	200b      	movs	r0, #11
 8005c50:	f7ff fcd0 	bl	80055f4 <writeReg>

	// -- VL53L0X_SetGpioConfig() end

	g_measTimBudUs = getMeasurementTimingBudget();
 8005c54:	f000 f8fe 	bl	8005e54 <getMeasurementTimingBudget>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	4a16      	ldr	r2, [pc, #88]	; (8005cb4 <initVL53L0X+0x4b8>)
 8005c5c:	6013      	str	r3, [r2, #0]
	// "Disable MSRC and TCC by default"
	// MSRC = Minimum Signal Rate Check
	// TCC = Target CentreCheck
	// -- VL53L0X_SetSequenceStepEnable() begin

	writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8005c5e:	21e8      	movs	r1, #232	; 0xe8
 8005c60:	2001      	movs	r0, #1
 8005c62:	f7ff fcc7 	bl	80055f4 <writeReg>

	// -- VL53L0X_SetSequenceStepEnable() end

	// "Recalculate timing budget"
	setMeasurementTimingBudget(g_measTimBudUs);
 8005c66:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <initVL53L0X+0x4b8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 f85a 	bl	8005d24 <setMeasurementTimingBudget>

	// VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

	// -- VL53L0X_perform_vhv_calibration() begin

	writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005c70:	2101      	movs	r1, #1
 8005c72:	2001      	movs	r0, #1
 8005c74:	f7ff fcbe 	bl	80055f4 <writeReg>
	if (!performSingleRefCalibration(0x40)) { return false; }
 8005c78:	2040      	movs	r0, #64	; 0x40
 8005c7a:	f000 fc93 	bl	80065a4 <performSingleRefCalibration>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <initVL53L0X+0x48c>
 8005c84:	2300      	movs	r3, #0
 8005c86:	e010      	b.n	8005caa <initVL53L0X+0x4ae>

	// -- VL53L0X_perform_vhv_calibration() end

	// -- VL53L0X_perform_phase_calibration() begin

	writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005c88:	2102      	movs	r1, #2
 8005c8a:	2001      	movs	r0, #1
 8005c8c:	f7ff fcb2 	bl	80055f4 <writeReg>
	if (!performSingleRefCalibration(0x00)) { return false; }
 8005c90:	2000      	movs	r0, #0
 8005c92:	f000 fc87 	bl	80065a4 <performSingleRefCalibration>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <initVL53L0X+0x4a4>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e004      	b.n	8005caa <initVL53L0X+0x4ae>

	// -- VL53L0X_perform_phase_calibration() end

	// "restore the previous Sequence Config"
	writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8005ca0:	21e8      	movs	r1, #232	; 0xe8
 8005ca2:	2001      	movs	r0, #1
 8005ca4:	f7ff fca6 	bl	80055f4 <writeReg>

	// VL53L0X_PerformRefCalibration() end

	return true;
 8005ca8:	2301      	movs	r3, #1
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	200002b4 	.word	0x200002b4

08005cb8 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool setSignalRateLimit(float limit_Mcps)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	ed87 0a01 	vstr	s0, [r7, #4]
	if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8005cc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cce:	d40a      	bmi.n	8005ce6 <setSignalRateLimit+0x2e>
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7fa fc51 	bl	8000578 <__aeabi_f2d>
 8005cd6:	a311      	add	r3, pc, #68	; (adr r3, 8005d1c <setSignalRateLimit+0x64>)
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f7fa fd22 	bl	8000724 <__aeabi_dcmpgt>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <setSignalRateLimit+0x32>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e00f      	b.n	8005d0a <setSignalRateLimit+0x52>

	// Q9.7 fixed point format (9 integer bits, 7 fractional bits)
	writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8005cea:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cee:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005d18 <setSignalRateLimit+0x60>
 8005cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cfa:	ee17 3a90 	vmov	r3, s15
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	4619      	mov	r1, r3
 8005d02:	2044      	movs	r0, #68	; 0x44
 8005d04:	f7ff fca0 	bl	8005648 <writeReg16Bit>
	return true;
 8005d08:	2301      	movs	r3, #1
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	f3af 8000 	nop.w
 8005d18:	43000000 	.word	0x43000000
 8005d1c:	0a3d70a4 	.word	0x0a3d70a4
 8005d20:	407fffd7 	.word	0x407fffd7

08005d24 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b092      	sub	sp, #72	; 0x48
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
	SequenceStepEnables enables;
	SequenceStepTimeouts timeouts;

	uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8005d2c:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8005d30:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint16_t const EndOverhead        = 960;
 8005d34:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005d38:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint16_t const MsrcOverhead       = 660;
 8005d3a:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005d3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint16_t const TccOverhead        = 590;
 8005d40:	f240 234e 	movw	r3, #590	; 0x24e
 8005d44:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t const DssOverhead        = 690;
 8005d46:	f240 23b2 	movw	r3, #690	; 0x2b2
 8005d4a:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t const PreRangeOverhead   = 660;
 8005d4c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005d50:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t const FinalRangeOverhead = 550;
 8005d52:	f240 2326 	movw	r3, #550	; 0x226
 8005d56:	86bb      	strh	r3, [r7, #52]	; 0x34

	uint32_t const MinTimingBudget = 20000;
 8005d58:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005d5c:	633b      	str	r3, [r7, #48]	; 0x30

	if (budget_us < MinTimingBudget) { return false; }
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d201      	bcs.n	8005d6a <setMeasurementTimingBudget+0x46>
 8005d66:	2300      	movs	r3, #0
 8005d68:	e06e      	b.n	8005e48 <setMeasurementTimingBudget+0x124>

	uint32_t used_budget_us = StartOverhead + EndOverhead;
 8005d6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005d6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d70:	4413      	add	r3, r2
 8005d72:	647b      	str	r3, [r7, #68]	; 0x44

	getSequenceStepEnables(&enables);
 8005d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fad1 	bl	8006320 <getSequenceStepEnables>
	getSequenceStepTimeouts(&enables, &timeouts);
 8005d7e:	f107 020c 	add.w	r2, r7, #12
 8005d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d86:	4611      	mov	r1, r2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fb17 	bl	80063bc <getSequenceStepTimeouts>

	if (enables.tcc)
 8005d8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <setMeasurementTimingBudget+0x7e>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005d9a:	4413      	add	r3, r2
 8005d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d9e:	4413      	add	r3, r2
 8005da0:	647b      	str	r3, [r7, #68]	; 0x44
	}

	if (enables.dss)
 8005da2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d007      	beq.n	8005dba <setMeasurementTimingBudget+0x96>
	{
		used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005dae:	4413      	add	r3, r2
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005db4:	4413      	add	r3, r2
 8005db6:	647b      	str	r3, [r7, #68]	; 0x44
 8005db8:	e009      	b.n	8005dce <setMeasurementTimingBudget+0xaa>
	}
	else if (enables.msrc)
 8005dba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d005      	beq.n	8005dce <setMeasurementTimingBudget+0xaa>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005dc6:	4413      	add	r3, r2
 8005dc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dca:	4413      	add	r3, r2
 8005dcc:	647b      	str	r3, [r7, #68]	; 0x44
	}

	if (enables.pre_range)
 8005dce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <setMeasurementTimingBudget+0xbe>
	{
		used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005dda:	4413      	add	r3, r2
 8005ddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dde:	4413      	add	r3, r2
 8005de0:	647b      	str	r3, [r7, #68]	; 0x44
	}

	if (enables.final_range)
 8005de2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d02d      	beq.n	8005e46 <setMeasurementTimingBudget+0x122>
	{
		used_budget_us += FinalRangeOverhead;
 8005dea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dee:	4413      	add	r3, r2
 8005df0:	647b      	str	r3, [r7, #68]	; 0x44
		// budget and the sum of all other timeouts within the sequence.
		// If there is no room for the final range timeout, then an error
		// will be set. Otherwise the remaining time will be applied to
		// the final range."

		if (used_budget_us > budget_us)
 8005df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d901      	bls.n	8005dfe <setMeasurementTimingBudget+0xda>
		{
			// "Requested timeout too big."
			return false;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e024      	b.n	8005e48 <setMeasurementTimingBudget+0x124>
		}

		uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
		//  timeouts must be expressed in macro periods MClks
		//  because they have different vcsel periods."

		uint16_t final_range_timeout_mclks =
				timeoutMicrosecondsToMclks(final_range_timeout_us,
						timeouts.final_range_vcsel_period_pclks);
 8005e06:	89fb      	ldrh	r3, [r7, #14]
				timeoutMicrosecondsToMclks(final_range_timeout_us,
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e0e:	f000 fba3 	bl	8006558 <timeoutMicrosecondsToMclks>
 8005e12:	4603      	mov	r3, r0
		uint16_t final_range_timeout_mclks =
 8005e14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

		if (enables.pre_range)
 8005e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <setMeasurementTimingBudget+0x108>
		{
			final_range_timeout_mclks += timeouts.pre_range_mclks;
 8005e20:	8a7a      	ldrh	r2, [r7, #18]
 8005e22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e26:	4413      	add	r3, r2
 8005e28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		}

		writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8005e2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 fb3d 	bl	80064b0 <encodeTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	4619      	mov	r1, r3
 8005e3a:	2071      	movs	r0, #113	; 0x71
 8005e3c:	f7ff fc04 	bl	8005648 <writeReg16Bit>
				encodeTimeout(final_range_timeout_mclks));

		// set_sequence_step_timeout() end

		g_measTimBudUs = budget_us; // store for internal reuse
 8005e40:	4a03      	ldr	r2, [pc, #12]	; (8005e50 <setMeasurementTimingBudget+0x12c>)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6013      	str	r3, [r2, #0]
	}
	return true;
 8005e46:	2301      	movs	r3, #1
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3748      	adds	r7, #72	; 0x48
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	200002b4 	.word	0x200002b4

08005e54 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08c      	sub	sp, #48	; 0x30
 8005e58:	af00      	add	r7, sp, #0
	SequenceStepEnables enables;
	SequenceStepTimeouts timeouts;

	uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8005e5a:	f240 7376 	movw	r3, #1910	; 0x776
 8005e5e:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t const EndOverhead        = 960;
 8005e60:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005e64:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t const MsrcOverhead       = 660;
 8005e66:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005e6a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t const TccOverhead        = 590;
 8005e6c:	f240 234e 	movw	r3, #590	; 0x24e
 8005e70:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t const DssOverhead        = 690;
 8005e72:	f240 23b2 	movw	r3, #690	; 0x2b2
 8005e76:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t const PreRangeOverhead   = 660;
 8005e78:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005e7c:	843b      	strh	r3, [r7, #32]
	uint16_t const FinalRangeOverhead = 550;
 8005e7e:	f240 2326 	movw	r3, #550	; 0x226
 8005e82:	83fb      	strh	r3, [r7, #30]

	// "Start and end overhead times always present"
	uint32_t budget_us = StartOverhead + EndOverhead;
 8005e84:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005e86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e88:	4413      	add	r3, r2
 8005e8a:	62fb      	str	r3, [r7, #44]	; 0x2c

	getSequenceStepEnables(&enables);
 8005e8c:	f107 0318 	add.w	r3, r7, #24
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fa45 	bl	8006320 <getSequenceStepEnables>
	getSequenceStepTimeouts(&enables, &timeouts);
 8005e96:	463a      	mov	r2, r7
 8005e98:	f107 0318 	add.w	r3, r7, #24
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fa8c 	bl	80063bc <getSequenceStepTimeouts>

	if (enables.tcc)
 8005ea4:	7e3b      	ldrb	r3, [r7, #24]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <getMeasurementTimingBudget+0x62>
	{
		budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005eae:	4413      	add	r3, r2
 8005eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eb2:	4413      	add	r3, r2
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (enables.dss)
 8005eb6:	7ebb      	ldrb	r3, [r7, #26]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d007      	beq.n	8005ecc <getMeasurementTimingBudget+0x78>
	{
		budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ec0:	4413      	add	r3, r2
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec6:	4413      	add	r3, r2
 8005ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eca:	e008      	b.n	8005ede <getMeasurementTimingBudget+0x8a>
	}
	else if (enables.msrc)
 8005ecc:	7e7b      	ldrb	r3, [r7, #25]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d005      	beq.n	8005ede <getMeasurementTimingBudget+0x8a>
	{
		budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ed6:	4413      	add	r3, r2
 8005ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eda:	4413      	add	r3, r2
 8005edc:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (enables.pre_range)
 8005ede:	7efb      	ldrb	r3, [r7, #27]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <getMeasurementTimingBudget+0x9c>
	{
		budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	8c3b      	ldrh	r3, [r7, #32]
 8005ee8:	4413      	add	r3, r2
 8005eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eec:	4413      	add	r3, r2
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (enables.final_range)
 8005ef0:	7f3b      	ldrb	r3, [r7, #28]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d005      	beq.n	8005f02 <getMeasurementTimingBudget+0xae>
	{
		budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	8bfb      	ldrh	r3, [r7, #30]
 8005efa:	4413      	add	r3, r2
 8005efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005efe:	4413      	add	r3, r2
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	g_measTimBudUs = budget_us; // store for internal reuse
 8005f02:	4a04      	ldr	r2, [pc, #16]	; (8005f14 <getMeasurementTimingBudget+0xc0>)
 8005f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f06:	6013      	str	r3, [r2, #0]
	return budget_us;
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3730      	adds	r7, #48	; 0x30
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	200002b4 	.word	0x200002b4

08005f18 <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08c      	sub	sp, #48	; 0x30
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	460a      	mov	r2, r1
 8005f22:	71fb      	strb	r3, [r7, #7]
 8005f24:	4613      	mov	r3, r2
 8005f26:	71bb      	strb	r3, [r7, #6]
	uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8005f28:	79bb      	ldrb	r3, [r7, #6]
 8005f2a:	085b      	lsrs	r3, r3, #1
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	SequenceStepEnables enables;
	SequenceStepTimeouts timeouts;

	getSequenceStepEnables(&enables);
 8005f34:	f107 0320 	add.w	r3, r7, #32
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 f9f1 	bl	8006320 <getSequenceStepEnables>
	getSequenceStepTimeouts(&enables, &timeouts);
 8005f3e:	f107 0208 	add.w	r2, r7, #8
 8005f42:	f107 0320 	add.w	r3, r7, #32
 8005f46:	4611      	mov	r1, r2
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fa37 	bl	80063bc <getSequenceStepTimeouts>
	//
	// For the MSRC timeout, the same applies - this timeout being
	// dependant on the pre-range vcsel period."


	if (type == VcselPeriodPreRange)
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d15d      	bne.n	8006010 <setVcselPulsePeriod+0xf8>
	{
		// "Set phase check limits"
		switch (period_pclks)
 8005f54:	79bb      	ldrb	r3, [r7, #6]
 8005f56:	3b0c      	subs	r3, #12
 8005f58:	2b06      	cmp	r3, #6
 8005f5a:	d825      	bhi.n	8005fa8 <setVcselPulsePeriod+0x90>
 8005f5c:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <setVcselPulsePeriod+0x4c>)
 8005f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f62:	bf00      	nop
 8005f64:	08005f81 	.word	0x08005f81
 8005f68:	08005fa9 	.word	0x08005fa9
 8005f6c:	08005f8b 	.word	0x08005f8b
 8005f70:	08005fa9 	.word	0x08005fa9
 8005f74:	08005f95 	.word	0x08005f95
 8005f78:	08005fa9 	.word	0x08005fa9
 8005f7c:	08005f9f 	.word	0x08005f9f
		{
		case 12:
			writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8005f80:	2118      	movs	r1, #24
 8005f82:	2057      	movs	r0, #87	; 0x57
 8005f84:	f7ff fb36 	bl	80055f4 <writeReg>
			break;
 8005f88:	e010      	b.n	8005fac <setVcselPulsePeriod+0x94>

		case 14:
			writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8005f8a:	2130      	movs	r1, #48	; 0x30
 8005f8c:	2057      	movs	r0, #87	; 0x57
 8005f8e:	f7ff fb31 	bl	80055f4 <writeReg>
			break;
 8005f92:	e00b      	b.n	8005fac <setVcselPulsePeriod+0x94>

		case 16:
			writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8005f94:	2140      	movs	r1, #64	; 0x40
 8005f96:	2057      	movs	r0, #87	; 0x57
 8005f98:	f7ff fb2c 	bl	80055f4 <writeReg>
			break;
 8005f9c:	e006      	b.n	8005fac <setVcselPulsePeriod+0x94>

		case 18:
			writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8005f9e:	2150      	movs	r1, #80	; 0x50
 8005fa0:	2057      	movs	r0, #87	; 0x57
 8005fa2:	f7ff fb27 	bl	80055f4 <writeReg>
			break;
 8005fa6:	e001      	b.n	8005fac <setVcselPulsePeriod+0x94>

		default:
			// invalid period
			return false;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e0fc      	b.n	80061a6 <setVcselPulsePeriod+0x28e>
		}
		writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8005fac:	2108      	movs	r1, #8
 8005fae:	2056      	movs	r0, #86	; 0x56
 8005fb0:	f7ff fb20 	bl	80055f4 <writeReg>

		// apply new VCSEL period
		writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8005fb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005fb8:	4619      	mov	r1, r3
 8005fba:	2050      	movs	r0, #80	; 0x50
 8005fbc:	f7ff fb1a 	bl	80055f4 <writeReg>

		// set_sequence_step_timeout() begin
		// (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

		uint16_t new_pre_range_timeout_mclks =
				timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	79ba      	ldrb	r2, [r7, #6]
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fac6 	bl	8006558 <timeoutMicrosecondsToMclks>
 8005fcc:	4603      	mov	r3, r0
		uint16_t new_pre_range_timeout_mclks =
 8005fce:	857b      	strh	r3, [r7, #42]	; 0x2a

		writeReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8005fd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fa6c 	bl	80064b0 <encodeTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	4619      	mov	r1, r3
 8005fdc:	2051      	movs	r0, #81	; 0x51
 8005fde:	f7ff fb33 	bl	8005648 <writeReg16Bit>

		// set_sequence_step_timeout() begin
		// (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

		uint16_t new_msrc_timeout_mclks =
				timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	79ba      	ldrb	r2, [r7, #6]
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fab5 	bl	8006558 <timeoutMicrosecondsToMclks>
 8005fee:	4603      	mov	r3, r0
		uint16_t new_msrc_timeout_mclks =
 8005ff0:	853b      	strh	r3, [r7, #40]	; 0x28

		writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8005ff2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff8:	d804      	bhi.n	8006004 <setVcselPulsePeriod+0xec>
				(new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8005ffa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ffc:	b2db      	uxtb	r3, r3
		writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b2db      	uxtb	r3, r3
 8006002:	e000      	b.n	8006006 <setVcselPulsePeriod+0xee>
 8006004:	23ff      	movs	r3, #255	; 0xff
 8006006:	4619      	mov	r1, r3
 8006008:	2046      	movs	r0, #70	; 0x46
 800600a:	f7ff faf3 	bl	80055f4 <writeReg>
 800600e:	e0b1      	b.n	8006174 <setVcselPulsePeriod+0x25c>

		// set_sequence_step_timeout() end
	}
	else if (type == VcselPeriodFinalRange)
 8006010:	79fb      	ldrb	r3, [r7, #7]
 8006012:	2b01      	cmp	r3, #1
 8006014:	f040 80ac 	bne.w	8006170 <setVcselPulsePeriod+0x258>
	{
		switch (period_pclks)
 8006018:	79bb      	ldrb	r3, [r7, #6]
 800601a:	3b08      	subs	r3, #8
 800601c:	2b06      	cmp	r3, #6
 800601e:	f200 8085 	bhi.w	800612c <setVcselPulsePeriod+0x214>
 8006022:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <setVcselPulsePeriod+0x110>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	08006045 	.word	0x08006045
 800602c:	0800612d 	.word	0x0800612d
 8006030:	0800607f 	.word	0x0800607f
 8006034:	0800612d 	.word	0x0800612d
 8006038:	080060b9 	.word	0x080060b9
 800603c:	0800612d 	.word	0x0800612d
 8006040:	080060f3 	.word	0x080060f3
		{
		case 8:
			writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8006044:	2110      	movs	r1, #16
 8006046:	2048      	movs	r0, #72	; 0x48
 8006048:	f7ff fad4 	bl	80055f4 <writeReg>
			writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800604c:	2108      	movs	r1, #8
 800604e:	2047      	movs	r0, #71	; 0x47
 8006050:	f7ff fad0 	bl	80055f4 <writeReg>
			writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8006054:	2102      	movs	r1, #2
 8006056:	2032      	movs	r0, #50	; 0x32
 8006058:	f7ff facc 	bl	80055f4 <writeReg>
			writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 800605c:	210c      	movs	r1, #12
 800605e:	2030      	movs	r0, #48	; 0x30
 8006060:	f7ff fac8 	bl	80055f4 <writeReg>
			writeReg(0xFF, 0x01);
 8006064:	2101      	movs	r1, #1
 8006066:	20ff      	movs	r0, #255	; 0xff
 8006068:	f7ff fac4 	bl	80055f4 <writeReg>
			writeReg(ALGO_PHASECAL_LIM, 0x30);
 800606c:	2130      	movs	r1, #48	; 0x30
 800606e:	2030      	movs	r0, #48	; 0x30
 8006070:	f7ff fac0 	bl	80055f4 <writeReg>
			writeReg(0xFF, 0x00);
 8006074:	2100      	movs	r1, #0
 8006076:	20ff      	movs	r0, #255	; 0xff
 8006078:	f7ff fabc 	bl	80055f4 <writeReg>
			break;
 800607c:	e058      	b.n	8006130 <setVcselPulsePeriod+0x218>

		case 10:
			writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 800607e:	2128      	movs	r1, #40	; 0x28
 8006080:	2048      	movs	r0, #72	; 0x48
 8006082:	f7ff fab7 	bl	80055f4 <writeReg>
			writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8006086:	2108      	movs	r1, #8
 8006088:	2047      	movs	r0, #71	; 0x47
 800608a:	f7ff fab3 	bl	80055f4 <writeReg>
			writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 800608e:	2103      	movs	r1, #3
 8006090:	2032      	movs	r0, #50	; 0x32
 8006092:	f7ff faaf 	bl	80055f4 <writeReg>
			writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 8006096:	2109      	movs	r1, #9
 8006098:	2030      	movs	r0, #48	; 0x30
 800609a:	f7ff faab 	bl	80055f4 <writeReg>
			writeReg(0xFF, 0x01);
 800609e:	2101      	movs	r1, #1
 80060a0:	20ff      	movs	r0, #255	; 0xff
 80060a2:	f7ff faa7 	bl	80055f4 <writeReg>
			writeReg(ALGO_PHASECAL_LIM, 0x20);
 80060a6:	2120      	movs	r1, #32
 80060a8:	2030      	movs	r0, #48	; 0x30
 80060aa:	f7ff faa3 	bl	80055f4 <writeReg>
			writeReg(0xFF, 0x00);
 80060ae:	2100      	movs	r1, #0
 80060b0:	20ff      	movs	r0, #255	; 0xff
 80060b2:	f7ff fa9f 	bl	80055f4 <writeReg>
			break;
 80060b6:	e03b      	b.n	8006130 <setVcselPulsePeriod+0x218>

		case 12:
			writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 80060b8:	2138      	movs	r1, #56	; 0x38
 80060ba:	2048      	movs	r0, #72	; 0x48
 80060bc:	f7ff fa9a 	bl	80055f4 <writeReg>
			writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80060c0:	2108      	movs	r1, #8
 80060c2:	2047      	movs	r0, #71	; 0x47
 80060c4:	f7ff fa96 	bl	80055f4 <writeReg>
			writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80060c8:	2103      	movs	r1, #3
 80060ca:	2032      	movs	r0, #50	; 0x32
 80060cc:	f7ff fa92 	bl	80055f4 <writeReg>
			writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 80060d0:	2108      	movs	r1, #8
 80060d2:	2030      	movs	r0, #48	; 0x30
 80060d4:	f7ff fa8e 	bl	80055f4 <writeReg>
			writeReg(0xFF, 0x01);
 80060d8:	2101      	movs	r1, #1
 80060da:	20ff      	movs	r0, #255	; 0xff
 80060dc:	f7ff fa8a 	bl	80055f4 <writeReg>
			writeReg(ALGO_PHASECAL_LIM, 0x20);
 80060e0:	2120      	movs	r1, #32
 80060e2:	2030      	movs	r0, #48	; 0x30
 80060e4:	f7ff fa86 	bl	80055f4 <writeReg>
			writeReg(0xFF, 0x00);
 80060e8:	2100      	movs	r1, #0
 80060ea:	20ff      	movs	r0, #255	; 0xff
 80060ec:	f7ff fa82 	bl	80055f4 <writeReg>
			break;
 80060f0:	e01e      	b.n	8006130 <setVcselPulsePeriod+0x218>

		case 14:
			writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 80060f2:	2148      	movs	r1, #72	; 0x48
 80060f4:	2048      	movs	r0, #72	; 0x48
 80060f6:	f7ff fa7d 	bl	80055f4 <writeReg>
			writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80060fa:	2108      	movs	r1, #8
 80060fc:	2047      	movs	r0, #71	; 0x47
 80060fe:	f7ff fa79 	bl	80055f4 <writeReg>
			writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8006102:	2103      	movs	r1, #3
 8006104:	2032      	movs	r0, #50	; 0x32
 8006106:	f7ff fa75 	bl	80055f4 <writeReg>
			writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 800610a:	2107      	movs	r1, #7
 800610c:	2030      	movs	r0, #48	; 0x30
 800610e:	f7ff fa71 	bl	80055f4 <writeReg>
			writeReg(0xFF, 0x01);
 8006112:	2101      	movs	r1, #1
 8006114:	20ff      	movs	r0, #255	; 0xff
 8006116:	f7ff fa6d 	bl	80055f4 <writeReg>
			writeReg(ALGO_PHASECAL_LIM, 0x20);
 800611a:	2120      	movs	r1, #32
 800611c:	2030      	movs	r0, #48	; 0x30
 800611e:	f7ff fa69 	bl	80055f4 <writeReg>
			writeReg(0xFF, 0x00);
 8006122:	2100      	movs	r1, #0
 8006124:	20ff      	movs	r0, #255	; 0xff
 8006126:	f7ff fa65 	bl	80055f4 <writeReg>
			break;
 800612a:	e001      	b.n	8006130 <setVcselPulsePeriod+0x218>

		default:
			// invalid period
			return false;
 800612c:	2300      	movs	r3, #0
 800612e:	e03a      	b.n	80061a6 <setVcselPulsePeriod+0x28e>
		}

		// apply new VCSEL period
		writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8006130:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006134:	4619      	mov	r1, r3
 8006136:	2070      	movs	r0, #112	; 0x70
 8006138:	f7ff fa5c 	bl	80055f4 <writeReg>
		//  must be added. To do this both final and pre-range
		//  timeouts must be expressed in macro periods MClks
		//  because they have different vcsel periods."

		uint16_t new_final_range_timeout_mclks =
				timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	79ba      	ldrb	r2, [r7, #6]
 8006140:	4611      	mov	r1, r2
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fa08 	bl	8006558 <timeoutMicrosecondsToMclks>
 8006148:	4603      	mov	r3, r0
		uint16_t new_final_range_timeout_mclks =
 800614a:	85fb      	strh	r3, [r7, #46]	; 0x2e

		if (enables.pre_range)
 800614c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <setVcselPulsePeriod+0x244>
		{
			new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8006154:	89fa      	ldrh	r2, [r7, #14]
 8006156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006158:	4413      	add	r3, r2
 800615a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}

		writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800615c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800615e:	4618      	mov	r0, r3
 8006160:	f000 f9a6 	bl	80064b0 <encodeTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	4619      	mov	r1, r3
 8006168:	2071      	movs	r0, #113	; 0x71
 800616a:	f7ff fa6d 	bl	8005648 <writeReg16Bit>
 800616e:	e001      	b.n	8006174 <setVcselPulsePeriod+0x25c>
		// set_sequence_step_timeout end
	}
	else
	{
		// invalid type
		return false;
 8006170:	2300      	movs	r3, #0
 8006172:	e018      	b.n	80061a6 <setVcselPulsePeriod+0x28e>
	}

	// "Finally, the timing budget must be re-applied"

	setMeasurementTimingBudget(g_measTimBudUs);
 8006174:	4b0e      	ldr	r3, [pc, #56]	; (80061b0 <setVcselPulsePeriod+0x298>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff fdd3 	bl	8005d24 <setMeasurementTimingBudget>

	// "Perform the phase calibration. This is needed after changing on vcsel period."
	// VL53L0X_perform_phase_calibration() begin

	uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 800617e:	2001      	movs	r0, #1
 8006180:	f7ff fa8c 	bl	800569c <readReg>
 8006184:	4603      	mov	r3, r0
 8006186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 800618a:	2102      	movs	r1, #2
 800618c:	2001      	movs	r0, #1
 800618e:	f7ff fa31 	bl	80055f4 <writeReg>
	performSingleRefCalibration(0x0);
 8006192:	2000      	movs	r0, #0
 8006194:	f000 fa06 	bl	80065a4 <performSingleRefCalibration>
	writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8006198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800619c:	4619      	mov	r1, r3
 800619e:	2001      	movs	r0, #1
 80061a0:	f7ff fa28 	bl	80055f4 <writeReg>

	// VL53L0X_perform_phase_calibration() end

	return true;
 80061a4:	2301      	movs	r3, #1
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3730      	adds	r7, #48	; 0x30
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	200002b4 	.word	0x200002b4

080061b4 <getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	71fb      	strb	r3, [r7, #7]
	if (type == VcselPeriodPreRange)
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d108      	bne.n	80061d6 <getVcselPulsePeriod+0x22>
	{
		return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80061c4:	2050      	movs	r0, #80	; 0x50
 80061c6:	f7ff fa69 	bl	800569c <readReg>
 80061ca:	4603      	mov	r3, r0
 80061cc:	3301      	adds	r3, #1
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	e00c      	b.n	80061f0 <getVcselPulsePeriod+0x3c>
	}
	else if (type == VcselPeriodFinalRange)
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d108      	bne.n	80061ee <getVcselPulsePeriod+0x3a>
	{
		return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80061dc:	2070      	movs	r0, #112	; 0x70
 80061de:	f7ff fa5d 	bl	800569c <readReg>
 80061e2:	4603      	mov	r3, r0
 80061e4:	3301      	adds	r3, #1
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	e000      	b.n	80061f0 <getVcselPulsePeriod+0x3c>
	}
	else { return 255; }
 80061ee:	23ff      	movs	r3, #255	; 0xff
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
	uint8_t tmp;

	writeReg(0x80, 0x01);
 8006202:	2101      	movs	r1, #1
 8006204:	2080      	movs	r0, #128	; 0x80
 8006206:	f7ff f9f5 	bl	80055f4 <writeReg>
	writeReg(0xFF, 0x01);
 800620a:	2101      	movs	r1, #1
 800620c:	20ff      	movs	r0, #255	; 0xff
 800620e:	f7ff f9f1 	bl	80055f4 <writeReg>
	writeReg(0x00, 0x00);
 8006212:	2100      	movs	r1, #0
 8006214:	2000      	movs	r0, #0
 8006216:	f7ff f9ed 	bl	80055f4 <writeReg>

	writeReg(0xFF, 0x06);
 800621a:	2106      	movs	r1, #6
 800621c:	20ff      	movs	r0, #255	; 0xff
 800621e:	f7ff f9e9 	bl	80055f4 <writeReg>
	writeReg(0x83, readReg(0x83) | 0x04);
 8006222:	2083      	movs	r0, #131	; 0x83
 8006224:	f7ff fa3a 	bl	800569c <readReg>
 8006228:	4603      	mov	r3, r0
 800622a:	f043 0304 	orr.w	r3, r3, #4
 800622e:	b2db      	uxtb	r3, r3
 8006230:	4619      	mov	r1, r3
 8006232:	2083      	movs	r0, #131	; 0x83
 8006234:	f7ff f9de 	bl	80055f4 <writeReg>
	writeReg(0xFF, 0x07);
 8006238:	2107      	movs	r1, #7
 800623a:	20ff      	movs	r0, #255	; 0xff
 800623c:	f7ff f9da 	bl	80055f4 <writeReg>
	writeReg(0x81, 0x01);
 8006240:	2101      	movs	r1, #1
 8006242:	2081      	movs	r0, #129	; 0x81
 8006244:	f7ff f9d6 	bl	80055f4 <writeReg>

	writeReg(0x80, 0x01);
 8006248:	2101      	movs	r1, #1
 800624a:	2080      	movs	r0, #128	; 0x80
 800624c:	f7ff f9d2 	bl	80055f4 <writeReg>

	writeReg(0x94, 0x6b);
 8006250:	216b      	movs	r1, #107	; 0x6b
 8006252:	2094      	movs	r0, #148	; 0x94
 8006254:	f7ff f9ce 	bl	80055f4 <writeReg>
	writeReg(0x83, 0x00);
 8006258:	2100      	movs	r1, #0
 800625a:	2083      	movs	r0, #131	; 0x83
 800625c:	f7ff f9ca 	bl	80055f4 <writeReg>
	startTimeout();
 8006260:	f7fb fd28 	bl	8001cb4 <HAL_GetTick>
 8006264:	4603      	mov	r3, r0
 8006266:	b29a      	uxth	r2, r3
 8006268:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <getSpadInfo+0x120>)
 800626a:	801a      	strh	r2, [r3, #0]
	while (readReg(0x83) == 0x00)
 800626c:	e011      	b.n	8006292 <getSpadInfo+0x9a>
	{
		if (checkTimeoutExpired()) { return false; }
 800626e:	4b2b      	ldr	r3, [pc, #172]	; (800631c <getSpadInfo+0x124>)
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00d      	beq.n	8006292 <getSpadInfo+0x9a>
 8006276:	f7fb fd1d 	bl	8001cb4 <HAL_GetTick>
 800627a:	4603      	mov	r3, r0
 800627c:	b29b      	uxth	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	4b25      	ldr	r3, [pc, #148]	; (8006318 <getSpadInfo+0x120>)
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	4a25      	ldr	r2, [pc, #148]	; (800631c <getSpadInfo+0x124>)
 8006288:	8812      	ldrh	r2, [r2, #0]
 800628a:	4293      	cmp	r3, r2
 800628c:	dd01      	ble.n	8006292 <getSpadInfo+0x9a>
 800628e:	2300      	movs	r3, #0
 8006290:	e03d      	b.n	800630e <getSpadInfo+0x116>
	while (readReg(0x83) == 0x00)
 8006292:	2083      	movs	r0, #131	; 0x83
 8006294:	f7ff fa02 	bl	800569c <readReg>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0e7      	beq.n	800626e <getSpadInfo+0x76>
	}
	writeReg(0x83, 0x01);
 800629e:	2101      	movs	r1, #1
 80062a0:	2083      	movs	r0, #131	; 0x83
 80062a2:	f7ff f9a7 	bl	80055f4 <writeReg>
	tmp = readReg(0x92);
 80062a6:	2092      	movs	r0, #146	; 0x92
 80062a8:	f7ff f9f8 	bl	800569c <readReg>
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]

	*count = tmp & 0x7f;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	09db      	lsrs	r3, r3, #7
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	701a      	strb	r2, [r3, #0]

	writeReg(0x81, 0x00);
 80062c6:	2100      	movs	r1, #0
 80062c8:	2081      	movs	r0, #129	; 0x81
 80062ca:	f7ff f993 	bl	80055f4 <writeReg>
	writeReg(0xFF, 0x06);
 80062ce:	2106      	movs	r1, #6
 80062d0:	20ff      	movs	r0, #255	; 0xff
 80062d2:	f7ff f98f 	bl	80055f4 <writeReg>
	writeReg(0x83, readReg(0x83)  & ~0x04);
 80062d6:	2083      	movs	r0, #131	; 0x83
 80062d8:	f7ff f9e0 	bl	800569c <readReg>
 80062dc:	4603      	mov	r3, r0
 80062de:	f023 0304 	bic.w	r3, r3, #4
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	4619      	mov	r1, r3
 80062e6:	2083      	movs	r0, #131	; 0x83
 80062e8:	f7ff f984 	bl	80055f4 <writeReg>
	writeReg(0xFF, 0x01);
 80062ec:	2101      	movs	r1, #1
 80062ee:	20ff      	movs	r0, #255	; 0xff
 80062f0:	f7ff f980 	bl	80055f4 <writeReg>
	writeReg(0x00, 0x01);
 80062f4:	2101      	movs	r1, #1
 80062f6:	2000      	movs	r0, #0
 80062f8:	f7ff f97c 	bl	80055f4 <writeReg>

	writeReg(0xFF, 0x00);
 80062fc:	2100      	movs	r1, #0
 80062fe:	20ff      	movs	r0, #255	; 0xff
 8006300:	f7ff f978 	bl	80055f4 <writeReg>
	writeReg(0x80, 0x00);
 8006304:	2100      	movs	r1, #0
 8006306:	2080      	movs	r0, #128	; 0x80
 8006308:	f7ff f974 	bl	80055f4 <writeReg>

	return true;
 800630c:	2301      	movs	r3, #1
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	200002ae 	.word	0x200002ae
 800631c:	200002ac 	.word	0x200002ac

08006320 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(SequenceStepEnables * enables)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
	uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8006328:	2001      	movs	r0, #1
 800632a:	f7ff f9b7 	bl	800569c <readReg>
 800632e:	4603      	mov	r3, r0
 8006330:	73fb      	strb	r3, [r7, #15]

	enables->tcc          = (sequence_config >> 4) & 0x1;
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	091b      	lsrs	r3, r3, #4
 8006336:	b2db      	uxtb	r3, r3
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	b2da      	uxtb	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	701a      	strb	r2, [r3, #0]
	enables->dss          = (sequence_config >> 3) & 0x1;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	08db      	lsrs	r3, r3, #3
 8006346:	b2db      	uxtb	r3, r3
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	b2da      	uxtb	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	709a      	strb	r2, [r3, #2]
	enables->msrc         = (sequence_config >> 2) & 0x1;
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	089b      	lsrs	r3, r3, #2
 8006356:	b2db      	uxtb	r3, r3
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	b2da      	uxtb	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	705a      	strb	r2, [r3, #1]
	enables->pre_range    = (sequence_config >> 6) & 0x1;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	099b      	lsrs	r3, r3, #6
 8006366:	b2db      	uxtb	r3, r3
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	b2da      	uxtb	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	70da      	strb	r2, [r3, #3]
	enables->final_range  = (sequence_config >> 7) & 0x1;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	09db      	lsrs	r3, r3, #7
 8006376:	b2da      	uxtb	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	711a      	strb	r2, [r3, #4]
}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <initVXL_right>:
void initVXL_right(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
	initVL53L0X(1,&hi2c1);
 8006388:	490a      	ldr	r1, [pc, #40]	; (80063b4 <initVXL_right+0x30>)
 800638a:	2001      	movs	r0, #1
 800638c:	f7ff fa36 	bl	80057fc <initVL53L0X>
	setSignalRateLimit(20);
 8006390:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8006394:	f7ff fc90 	bl	8005cb8 <setSignalRateLimit>
	setVcselPulsePeriod(VcselPeriodPreRange, 10);
 8006398:	210a      	movs	r1, #10
 800639a:	2000      	movs	r0, #0
 800639c:	f7ff fdbc 	bl	8005f18 <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 80063a0:	210e      	movs	r1, #14
 80063a2:	2001      	movs	r0, #1
 80063a4:	f7ff fdb8 	bl	8005f18 <setVcselPulsePeriod>
	setMeasurementTimingBudget(300 * 1000UL);
 80063a8:	4803      	ldr	r0, [pc, #12]	; (80063b8 <initVXL_right+0x34>)
 80063aa:	f7ff fcbb 	bl	8005d24 <setMeasurementTimingBudget>
}
 80063ae:	bf00      	nop
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	2000008c 	.word	0x2000008c
 80063b8:	000493e0 	.word	0x000493e0

080063bc <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
	timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80063c6:	2000      	movs	r0, #0
 80063c8:	f7ff fef4 	bl	80061b4 <getVcselPulsePeriod>
 80063cc:	4603      	mov	r3, r0
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	801a      	strh	r2, [r3, #0]

	timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80063d4:	2046      	movs	r0, #70	; 0x46
 80063d6:	f7ff f961 	bl	800569c <readReg>
 80063da:	4603      	mov	r3, r0
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3301      	adds	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	809a      	strh	r2, [r3, #4]
	timeouts->msrc_dss_tcc_us =
			timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	889a      	ldrh	r2, [r3, #4]
					timeouts->pre_range_vcsel_period_pclks);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	881b      	ldrh	r3, [r3, #0]
			timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	4619      	mov	r1, r3
 80063f2:	4610      	mov	r0, r2
 80063f4:	f000 f888 	bl	8006508 <timeoutMclksToMicroseconds>
 80063f8:	4602      	mov	r2, r0
	timeouts->msrc_dss_tcc_us =
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	60da      	str	r2, [r3, #12]

	timeouts->pre_range_mclks =
			decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80063fe:	2051      	movs	r0, #81	; 0x51
 8006400:	f7ff f978 	bl	80056f4 <readReg16Bit>
 8006404:	4603      	mov	r3, r0
 8006406:	4618      	mov	r0, r3
 8006408:	f000 f83e 	bl	8006488 <decodeTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	461a      	mov	r2, r3
	timeouts->pre_range_mclks =
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	80da      	strh	r2, [r3, #6]
	timeouts->pre_range_us =
			timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	88da      	ldrh	r2, [r3, #6]
					timeouts->pre_range_vcsel_period_pclks);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	881b      	ldrh	r3, [r3, #0]
			timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 800641c:	b2db      	uxtb	r3, r3
 800641e:	4619      	mov	r1, r3
 8006420:	4610      	mov	r0, r2
 8006422:	f000 f871 	bl	8006508 <timeoutMclksToMicroseconds>
 8006426:	4602      	mov	r2, r0
	timeouts->pre_range_us =
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	611a      	str	r2, [r3, #16]

	timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 800642c:	2001      	movs	r0, #1
 800642e:	f7ff fec1 	bl	80061b4 <getVcselPulsePeriod>
 8006432:	4603      	mov	r3, r0
 8006434:	b29a      	uxth	r2, r3
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	805a      	strh	r2, [r3, #2]

	timeouts->final_range_mclks =
			decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 800643a:	2071      	movs	r0, #113	; 0x71
 800643c:	f7ff f95a 	bl	80056f4 <readReg16Bit>
 8006440:	4603      	mov	r3, r0
 8006442:	4618      	mov	r0, r3
 8006444:	f000 f820 	bl	8006488 <decodeTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	461a      	mov	r2, r3
	timeouts->final_range_mclks =
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	811a      	strh	r2, [r3, #8]

	if (enables->pre_range)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	78db      	ldrb	r3, [r3, #3]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d007      	beq.n	8006468 <getSequenceStepTimeouts+0xac>
	{
		timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	891a      	ldrh	r2, [r3, #8]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	88db      	ldrh	r3, [r3, #6]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	b29a      	uxth	r2, r3
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	811a      	strh	r2, [r3, #8]
	}

	timeouts->final_range_us =
			timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	891a      	ldrh	r2, [r3, #8]
					timeouts->final_range_vcsel_period_pclks);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	885b      	ldrh	r3, [r3, #2]
			timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8006470:	b2db      	uxtb	r3, r3
 8006472:	4619      	mov	r1, r3
 8006474:	4610      	mov	r0, r2
 8006476:	f000 f847 	bl	8006508 <timeoutMclksToMicroseconds>
 800647a:	4602      	mov	r2, r0
	timeouts->final_range_us =
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	615a      	str	r2, [r3, #20]
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	80fb      	strh	r3, [r7, #6]
	// format: "(LSByte * 2^MSByte) + 1"
	return (uint16_t)((reg_val & 0x00FF) <<
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	b2db      	uxtb	r3, r3
			(uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8006496:	88fa      	ldrh	r2, [r7, #6]
 8006498:	0a12      	lsrs	r2, r2, #8
 800649a:	b292      	uxth	r2, r2
	return (uint16_t)((reg_val & 0x00FF) <<
 800649c:	4093      	lsls	r3, r2
 800649e:	b29b      	uxth	r3, r3
			(uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80064a0:	3301      	adds	r3, #1
 80064a2:	b29b      	uxth	r3, r3
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	80fb      	strh	r3, [r7, #6]
	// format: "(LSByte * 2^MSByte) + 1"

	uint32_t ls_byte = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
	uint16_t ms_byte = 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	817b      	strh	r3, [r7, #10]

	if (timeout_mclks > 0)
 80064c2:	88fb      	ldrh	r3, [r7, #6]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d018      	beq.n	80064fa <encodeTimeout+0x4a>
	{
		ls_byte = timeout_mclks - 1;
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	60fb      	str	r3, [r7, #12]

		while ((ls_byte & 0xFFFFFF00) > 0)
 80064ce:	e005      	b.n	80064dc <encodeTimeout+0x2c>
		{
			ls_byte >>= 1;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]
			ms_byte++;
 80064d6:	897b      	ldrh	r3, [r7, #10]
 80064d8:	3301      	adds	r3, #1
 80064da:	817b      	strh	r3, [r7, #10]
		while ((ls_byte & 0xFFFFFF00) > 0)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1f4      	bne.n	80064d0 <encodeTimeout+0x20>
		}

		return (ms_byte << 8) | (ls_byte & 0xFF);
 80064e6:	897b      	ldrh	r3, [r7, #10]
 80064e8:	021b      	lsls	r3, r3, #8
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	4313      	orrs	r3, r2
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	e000      	b.n	80064fc <encodeTimeout+0x4c>
	}
	else { return 0; }
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	4603      	mov	r3, r0
 8006510:	460a      	mov	r2, r1
 8006512:	80fb      	strh	r3, [r7, #6]
 8006514:	4613      	mov	r3, r2
 8006516:	717b      	strb	r3, [r7, #5]
	uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006518:	797b      	ldrb	r3, [r7, #5]
 800651a:	4a0d      	ldr	r2, [pc, #52]	; (8006550 <timeoutMclksToMicroseconds+0x48>)
 800651c:	fb02 f303 	mul.w	r3, r2, r3
 8006520:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006524:	4a0b      	ldr	r2, [pc, #44]	; (8006554 <timeoutMclksToMicroseconds+0x4c>)
 8006526:	fba2 2303 	umull	r2, r3, r2, r3
 800652a:	099b      	lsrs	r3, r3, #6
 800652c:	60fb      	str	r3, [r7, #12]

	return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 800652e:	88fb      	ldrh	r3, [r7, #6]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	fb03 f202 	mul.w	r2, r3, r2
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	085b      	lsrs	r3, r3, #1
 800653a:	4413      	add	r3, r2
 800653c:	4a05      	ldr	r2, [pc, #20]	; (8006554 <timeoutMclksToMicroseconds+0x4c>)
 800653e:	fba2 2303 	umull	r2, r3, r2, r3
 8006542:	099b      	lsrs	r3, r3, #6
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	003a2f00 	.word	0x003a2f00
 8006554:	10624dd3 	.word	0x10624dd3

08006558 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
	uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	4a0d      	ldr	r2, [pc, #52]	; (800659c <timeoutMicrosecondsToMclks+0x44>)
 8006568:	fb02 f303 	mul.w	r3, r2, r3
 800656c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006570:	4a0b      	ldr	r2, [pc, #44]	; (80065a0 <timeoutMicrosecondsToMclks+0x48>)
 8006572:	fba2 2303 	umull	r2, r3, r2, r3
 8006576:	099b      	lsrs	r3, r3, #6
 8006578:	60fb      	str	r3, [r7, #12]

	return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006580:	fb03 f202 	mul.w	r2, r3, r2
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	085b      	lsrs	r3, r3, #1
 8006588:	441a      	add	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	003a2f00 	.word	0x003a2f00
 80065a0:	10624dd3 	.word	0x10624dd3

080065a4 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	71fb      	strb	r3, [r7, #7]
	writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	f043 0301 	orr.w	r3, r3, #1
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	4619      	mov	r1, r3
 80065b8:	2000      	movs	r0, #0
 80065ba:	f7ff f81b 	bl	80055f4 <writeReg>

	startTimeout();
 80065be:	f7fb fb79 	bl	8001cb4 <HAL_GetTick>
 80065c2:	4603      	mov	r3, r0
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	4b15      	ldr	r3, [pc, #84]	; (800661c <performSingleRefCalibration+0x78>)
 80065c8:	801a      	strh	r2, [r3, #0]
	while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80065ca:	e011      	b.n	80065f0 <performSingleRefCalibration+0x4c>
	{
		if (checkTimeoutExpired()) { return false; }
 80065cc:	4b14      	ldr	r3, [pc, #80]	; (8006620 <performSingleRefCalibration+0x7c>)
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00d      	beq.n	80065f0 <performSingleRefCalibration+0x4c>
 80065d4:	f7fb fb6e 	bl	8001cb4 <HAL_GetTick>
 80065d8:	4603      	mov	r3, r0
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	4b0f      	ldr	r3, [pc, #60]	; (800661c <performSingleRefCalibration+0x78>)
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	4a0e      	ldr	r2, [pc, #56]	; (8006620 <performSingleRefCalibration+0x7c>)
 80065e6:	8812      	ldrh	r2, [r2, #0]
 80065e8:	4293      	cmp	r3, r2
 80065ea:	dd01      	ble.n	80065f0 <performSingleRefCalibration+0x4c>
 80065ec:	2300      	movs	r3, #0
 80065ee:	e010      	b.n	8006612 <performSingleRefCalibration+0x6e>
	while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80065f0:	2013      	movs	r0, #19
 80065f2:	f7ff f853 	bl	800569c <readReg>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0e5      	beq.n	80065cc <performSingleRefCalibration+0x28>
	}

	writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8006600:	2101      	movs	r1, #1
 8006602:	200b      	movs	r0, #11
 8006604:	f7fe fff6 	bl	80055f4 <writeReg>

	writeReg(SYSRANGE_START, 0x00);
 8006608:	2100      	movs	r1, #0
 800660a:	2000      	movs	r0, #0
 800660c:	f7fe fff2 	bl	80055f4 <writeReg>

	return true;
 8006610:	2301      	movs	r3, #1
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	200002ae 	.word	0x200002ae
 8006620:	200002ac 	.word	0x200002ac

08006624 <__errno>:
 8006624:	4b01      	ldr	r3, [pc, #4]	; (800662c <__errno+0x8>)
 8006626:	6818      	ldr	r0, [r3, #0]
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	2000000c 	.word	0x2000000c

08006630 <__libc_init_array>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	4d0d      	ldr	r5, [pc, #52]	; (8006668 <__libc_init_array+0x38>)
 8006634:	4c0d      	ldr	r4, [pc, #52]	; (800666c <__libc_init_array+0x3c>)
 8006636:	1b64      	subs	r4, r4, r5
 8006638:	10a4      	asrs	r4, r4, #2
 800663a:	2600      	movs	r6, #0
 800663c:	42a6      	cmp	r6, r4
 800663e:	d109      	bne.n	8006654 <__libc_init_array+0x24>
 8006640:	4d0b      	ldr	r5, [pc, #44]	; (8006670 <__libc_init_array+0x40>)
 8006642:	4c0c      	ldr	r4, [pc, #48]	; (8006674 <__libc_init_array+0x44>)
 8006644:	f001 fa00 	bl	8007a48 <_init>
 8006648:	1b64      	subs	r4, r4, r5
 800664a:	10a4      	asrs	r4, r4, #2
 800664c:	2600      	movs	r6, #0
 800664e:	42a6      	cmp	r6, r4
 8006650:	d105      	bne.n	800665e <__libc_init_array+0x2e>
 8006652:	bd70      	pop	{r4, r5, r6, pc}
 8006654:	f855 3b04 	ldr.w	r3, [r5], #4
 8006658:	4798      	blx	r3
 800665a:	3601      	adds	r6, #1
 800665c:	e7ee      	b.n	800663c <__libc_init_array+0xc>
 800665e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006662:	4798      	blx	r3
 8006664:	3601      	adds	r6, #1
 8006666:	e7f2      	b.n	800664e <__libc_init_array+0x1e>
 8006668:	08007b3c 	.word	0x08007b3c
 800666c:	08007b3c 	.word	0x08007b3c
 8006670:	08007b3c 	.word	0x08007b3c
 8006674:	08007b40 	.word	0x08007b40

08006678 <memcpy>:
 8006678:	440a      	add	r2, r1
 800667a:	4291      	cmp	r1, r2
 800667c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006680:	d100      	bne.n	8006684 <memcpy+0xc>
 8006682:	4770      	bx	lr
 8006684:	b510      	push	{r4, lr}
 8006686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800668a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800668e:	4291      	cmp	r1, r2
 8006690:	d1f9      	bne.n	8006686 <memcpy+0xe>
 8006692:	bd10      	pop	{r4, pc}

08006694 <memset>:
 8006694:	4402      	add	r2, r0
 8006696:	4603      	mov	r3, r0
 8006698:	4293      	cmp	r3, r2
 800669a:	d100      	bne.n	800669e <memset+0xa>
 800669c:	4770      	bx	lr
 800669e:	f803 1b01 	strb.w	r1, [r3], #1
 80066a2:	e7f9      	b.n	8006698 <memset+0x4>

080066a4 <iprintf>:
 80066a4:	b40f      	push	{r0, r1, r2, r3}
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <iprintf+0x2c>)
 80066a8:	b513      	push	{r0, r1, r4, lr}
 80066aa:	681c      	ldr	r4, [r3, #0]
 80066ac:	b124      	cbz	r4, 80066b8 <iprintf+0x14>
 80066ae:	69a3      	ldr	r3, [r4, #24]
 80066b0:	b913      	cbnz	r3, 80066b8 <iprintf+0x14>
 80066b2:	4620      	mov	r0, r4
 80066b4:	f000 fa7e 	bl	8006bb4 <__sinit>
 80066b8:	ab05      	add	r3, sp, #20
 80066ba:	9a04      	ldr	r2, [sp, #16]
 80066bc:	68a1      	ldr	r1, [r4, #8]
 80066be:	9301      	str	r3, [sp, #4]
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 fde3 	bl	800728c <_vfiprintf_r>
 80066c6:	b002      	add	sp, #8
 80066c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066cc:	b004      	add	sp, #16
 80066ce:	4770      	bx	lr
 80066d0:	2000000c 	.word	0x2000000c

080066d4 <_puts_r>:
 80066d4:	b570      	push	{r4, r5, r6, lr}
 80066d6:	460e      	mov	r6, r1
 80066d8:	4605      	mov	r5, r0
 80066da:	b118      	cbz	r0, 80066e4 <_puts_r+0x10>
 80066dc:	6983      	ldr	r3, [r0, #24]
 80066de:	b90b      	cbnz	r3, 80066e4 <_puts_r+0x10>
 80066e0:	f000 fa68 	bl	8006bb4 <__sinit>
 80066e4:	69ab      	ldr	r3, [r5, #24]
 80066e6:	68ac      	ldr	r4, [r5, #8]
 80066e8:	b913      	cbnz	r3, 80066f0 <_puts_r+0x1c>
 80066ea:	4628      	mov	r0, r5
 80066ec:	f000 fa62 	bl	8006bb4 <__sinit>
 80066f0:	4b2c      	ldr	r3, [pc, #176]	; (80067a4 <_puts_r+0xd0>)
 80066f2:	429c      	cmp	r4, r3
 80066f4:	d120      	bne.n	8006738 <_puts_r+0x64>
 80066f6:	686c      	ldr	r4, [r5, #4]
 80066f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066fa:	07db      	lsls	r3, r3, #31
 80066fc:	d405      	bmi.n	800670a <_puts_r+0x36>
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	0598      	lsls	r0, r3, #22
 8006702:	d402      	bmi.n	800670a <_puts_r+0x36>
 8006704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006706:	f000 faf3 	bl	8006cf0 <__retarget_lock_acquire_recursive>
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	0719      	lsls	r1, r3, #28
 800670e:	d51d      	bpl.n	800674c <_puts_r+0x78>
 8006710:	6923      	ldr	r3, [r4, #16]
 8006712:	b1db      	cbz	r3, 800674c <_puts_r+0x78>
 8006714:	3e01      	subs	r6, #1
 8006716:	68a3      	ldr	r3, [r4, #8]
 8006718:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800671c:	3b01      	subs	r3, #1
 800671e:	60a3      	str	r3, [r4, #8]
 8006720:	bb39      	cbnz	r1, 8006772 <_puts_r+0x9e>
 8006722:	2b00      	cmp	r3, #0
 8006724:	da38      	bge.n	8006798 <_puts_r+0xc4>
 8006726:	4622      	mov	r2, r4
 8006728:	210a      	movs	r1, #10
 800672a:	4628      	mov	r0, r5
 800672c:	f000 f868 	bl	8006800 <__swbuf_r>
 8006730:	3001      	adds	r0, #1
 8006732:	d011      	beq.n	8006758 <_puts_r+0x84>
 8006734:	250a      	movs	r5, #10
 8006736:	e011      	b.n	800675c <_puts_r+0x88>
 8006738:	4b1b      	ldr	r3, [pc, #108]	; (80067a8 <_puts_r+0xd4>)
 800673a:	429c      	cmp	r4, r3
 800673c:	d101      	bne.n	8006742 <_puts_r+0x6e>
 800673e:	68ac      	ldr	r4, [r5, #8]
 8006740:	e7da      	b.n	80066f8 <_puts_r+0x24>
 8006742:	4b1a      	ldr	r3, [pc, #104]	; (80067ac <_puts_r+0xd8>)
 8006744:	429c      	cmp	r4, r3
 8006746:	bf08      	it	eq
 8006748:	68ec      	ldreq	r4, [r5, #12]
 800674a:	e7d5      	b.n	80066f8 <_puts_r+0x24>
 800674c:	4621      	mov	r1, r4
 800674e:	4628      	mov	r0, r5
 8006750:	f000 f8a8 	bl	80068a4 <__swsetup_r>
 8006754:	2800      	cmp	r0, #0
 8006756:	d0dd      	beq.n	8006714 <_puts_r+0x40>
 8006758:	f04f 35ff 	mov.w	r5, #4294967295
 800675c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800675e:	07da      	lsls	r2, r3, #31
 8006760:	d405      	bmi.n	800676e <_puts_r+0x9a>
 8006762:	89a3      	ldrh	r3, [r4, #12]
 8006764:	059b      	lsls	r3, r3, #22
 8006766:	d402      	bmi.n	800676e <_puts_r+0x9a>
 8006768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800676a:	f000 fac2 	bl	8006cf2 <__retarget_lock_release_recursive>
 800676e:	4628      	mov	r0, r5
 8006770:	bd70      	pop	{r4, r5, r6, pc}
 8006772:	2b00      	cmp	r3, #0
 8006774:	da04      	bge.n	8006780 <_puts_r+0xac>
 8006776:	69a2      	ldr	r2, [r4, #24]
 8006778:	429a      	cmp	r2, r3
 800677a:	dc06      	bgt.n	800678a <_puts_r+0xb6>
 800677c:	290a      	cmp	r1, #10
 800677e:	d004      	beq.n	800678a <_puts_r+0xb6>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	6022      	str	r2, [r4, #0]
 8006786:	7019      	strb	r1, [r3, #0]
 8006788:	e7c5      	b.n	8006716 <_puts_r+0x42>
 800678a:	4622      	mov	r2, r4
 800678c:	4628      	mov	r0, r5
 800678e:	f000 f837 	bl	8006800 <__swbuf_r>
 8006792:	3001      	adds	r0, #1
 8006794:	d1bf      	bne.n	8006716 <_puts_r+0x42>
 8006796:	e7df      	b.n	8006758 <_puts_r+0x84>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	250a      	movs	r5, #10
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	6022      	str	r2, [r4, #0]
 80067a0:	701d      	strb	r5, [r3, #0]
 80067a2:	e7db      	b.n	800675c <_puts_r+0x88>
 80067a4:	08007ac0 	.word	0x08007ac0
 80067a8:	08007ae0 	.word	0x08007ae0
 80067ac:	08007aa0 	.word	0x08007aa0

080067b0 <puts>:
 80067b0:	4b02      	ldr	r3, [pc, #8]	; (80067bc <puts+0xc>)
 80067b2:	4601      	mov	r1, r0
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	f7ff bf8d 	b.w	80066d4 <_puts_r>
 80067ba:	bf00      	nop
 80067bc:	2000000c 	.word	0x2000000c

080067c0 <siprintf>:
 80067c0:	b40e      	push	{r1, r2, r3}
 80067c2:	b500      	push	{lr}
 80067c4:	b09c      	sub	sp, #112	; 0x70
 80067c6:	ab1d      	add	r3, sp, #116	; 0x74
 80067c8:	9002      	str	r0, [sp, #8]
 80067ca:	9006      	str	r0, [sp, #24]
 80067cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067d0:	4809      	ldr	r0, [pc, #36]	; (80067f8 <siprintf+0x38>)
 80067d2:	9107      	str	r1, [sp, #28]
 80067d4:	9104      	str	r1, [sp, #16]
 80067d6:	4909      	ldr	r1, [pc, #36]	; (80067fc <siprintf+0x3c>)
 80067d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067dc:	9105      	str	r1, [sp, #20]
 80067de:	6800      	ldr	r0, [r0, #0]
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	a902      	add	r1, sp, #8
 80067e4:	f000 fc28 	bl	8007038 <_svfiprintf_r>
 80067e8:	9b02      	ldr	r3, [sp, #8]
 80067ea:	2200      	movs	r2, #0
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	b01c      	add	sp, #112	; 0x70
 80067f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067f4:	b003      	add	sp, #12
 80067f6:	4770      	bx	lr
 80067f8:	2000000c 	.word	0x2000000c
 80067fc:	ffff0208 	.word	0xffff0208

08006800 <__swbuf_r>:
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006802:	460e      	mov	r6, r1
 8006804:	4614      	mov	r4, r2
 8006806:	4605      	mov	r5, r0
 8006808:	b118      	cbz	r0, 8006812 <__swbuf_r+0x12>
 800680a:	6983      	ldr	r3, [r0, #24]
 800680c:	b90b      	cbnz	r3, 8006812 <__swbuf_r+0x12>
 800680e:	f000 f9d1 	bl	8006bb4 <__sinit>
 8006812:	4b21      	ldr	r3, [pc, #132]	; (8006898 <__swbuf_r+0x98>)
 8006814:	429c      	cmp	r4, r3
 8006816:	d12b      	bne.n	8006870 <__swbuf_r+0x70>
 8006818:	686c      	ldr	r4, [r5, #4]
 800681a:	69a3      	ldr	r3, [r4, #24]
 800681c:	60a3      	str	r3, [r4, #8]
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	071a      	lsls	r2, r3, #28
 8006822:	d52f      	bpl.n	8006884 <__swbuf_r+0x84>
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	b36b      	cbz	r3, 8006884 <__swbuf_r+0x84>
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	6820      	ldr	r0, [r4, #0]
 800682c:	1ac0      	subs	r0, r0, r3
 800682e:	6963      	ldr	r3, [r4, #20]
 8006830:	b2f6      	uxtb	r6, r6
 8006832:	4283      	cmp	r3, r0
 8006834:	4637      	mov	r7, r6
 8006836:	dc04      	bgt.n	8006842 <__swbuf_r+0x42>
 8006838:	4621      	mov	r1, r4
 800683a:	4628      	mov	r0, r5
 800683c:	f000 f926 	bl	8006a8c <_fflush_r>
 8006840:	bb30      	cbnz	r0, 8006890 <__swbuf_r+0x90>
 8006842:	68a3      	ldr	r3, [r4, #8]
 8006844:	3b01      	subs	r3, #1
 8006846:	60a3      	str	r3, [r4, #8]
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	6022      	str	r2, [r4, #0]
 800684e:	701e      	strb	r6, [r3, #0]
 8006850:	6963      	ldr	r3, [r4, #20]
 8006852:	3001      	adds	r0, #1
 8006854:	4283      	cmp	r3, r0
 8006856:	d004      	beq.n	8006862 <__swbuf_r+0x62>
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	07db      	lsls	r3, r3, #31
 800685c:	d506      	bpl.n	800686c <__swbuf_r+0x6c>
 800685e:	2e0a      	cmp	r6, #10
 8006860:	d104      	bne.n	800686c <__swbuf_r+0x6c>
 8006862:	4621      	mov	r1, r4
 8006864:	4628      	mov	r0, r5
 8006866:	f000 f911 	bl	8006a8c <_fflush_r>
 800686a:	b988      	cbnz	r0, 8006890 <__swbuf_r+0x90>
 800686c:	4638      	mov	r0, r7
 800686e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <__swbuf_r+0x9c>)
 8006872:	429c      	cmp	r4, r3
 8006874:	d101      	bne.n	800687a <__swbuf_r+0x7a>
 8006876:	68ac      	ldr	r4, [r5, #8]
 8006878:	e7cf      	b.n	800681a <__swbuf_r+0x1a>
 800687a:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <__swbuf_r+0xa0>)
 800687c:	429c      	cmp	r4, r3
 800687e:	bf08      	it	eq
 8006880:	68ec      	ldreq	r4, [r5, #12]
 8006882:	e7ca      	b.n	800681a <__swbuf_r+0x1a>
 8006884:	4621      	mov	r1, r4
 8006886:	4628      	mov	r0, r5
 8006888:	f000 f80c 	bl	80068a4 <__swsetup_r>
 800688c:	2800      	cmp	r0, #0
 800688e:	d0cb      	beq.n	8006828 <__swbuf_r+0x28>
 8006890:	f04f 37ff 	mov.w	r7, #4294967295
 8006894:	e7ea      	b.n	800686c <__swbuf_r+0x6c>
 8006896:	bf00      	nop
 8006898:	08007ac0 	.word	0x08007ac0
 800689c:	08007ae0 	.word	0x08007ae0
 80068a0:	08007aa0 	.word	0x08007aa0

080068a4 <__swsetup_r>:
 80068a4:	4b32      	ldr	r3, [pc, #200]	; (8006970 <__swsetup_r+0xcc>)
 80068a6:	b570      	push	{r4, r5, r6, lr}
 80068a8:	681d      	ldr	r5, [r3, #0]
 80068aa:	4606      	mov	r6, r0
 80068ac:	460c      	mov	r4, r1
 80068ae:	b125      	cbz	r5, 80068ba <__swsetup_r+0x16>
 80068b0:	69ab      	ldr	r3, [r5, #24]
 80068b2:	b913      	cbnz	r3, 80068ba <__swsetup_r+0x16>
 80068b4:	4628      	mov	r0, r5
 80068b6:	f000 f97d 	bl	8006bb4 <__sinit>
 80068ba:	4b2e      	ldr	r3, [pc, #184]	; (8006974 <__swsetup_r+0xd0>)
 80068bc:	429c      	cmp	r4, r3
 80068be:	d10f      	bne.n	80068e0 <__swsetup_r+0x3c>
 80068c0:	686c      	ldr	r4, [r5, #4]
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068c8:	0719      	lsls	r1, r3, #28
 80068ca:	d42c      	bmi.n	8006926 <__swsetup_r+0x82>
 80068cc:	06dd      	lsls	r5, r3, #27
 80068ce:	d411      	bmi.n	80068f4 <__swsetup_r+0x50>
 80068d0:	2309      	movs	r3, #9
 80068d2:	6033      	str	r3, [r6, #0]
 80068d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068d8:	81a3      	strh	r3, [r4, #12]
 80068da:	f04f 30ff 	mov.w	r0, #4294967295
 80068de:	e03e      	b.n	800695e <__swsetup_r+0xba>
 80068e0:	4b25      	ldr	r3, [pc, #148]	; (8006978 <__swsetup_r+0xd4>)
 80068e2:	429c      	cmp	r4, r3
 80068e4:	d101      	bne.n	80068ea <__swsetup_r+0x46>
 80068e6:	68ac      	ldr	r4, [r5, #8]
 80068e8:	e7eb      	b.n	80068c2 <__swsetup_r+0x1e>
 80068ea:	4b24      	ldr	r3, [pc, #144]	; (800697c <__swsetup_r+0xd8>)
 80068ec:	429c      	cmp	r4, r3
 80068ee:	bf08      	it	eq
 80068f0:	68ec      	ldreq	r4, [r5, #12]
 80068f2:	e7e6      	b.n	80068c2 <__swsetup_r+0x1e>
 80068f4:	0758      	lsls	r0, r3, #29
 80068f6:	d512      	bpl.n	800691e <__swsetup_r+0x7a>
 80068f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068fa:	b141      	cbz	r1, 800690e <__swsetup_r+0x6a>
 80068fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006900:	4299      	cmp	r1, r3
 8006902:	d002      	beq.n	800690a <__swsetup_r+0x66>
 8006904:	4630      	mov	r0, r6
 8006906:	f000 fa5b 	bl	8006dc0 <_free_r>
 800690a:	2300      	movs	r3, #0
 800690c:	6363      	str	r3, [r4, #52]	; 0x34
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006914:	81a3      	strh	r3, [r4, #12]
 8006916:	2300      	movs	r3, #0
 8006918:	6063      	str	r3, [r4, #4]
 800691a:	6923      	ldr	r3, [r4, #16]
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	f043 0308 	orr.w	r3, r3, #8
 8006924:	81a3      	strh	r3, [r4, #12]
 8006926:	6923      	ldr	r3, [r4, #16]
 8006928:	b94b      	cbnz	r3, 800693e <__swsetup_r+0x9a>
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006934:	d003      	beq.n	800693e <__swsetup_r+0x9a>
 8006936:	4621      	mov	r1, r4
 8006938:	4630      	mov	r0, r6
 800693a:	f000 fa01 	bl	8006d40 <__smakebuf_r>
 800693e:	89a0      	ldrh	r0, [r4, #12]
 8006940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006944:	f010 0301 	ands.w	r3, r0, #1
 8006948:	d00a      	beq.n	8006960 <__swsetup_r+0xbc>
 800694a:	2300      	movs	r3, #0
 800694c:	60a3      	str	r3, [r4, #8]
 800694e:	6963      	ldr	r3, [r4, #20]
 8006950:	425b      	negs	r3, r3
 8006952:	61a3      	str	r3, [r4, #24]
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	b943      	cbnz	r3, 800696a <__swsetup_r+0xc6>
 8006958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800695c:	d1ba      	bne.n	80068d4 <__swsetup_r+0x30>
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	0781      	lsls	r1, r0, #30
 8006962:	bf58      	it	pl
 8006964:	6963      	ldrpl	r3, [r4, #20]
 8006966:	60a3      	str	r3, [r4, #8]
 8006968:	e7f4      	b.n	8006954 <__swsetup_r+0xb0>
 800696a:	2000      	movs	r0, #0
 800696c:	e7f7      	b.n	800695e <__swsetup_r+0xba>
 800696e:	bf00      	nop
 8006970:	2000000c 	.word	0x2000000c
 8006974:	08007ac0 	.word	0x08007ac0
 8006978:	08007ae0 	.word	0x08007ae0
 800697c:	08007aa0 	.word	0x08007aa0

08006980 <__sflush_r>:
 8006980:	898a      	ldrh	r2, [r1, #12]
 8006982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006986:	4605      	mov	r5, r0
 8006988:	0710      	lsls	r0, r2, #28
 800698a:	460c      	mov	r4, r1
 800698c:	d458      	bmi.n	8006a40 <__sflush_r+0xc0>
 800698e:	684b      	ldr	r3, [r1, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	dc05      	bgt.n	80069a0 <__sflush_r+0x20>
 8006994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	dc02      	bgt.n	80069a0 <__sflush_r+0x20>
 800699a:	2000      	movs	r0, #0
 800699c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069a2:	2e00      	cmp	r6, #0
 80069a4:	d0f9      	beq.n	800699a <__sflush_r+0x1a>
 80069a6:	2300      	movs	r3, #0
 80069a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069ac:	682f      	ldr	r7, [r5, #0]
 80069ae:	602b      	str	r3, [r5, #0]
 80069b0:	d032      	beq.n	8006a18 <__sflush_r+0x98>
 80069b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069b4:	89a3      	ldrh	r3, [r4, #12]
 80069b6:	075a      	lsls	r2, r3, #29
 80069b8:	d505      	bpl.n	80069c6 <__sflush_r+0x46>
 80069ba:	6863      	ldr	r3, [r4, #4]
 80069bc:	1ac0      	subs	r0, r0, r3
 80069be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069c0:	b10b      	cbz	r3, 80069c6 <__sflush_r+0x46>
 80069c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069c4:	1ac0      	subs	r0, r0, r3
 80069c6:	2300      	movs	r3, #0
 80069c8:	4602      	mov	r2, r0
 80069ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069cc:	6a21      	ldr	r1, [r4, #32]
 80069ce:	4628      	mov	r0, r5
 80069d0:	47b0      	blx	r6
 80069d2:	1c43      	adds	r3, r0, #1
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	d106      	bne.n	80069e6 <__sflush_r+0x66>
 80069d8:	6829      	ldr	r1, [r5, #0]
 80069da:	291d      	cmp	r1, #29
 80069dc:	d82c      	bhi.n	8006a38 <__sflush_r+0xb8>
 80069de:	4a2a      	ldr	r2, [pc, #168]	; (8006a88 <__sflush_r+0x108>)
 80069e0:	40ca      	lsrs	r2, r1
 80069e2:	07d6      	lsls	r6, r2, #31
 80069e4:	d528      	bpl.n	8006a38 <__sflush_r+0xb8>
 80069e6:	2200      	movs	r2, #0
 80069e8:	6062      	str	r2, [r4, #4]
 80069ea:	04d9      	lsls	r1, r3, #19
 80069ec:	6922      	ldr	r2, [r4, #16]
 80069ee:	6022      	str	r2, [r4, #0]
 80069f0:	d504      	bpl.n	80069fc <__sflush_r+0x7c>
 80069f2:	1c42      	adds	r2, r0, #1
 80069f4:	d101      	bne.n	80069fa <__sflush_r+0x7a>
 80069f6:	682b      	ldr	r3, [r5, #0]
 80069f8:	b903      	cbnz	r3, 80069fc <__sflush_r+0x7c>
 80069fa:	6560      	str	r0, [r4, #84]	; 0x54
 80069fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069fe:	602f      	str	r7, [r5, #0]
 8006a00:	2900      	cmp	r1, #0
 8006a02:	d0ca      	beq.n	800699a <__sflush_r+0x1a>
 8006a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a08:	4299      	cmp	r1, r3
 8006a0a:	d002      	beq.n	8006a12 <__sflush_r+0x92>
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f000 f9d7 	bl	8006dc0 <_free_r>
 8006a12:	2000      	movs	r0, #0
 8006a14:	6360      	str	r0, [r4, #52]	; 0x34
 8006a16:	e7c1      	b.n	800699c <__sflush_r+0x1c>
 8006a18:	6a21      	ldr	r1, [r4, #32]
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	47b0      	blx	r6
 8006a20:	1c41      	adds	r1, r0, #1
 8006a22:	d1c7      	bne.n	80069b4 <__sflush_r+0x34>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0c4      	beq.n	80069b4 <__sflush_r+0x34>
 8006a2a:	2b1d      	cmp	r3, #29
 8006a2c:	d001      	beq.n	8006a32 <__sflush_r+0xb2>
 8006a2e:	2b16      	cmp	r3, #22
 8006a30:	d101      	bne.n	8006a36 <__sflush_r+0xb6>
 8006a32:	602f      	str	r7, [r5, #0]
 8006a34:	e7b1      	b.n	800699a <__sflush_r+0x1a>
 8006a36:	89a3      	ldrh	r3, [r4, #12]
 8006a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	e7ad      	b.n	800699c <__sflush_r+0x1c>
 8006a40:	690f      	ldr	r7, [r1, #16]
 8006a42:	2f00      	cmp	r7, #0
 8006a44:	d0a9      	beq.n	800699a <__sflush_r+0x1a>
 8006a46:	0793      	lsls	r3, r2, #30
 8006a48:	680e      	ldr	r6, [r1, #0]
 8006a4a:	bf08      	it	eq
 8006a4c:	694b      	ldreq	r3, [r1, #20]
 8006a4e:	600f      	str	r7, [r1, #0]
 8006a50:	bf18      	it	ne
 8006a52:	2300      	movne	r3, #0
 8006a54:	eba6 0807 	sub.w	r8, r6, r7
 8006a58:	608b      	str	r3, [r1, #8]
 8006a5a:	f1b8 0f00 	cmp.w	r8, #0
 8006a5e:	dd9c      	ble.n	800699a <__sflush_r+0x1a>
 8006a60:	6a21      	ldr	r1, [r4, #32]
 8006a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a64:	4643      	mov	r3, r8
 8006a66:	463a      	mov	r2, r7
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b0      	blx	r6
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	dc06      	bgt.n	8006a7e <__sflush_r+0xfe>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a76:	81a3      	strh	r3, [r4, #12]
 8006a78:	f04f 30ff 	mov.w	r0, #4294967295
 8006a7c:	e78e      	b.n	800699c <__sflush_r+0x1c>
 8006a7e:	4407      	add	r7, r0
 8006a80:	eba8 0800 	sub.w	r8, r8, r0
 8006a84:	e7e9      	b.n	8006a5a <__sflush_r+0xda>
 8006a86:	bf00      	nop
 8006a88:	20400001 	.word	0x20400001

08006a8c <_fflush_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	690b      	ldr	r3, [r1, #16]
 8006a90:	4605      	mov	r5, r0
 8006a92:	460c      	mov	r4, r1
 8006a94:	b913      	cbnz	r3, 8006a9c <_fflush_r+0x10>
 8006a96:	2500      	movs	r5, #0
 8006a98:	4628      	mov	r0, r5
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	b118      	cbz	r0, 8006aa6 <_fflush_r+0x1a>
 8006a9e:	6983      	ldr	r3, [r0, #24]
 8006aa0:	b90b      	cbnz	r3, 8006aa6 <_fflush_r+0x1a>
 8006aa2:	f000 f887 	bl	8006bb4 <__sinit>
 8006aa6:	4b14      	ldr	r3, [pc, #80]	; (8006af8 <_fflush_r+0x6c>)
 8006aa8:	429c      	cmp	r4, r3
 8006aaa:	d11b      	bne.n	8006ae4 <_fflush_r+0x58>
 8006aac:	686c      	ldr	r4, [r5, #4]
 8006aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0ef      	beq.n	8006a96 <_fflush_r+0xa>
 8006ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ab8:	07d0      	lsls	r0, r2, #31
 8006aba:	d404      	bmi.n	8006ac6 <_fflush_r+0x3a>
 8006abc:	0599      	lsls	r1, r3, #22
 8006abe:	d402      	bmi.n	8006ac6 <_fflush_r+0x3a>
 8006ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ac2:	f000 f915 	bl	8006cf0 <__retarget_lock_acquire_recursive>
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	4621      	mov	r1, r4
 8006aca:	f7ff ff59 	bl	8006980 <__sflush_r>
 8006ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ad0:	07da      	lsls	r2, r3, #31
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	d4e0      	bmi.n	8006a98 <_fflush_r+0xc>
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	059b      	lsls	r3, r3, #22
 8006ada:	d4dd      	bmi.n	8006a98 <_fflush_r+0xc>
 8006adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ade:	f000 f908 	bl	8006cf2 <__retarget_lock_release_recursive>
 8006ae2:	e7d9      	b.n	8006a98 <_fflush_r+0xc>
 8006ae4:	4b05      	ldr	r3, [pc, #20]	; (8006afc <_fflush_r+0x70>)
 8006ae6:	429c      	cmp	r4, r3
 8006ae8:	d101      	bne.n	8006aee <_fflush_r+0x62>
 8006aea:	68ac      	ldr	r4, [r5, #8]
 8006aec:	e7df      	b.n	8006aae <_fflush_r+0x22>
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <_fflush_r+0x74>)
 8006af0:	429c      	cmp	r4, r3
 8006af2:	bf08      	it	eq
 8006af4:	68ec      	ldreq	r4, [r5, #12]
 8006af6:	e7da      	b.n	8006aae <_fflush_r+0x22>
 8006af8:	08007ac0 	.word	0x08007ac0
 8006afc:	08007ae0 	.word	0x08007ae0
 8006b00:	08007aa0 	.word	0x08007aa0

08006b04 <std>:
 8006b04:	2300      	movs	r3, #0
 8006b06:	b510      	push	{r4, lr}
 8006b08:	4604      	mov	r4, r0
 8006b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b12:	6083      	str	r3, [r0, #8]
 8006b14:	8181      	strh	r1, [r0, #12]
 8006b16:	6643      	str	r3, [r0, #100]	; 0x64
 8006b18:	81c2      	strh	r2, [r0, #14]
 8006b1a:	6183      	str	r3, [r0, #24]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	2208      	movs	r2, #8
 8006b20:	305c      	adds	r0, #92	; 0x5c
 8006b22:	f7ff fdb7 	bl	8006694 <memset>
 8006b26:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <std+0x38>)
 8006b28:	6263      	str	r3, [r4, #36]	; 0x24
 8006b2a:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <std+0x3c>)
 8006b2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <std+0x40>)
 8006b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <std+0x44>)
 8006b34:	6224      	str	r4, [r4, #32]
 8006b36:	6323      	str	r3, [r4, #48]	; 0x30
 8006b38:	bd10      	pop	{r4, pc}
 8006b3a:	bf00      	nop
 8006b3c:	08007835 	.word	0x08007835
 8006b40:	08007857 	.word	0x08007857
 8006b44:	0800788f 	.word	0x0800788f
 8006b48:	080078b3 	.word	0x080078b3

08006b4c <_cleanup_r>:
 8006b4c:	4901      	ldr	r1, [pc, #4]	; (8006b54 <_cleanup_r+0x8>)
 8006b4e:	f000 b8af 	b.w	8006cb0 <_fwalk_reent>
 8006b52:	bf00      	nop
 8006b54:	08006a8d 	.word	0x08006a8d

08006b58 <__sfmoreglue>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	2268      	movs	r2, #104	; 0x68
 8006b5c:	1e4d      	subs	r5, r1, #1
 8006b5e:	4355      	muls	r5, r2
 8006b60:	460e      	mov	r6, r1
 8006b62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b66:	f000 f997 	bl	8006e98 <_malloc_r>
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	b140      	cbz	r0, 8006b80 <__sfmoreglue+0x28>
 8006b6e:	2100      	movs	r1, #0
 8006b70:	e9c0 1600 	strd	r1, r6, [r0]
 8006b74:	300c      	adds	r0, #12
 8006b76:	60a0      	str	r0, [r4, #8]
 8006b78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b7c:	f7ff fd8a 	bl	8006694 <memset>
 8006b80:	4620      	mov	r0, r4
 8006b82:	bd70      	pop	{r4, r5, r6, pc}

08006b84 <__sfp_lock_acquire>:
 8006b84:	4801      	ldr	r0, [pc, #4]	; (8006b8c <__sfp_lock_acquire+0x8>)
 8006b86:	f000 b8b3 	b.w	8006cf0 <__retarget_lock_acquire_recursive>
 8006b8a:	bf00      	nop
 8006b8c:	20000312 	.word	0x20000312

08006b90 <__sfp_lock_release>:
 8006b90:	4801      	ldr	r0, [pc, #4]	; (8006b98 <__sfp_lock_release+0x8>)
 8006b92:	f000 b8ae 	b.w	8006cf2 <__retarget_lock_release_recursive>
 8006b96:	bf00      	nop
 8006b98:	20000312 	.word	0x20000312

08006b9c <__sinit_lock_acquire>:
 8006b9c:	4801      	ldr	r0, [pc, #4]	; (8006ba4 <__sinit_lock_acquire+0x8>)
 8006b9e:	f000 b8a7 	b.w	8006cf0 <__retarget_lock_acquire_recursive>
 8006ba2:	bf00      	nop
 8006ba4:	20000313 	.word	0x20000313

08006ba8 <__sinit_lock_release>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <__sinit_lock_release+0x8>)
 8006baa:	f000 b8a2 	b.w	8006cf2 <__retarget_lock_release_recursive>
 8006bae:	bf00      	nop
 8006bb0:	20000313 	.word	0x20000313

08006bb4 <__sinit>:
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	f7ff fff0 	bl	8006b9c <__sinit_lock_acquire>
 8006bbc:	69a3      	ldr	r3, [r4, #24]
 8006bbe:	b11b      	cbz	r3, 8006bc8 <__sinit+0x14>
 8006bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc4:	f7ff bff0 	b.w	8006ba8 <__sinit_lock_release>
 8006bc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bcc:	6523      	str	r3, [r4, #80]	; 0x50
 8006bce:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <__sinit+0x68>)
 8006bd0:	4a13      	ldr	r2, [pc, #76]	; (8006c20 <__sinit+0x6c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bd6:	42a3      	cmp	r3, r4
 8006bd8:	bf04      	itt	eq
 8006bda:	2301      	moveq	r3, #1
 8006bdc:	61a3      	streq	r3, [r4, #24]
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 f820 	bl	8006c24 <__sfp>
 8006be4:	6060      	str	r0, [r4, #4]
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 f81c 	bl	8006c24 <__sfp>
 8006bec:	60a0      	str	r0, [r4, #8]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 f818 	bl	8006c24 <__sfp>
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	60e0      	str	r0, [r4, #12]
 8006bf8:	2104      	movs	r1, #4
 8006bfa:	6860      	ldr	r0, [r4, #4]
 8006bfc:	f7ff ff82 	bl	8006b04 <std>
 8006c00:	68a0      	ldr	r0, [r4, #8]
 8006c02:	2201      	movs	r2, #1
 8006c04:	2109      	movs	r1, #9
 8006c06:	f7ff ff7d 	bl	8006b04 <std>
 8006c0a:	68e0      	ldr	r0, [r4, #12]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	2112      	movs	r1, #18
 8006c10:	f7ff ff78 	bl	8006b04 <std>
 8006c14:	2301      	movs	r3, #1
 8006c16:	61a3      	str	r3, [r4, #24]
 8006c18:	e7d2      	b.n	8006bc0 <__sinit+0xc>
 8006c1a:	bf00      	nop
 8006c1c:	08007a9c 	.word	0x08007a9c
 8006c20:	08006b4d 	.word	0x08006b4d

08006c24 <__sfp>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	4607      	mov	r7, r0
 8006c28:	f7ff ffac 	bl	8006b84 <__sfp_lock_acquire>
 8006c2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ca8 <__sfp+0x84>)
 8006c2e:	681e      	ldr	r6, [r3, #0]
 8006c30:	69b3      	ldr	r3, [r6, #24]
 8006c32:	b913      	cbnz	r3, 8006c3a <__sfp+0x16>
 8006c34:	4630      	mov	r0, r6
 8006c36:	f7ff ffbd 	bl	8006bb4 <__sinit>
 8006c3a:	3648      	adds	r6, #72	; 0x48
 8006c3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	d503      	bpl.n	8006c4c <__sfp+0x28>
 8006c44:	6833      	ldr	r3, [r6, #0]
 8006c46:	b30b      	cbz	r3, 8006c8c <__sfp+0x68>
 8006c48:	6836      	ldr	r6, [r6, #0]
 8006c4a:	e7f7      	b.n	8006c3c <__sfp+0x18>
 8006c4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c50:	b9d5      	cbnz	r5, 8006c88 <__sfp+0x64>
 8006c52:	4b16      	ldr	r3, [pc, #88]	; (8006cac <__sfp+0x88>)
 8006c54:	60e3      	str	r3, [r4, #12]
 8006c56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c5a:	6665      	str	r5, [r4, #100]	; 0x64
 8006c5c:	f000 f847 	bl	8006cee <__retarget_lock_init_recursive>
 8006c60:	f7ff ff96 	bl	8006b90 <__sfp_lock_release>
 8006c64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c6c:	6025      	str	r5, [r4, #0]
 8006c6e:	61a5      	str	r5, [r4, #24]
 8006c70:	2208      	movs	r2, #8
 8006c72:	4629      	mov	r1, r5
 8006c74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c78:	f7ff fd0c 	bl	8006694 <memset>
 8006c7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c84:	4620      	mov	r0, r4
 8006c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c88:	3468      	adds	r4, #104	; 0x68
 8006c8a:	e7d9      	b.n	8006c40 <__sfp+0x1c>
 8006c8c:	2104      	movs	r1, #4
 8006c8e:	4638      	mov	r0, r7
 8006c90:	f7ff ff62 	bl	8006b58 <__sfmoreglue>
 8006c94:	4604      	mov	r4, r0
 8006c96:	6030      	str	r0, [r6, #0]
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d1d5      	bne.n	8006c48 <__sfp+0x24>
 8006c9c:	f7ff ff78 	bl	8006b90 <__sfp_lock_release>
 8006ca0:	230c      	movs	r3, #12
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	e7ee      	b.n	8006c84 <__sfp+0x60>
 8006ca6:	bf00      	nop
 8006ca8:	08007a9c 	.word	0x08007a9c
 8006cac:	ffff0001 	.word	0xffff0001

08006cb0 <_fwalk_reent>:
 8006cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	4688      	mov	r8, r1
 8006cb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cbc:	2700      	movs	r7, #0
 8006cbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cc2:	f1b9 0901 	subs.w	r9, r9, #1
 8006cc6:	d505      	bpl.n	8006cd4 <_fwalk_reent+0x24>
 8006cc8:	6824      	ldr	r4, [r4, #0]
 8006cca:	2c00      	cmp	r4, #0
 8006ccc:	d1f7      	bne.n	8006cbe <_fwalk_reent+0xe>
 8006cce:	4638      	mov	r0, r7
 8006cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cd4:	89ab      	ldrh	r3, [r5, #12]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d907      	bls.n	8006cea <_fwalk_reent+0x3a>
 8006cda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	d003      	beq.n	8006cea <_fwalk_reent+0x3a>
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	47c0      	blx	r8
 8006ce8:	4307      	orrs	r7, r0
 8006cea:	3568      	adds	r5, #104	; 0x68
 8006cec:	e7e9      	b.n	8006cc2 <_fwalk_reent+0x12>

08006cee <__retarget_lock_init_recursive>:
 8006cee:	4770      	bx	lr

08006cf0 <__retarget_lock_acquire_recursive>:
 8006cf0:	4770      	bx	lr

08006cf2 <__retarget_lock_release_recursive>:
 8006cf2:	4770      	bx	lr

08006cf4 <__swhatbuf_r>:
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	460e      	mov	r6, r1
 8006cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	b096      	sub	sp, #88	; 0x58
 8006d00:	4614      	mov	r4, r2
 8006d02:	461d      	mov	r5, r3
 8006d04:	da08      	bge.n	8006d18 <__swhatbuf_r+0x24>
 8006d06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	602a      	str	r2, [r5, #0]
 8006d0e:	061a      	lsls	r2, r3, #24
 8006d10:	d410      	bmi.n	8006d34 <__swhatbuf_r+0x40>
 8006d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d16:	e00e      	b.n	8006d36 <__swhatbuf_r+0x42>
 8006d18:	466a      	mov	r2, sp
 8006d1a:	f000 fdf1 	bl	8007900 <_fstat_r>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	dbf1      	blt.n	8006d06 <__swhatbuf_r+0x12>
 8006d22:	9a01      	ldr	r2, [sp, #4]
 8006d24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d2c:	425a      	negs	r2, r3
 8006d2e:	415a      	adcs	r2, r3
 8006d30:	602a      	str	r2, [r5, #0]
 8006d32:	e7ee      	b.n	8006d12 <__swhatbuf_r+0x1e>
 8006d34:	2340      	movs	r3, #64	; 0x40
 8006d36:	2000      	movs	r0, #0
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	b016      	add	sp, #88	; 0x58
 8006d3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d40 <__smakebuf_r>:
 8006d40:	898b      	ldrh	r3, [r1, #12]
 8006d42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d44:	079d      	lsls	r5, r3, #30
 8006d46:	4606      	mov	r6, r0
 8006d48:	460c      	mov	r4, r1
 8006d4a:	d507      	bpl.n	8006d5c <__smakebuf_r+0x1c>
 8006d4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	6123      	str	r3, [r4, #16]
 8006d54:	2301      	movs	r3, #1
 8006d56:	6163      	str	r3, [r4, #20]
 8006d58:	b002      	add	sp, #8
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}
 8006d5c:	ab01      	add	r3, sp, #4
 8006d5e:	466a      	mov	r2, sp
 8006d60:	f7ff ffc8 	bl	8006cf4 <__swhatbuf_r>
 8006d64:	9900      	ldr	r1, [sp, #0]
 8006d66:	4605      	mov	r5, r0
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f000 f895 	bl	8006e98 <_malloc_r>
 8006d6e:	b948      	cbnz	r0, 8006d84 <__smakebuf_r+0x44>
 8006d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d74:	059a      	lsls	r2, r3, #22
 8006d76:	d4ef      	bmi.n	8006d58 <__smakebuf_r+0x18>
 8006d78:	f023 0303 	bic.w	r3, r3, #3
 8006d7c:	f043 0302 	orr.w	r3, r3, #2
 8006d80:	81a3      	strh	r3, [r4, #12]
 8006d82:	e7e3      	b.n	8006d4c <__smakebuf_r+0xc>
 8006d84:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <__smakebuf_r+0x7c>)
 8006d86:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d88:	89a3      	ldrh	r3, [r4, #12]
 8006d8a:	6020      	str	r0, [r4, #0]
 8006d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d90:	81a3      	strh	r3, [r4, #12]
 8006d92:	9b00      	ldr	r3, [sp, #0]
 8006d94:	6163      	str	r3, [r4, #20]
 8006d96:	9b01      	ldr	r3, [sp, #4]
 8006d98:	6120      	str	r0, [r4, #16]
 8006d9a:	b15b      	cbz	r3, 8006db4 <__smakebuf_r+0x74>
 8006d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006da0:	4630      	mov	r0, r6
 8006da2:	f000 fdbf 	bl	8007924 <_isatty_r>
 8006da6:	b128      	cbz	r0, 8006db4 <__smakebuf_r+0x74>
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	f023 0303 	bic.w	r3, r3, #3
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	81a3      	strh	r3, [r4, #12]
 8006db4:	89a0      	ldrh	r0, [r4, #12]
 8006db6:	4305      	orrs	r5, r0
 8006db8:	81a5      	strh	r5, [r4, #12]
 8006dba:	e7cd      	b.n	8006d58 <__smakebuf_r+0x18>
 8006dbc:	08006b4d 	.word	0x08006b4d

08006dc0 <_free_r>:
 8006dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dc2:	2900      	cmp	r1, #0
 8006dc4:	d044      	beq.n	8006e50 <_free_r+0x90>
 8006dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dca:	9001      	str	r0, [sp, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f1a1 0404 	sub.w	r4, r1, #4
 8006dd2:	bfb8      	it	lt
 8006dd4:	18e4      	addlt	r4, r4, r3
 8006dd6:	f000 fde1 	bl	800799c <__malloc_lock>
 8006dda:	4a1e      	ldr	r2, [pc, #120]	; (8006e54 <_free_r+0x94>)
 8006ddc:	9801      	ldr	r0, [sp, #4]
 8006dde:	6813      	ldr	r3, [r2, #0]
 8006de0:	b933      	cbnz	r3, 8006df0 <_free_r+0x30>
 8006de2:	6063      	str	r3, [r4, #4]
 8006de4:	6014      	str	r4, [r2, #0]
 8006de6:	b003      	add	sp, #12
 8006de8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dec:	f000 bddc 	b.w	80079a8 <__malloc_unlock>
 8006df0:	42a3      	cmp	r3, r4
 8006df2:	d908      	bls.n	8006e06 <_free_r+0x46>
 8006df4:	6825      	ldr	r5, [r4, #0]
 8006df6:	1961      	adds	r1, r4, r5
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	bf01      	itttt	eq
 8006dfc:	6819      	ldreq	r1, [r3, #0]
 8006dfe:	685b      	ldreq	r3, [r3, #4]
 8006e00:	1949      	addeq	r1, r1, r5
 8006e02:	6021      	streq	r1, [r4, #0]
 8006e04:	e7ed      	b.n	8006de2 <_free_r+0x22>
 8006e06:	461a      	mov	r2, r3
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	b10b      	cbz	r3, 8006e10 <_free_r+0x50>
 8006e0c:	42a3      	cmp	r3, r4
 8006e0e:	d9fa      	bls.n	8006e06 <_free_r+0x46>
 8006e10:	6811      	ldr	r1, [r2, #0]
 8006e12:	1855      	adds	r5, r2, r1
 8006e14:	42a5      	cmp	r5, r4
 8006e16:	d10b      	bne.n	8006e30 <_free_r+0x70>
 8006e18:	6824      	ldr	r4, [r4, #0]
 8006e1a:	4421      	add	r1, r4
 8006e1c:	1854      	adds	r4, r2, r1
 8006e1e:	42a3      	cmp	r3, r4
 8006e20:	6011      	str	r1, [r2, #0]
 8006e22:	d1e0      	bne.n	8006de6 <_free_r+0x26>
 8006e24:	681c      	ldr	r4, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	6053      	str	r3, [r2, #4]
 8006e2a:	4421      	add	r1, r4
 8006e2c:	6011      	str	r1, [r2, #0]
 8006e2e:	e7da      	b.n	8006de6 <_free_r+0x26>
 8006e30:	d902      	bls.n	8006e38 <_free_r+0x78>
 8006e32:	230c      	movs	r3, #12
 8006e34:	6003      	str	r3, [r0, #0]
 8006e36:	e7d6      	b.n	8006de6 <_free_r+0x26>
 8006e38:	6825      	ldr	r5, [r4, #0]
 8006e3a:	1961      	adds	r1, r4, r5
 8006e3c:	428b      	cmp	r3, r1
 8006e3e:	bf04      	itt	eq
 8006e40:	6819      	ldreq	r1, [r3, #0]
 8006e42:	685b      	ldreq	r3, [r3, #4]
 8006e44:	6063      	str	r3, [r4, #4]
 8006e46:	bf04      	itt	eq
 8006e48:	1949      	addeq	r1, r1, r5
 8006e4a:	6021      	streq	r1, [r4, #0]
 8006e4c:	6054      	str	r4, [r2, #4]
 8006e4e:	e7ca      	b.n	8006de6 <_free_r+0x26>
 8006e50:	b003      	add	sp, #12
 8006e52:	bd30      	pop	{r4, r5, pc}
 8006e54:	20000314 	.word	0x20000314

08006e58 <sbrk_aligned>:
 8006e58:	b570      	push	{r4, r5, r6, lr}
 8006e5a:	4e0e      	ldr	r6, [pc, #56]	; (8006e94 <sbrk_aligned+0x3c>)
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	6831      	ldr	r1, [r6, #0]
 8006e60:	4605      	mov	r5, r0
 8006e62:	b911      	cbnz	r1, 8006e6a <sbrk_aligned+0x12>
 8006e64:	f000 fcd6 	bl	8007814 <_sbrk_r>
 8006e68:	6030      	str	r0, [r6, #0]
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f000 fcd1 	bl	8007814 <_sbrk_r>
 8006e72:	1c43      	adds	r3, r0, #1
 8006e74:	d00a      	beq.n	8006e8c <sbrk_aligned+0x34>
 8006e76:	1cc4      	adds	r4, r0, #3
 8006e78:	f024 0403 	bic.w	r4, r4, #3
 8006e7c:	42a0      	cmp	r0, r4
 8006e7e:	d007      	beq.n	8006e90 <sbrk_aligned+0x38>
 8006e80:	1a21      	subs	r1, r4, r0
 8006e82:	4628      	mov	r0, r5
 8006e84:	f000 fcc6 	bl	8007814 <_sbrk_r>
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d101      	bne.n	8006e90 <sbrk_aligned+0x38>
 8006e8c:	f04f 34ff 	mov.w	r4, #4294967295
 8006e90:	4620      	mov	r0, r4
 8006e92:	bd70      	pop	{r4, r5, r6, pc}
 8006e94:	20000318 	.word	0x20000318

08006e98 <_malloc_r>:
 8006e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9c:	1ccd      	adds	r5, r1, #3
 8006e9e:	f025 0503 	bic.w	r5, r5, #3
 8006ea2:	3508      	adds	r5, #8
 8006ea4:	2d0c      	cmp	r5, #12
 8006ea6:	bf38      	it	cc
 8006ea8:	250c      	movcc	r5, #12
 8006eaa:	2d00      	cmp	r5, #0
 8006eac:	4607      	mov	r7, r0
 8006eae:	db01      	blt.n	8006eb4 <_malloc_r+0x1c>
 8006eb0:	42a9      	cmp	r1, r5
 8006eb2:	d905      	bls.n	8006ec0 <_malloc_r+0x28>
 8006eb4:	230c      	movs	r3, #12
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	2600      	movs	r6, #0
 8006eba:	4630      	mov	r0, r6
 8006ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec0:	4e2e      	ldr	r6, [pc, #184]	; (8006f7c <_malloc_r+0xe4>)
 8006ec2:	f000 fd6b 	bl	800799c <__malloc_lock>
 8006ec6:	6833      	ldr	r3, [r6, #0]
 8006ec8:	461c      	mov	r4, r3
 8006eca:	bb34      	cbnz	r4, 8006f1a <_malloc_r+0x82>
 8006ecc:	4629      	mov	r1, r5
 8006ece:	4638      	mov	r0, r7
 8006ed0:	f7ff ffc2 	bl	8006e58 <sbrk_aligned>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	d14d      	bne.n	8006f76 <_malloc_r+0xde>
 8006eda:	6834      	ldr	r4, [r6, #0]
 8006edc:	4626      	mov	r6, r4
 8006ede:	2e00      	cmp	r6, #0
 8006ee0:	d140      	bne.n	8006f64 <_malloc_r+0xcc>
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	eb04 0803 	add.w	r8, r4, r3
 8006eec:	f000 fc92 	bl	8007814 <_sbrk_r>
 8006ef0:	4580      	cmp	r8, r0
 8006ef2:	d13a      	bne.n	8006f6a <_malloc_r+0xd2>
 8006ef4:	6821      	ldr	r1, [r4, #0]
 8006ef6:	3503      	adds	r5, #3
 8006ef8:	1a6d      	subs	r5, r5, r1
 8006efa:	f025 0503 	bic.w	r5, r5, #3
 8006efe:	3508      	adds	r5, #8
 8006f00:	2d0c      	cmp	r5, #12
 8006f02:	bf38      	it	cc
 8006f04:	250c      	movcc	r5, #12
 8006f06:	4629      	mov	r1, r5
 8006f08:	4638      	mov	r0, r7
 8006f0a:	f7ff ffa5 	bl	8006e58 <sbrk_aligned>
 8006f0e:	3001      	adds	r0, #1
 8006f10:	d02b      	beq.n	8006f6a <_malloc_r+0xd2>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	442b      	add	r3, r5
 8006f16:	6023      	str	r3, [r4, #0]
 8006f18:	e00e      	b.n	8006f38 <_malloc_r+0xa0>
 8006f1a:	6822      	ldr	r2, [r4, #0]
 8006f1c:	1b52      	subs	r2, r2, r5
 8006f1e:	d41e      	bmi.n	8006f5e <_malloc_r+0xc6>
 8006f20:	2a0b      	cmp	r2, #11
 8006f22:	d916      	bls.n	8006f52 <_malloc_r+0xba>
 8006f24:	1961      	adds	r1, r4, r5
 8006f26:	42a3      	cmp	r3, r4
 8006f28:	6025      	str	r5, [r4, #0]
 8006f2a:	bf18      	it	ne
 8006f2c:	6059      	strne	r1, [r3, #4]
 8006f2e:	6863      	ldr	r3, [r4, #4]
 8006f30:	bf08      	it	eq
 8006f32:	6031      	streq	r1, [r6, #0]
 8006f34:	5162      	str	r2, [r4, r5]
 8006f36:	604b      	str	r3, [r1, #4]
 8006f38:	4638      	mov	r0, r7
 8006f3a:	f104 060b 	add.w	r6, r4, #11
 8006f3e:	f000 fd33 	bl	80079a8 <__malloc_unlock>
 8006f42:	f026 0607 	bic.w	r6, r6, #7
 8006f46:	1d23      	adds	r3, r4, #4
 8006f48:	1af2      	subs	r2, r6, r3
 8006f4a:	d0b6      	beq.n	8006eba <_malloc_r+0x22>
 8006f4c:	1b9b      	subs	r3, r3, r6
 8006f4e:	50a3      	str	r3, [r4, r2]
 8006f50:	e7b3      	b.n	8006eba <_malloc_r+0x22>
 8006f52:	6862      	ldr	r2, [r4, #4]
 8006f54:	42a3      	cmp	r3, r4
 8006f56:	bf0c      	ite	eq
 8006f58:	6032      	streq	r2, [r6, #0]
 8006f5a:	605a      	strne	r2, [r3, #4]
 8006f5c:	e7ec      	b.n	8006f38 <_malloc_r+0xa0>
 8006f5e:	4623      	mov	r3, r4
 8006f60:	6864      	ldr	r4, [r4, #4]
 8006f62:	e7b2      	b.n	8006eca <_malloc_r+0x32>
 8006f64:	4634      	mov	r4, r6
 8006f66:	6876      	ldr	r6, [r6, #4]
 8006f68:	e7b9      	b.n	8006ede <_malloc_r+0x46>
 8006f6a:	230c      	movs	r3, #12
 8006f6c:	603b      	str	r3, [r7, #0]
 8006f6e:	4638      	mov	r0, r7
 8006f70:	f000 fd1a 	bl	80079a8 <__malloc_unlock>
 8006f74:	e7a1      	b.n	8006eba <_malloc_r+0x22>
 8006f76:	6025      	str	r5, [r4, #0]
 8006f78:	e7de      	b.n	8006f38 <_malloc_r+0xa0>
 8006f7a:	bf00      	nop
 8006f7c:	20000314 	.word	0x20000314

08006f80 <__ssputs_r>:
 8006f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f84:	688e      	ldr	r6, [r1, #8]
 8006f86:	429e      	cmp	r6, r3
 8006f88:	4682      	mov	sl, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	4690      	mov	r8, r2
 8006f8e:	461f      	mov	r7, r3
 8006f90:	d838      	bhi.n	8007004 <__ssputs_r+0x84>
 8006f92:	898a      	ldrh	r2, [r1, #12]
 8006f94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f98:	d032      	beq.n	8007000 <__ssputs_r+0x80>
 8006f9a:	6825      	ldr	r5, [r4, #0]
 8006f9c:	6909      	ldr	r1, [r1, #16]
 8006f9e:	eba5 0901 	sub.w	r9, r5, r1
 8006fa2:	6965      	ldr	r5, [r4, #20]
 8006fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fac:	3301      	adds	r3, #1
 8006fae:	444b      	add	r3, r9
 8006fb0:	106d      	asrs	r5, r5, #1
 8006fb2:	429d      	cmp	r5, r3
 8006fb4:	bf38      	it	cc
 8006fb6:	461d      	movcc	r5, r3
 8006fb8:	0553      	lsls	r3, r2, #21
 8006fba:	d531      	bpl.n	8007020 <__ssputs_r+0xa0>
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	f7ff ff6b 	bl	8006e98 <_malloc_r>
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	b950      	cbnz	r0, 8006fdc <__ssputs_r+0x5c>
 8006fc6:	230c      	movs	r3, #12
 8006fc8:	f8ca 3000 	str.w	r3, [sl]
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd2:	81a3      	strh	r3, [r4, #12]
 8006fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fdc:	6921      	ldr	r1, [r4, #16]
 8006fde:	464a      	mov	r2, r9
 8006fe0:	f7ff fb4a 	bl	8006678 <memcpy>
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fee:	81a3      	strh	r3, [r4, #12]
 8006ff0:	6126      	str	r6, [r4, #16]
 8006ff2:	6165      	str	r5, [r4, #20]
 8006ff4:	444e      	add	r6, r9
 8006ff6:	eba5 0509 	sub.w	r5, r5, r9
 8006ffa:	6026      	str	r6, [r4, #0]
 8006ffc:	60a5      	str	r5, [r4, #8]
 8006ffe:	463e      	mov	r6, r7
 8007000:	42be      	cmp	r6, r7
 8007002:	d900      	bls.n	8007006 <__ssputs_r+0x86>
 8007004:	463e      	mov	r6, r7
 8007006:	6820      	ldr	r0, [r4, #0]
 8007008:	4632      	mov	r2, r6
 800700a:	4641      	mov	r1, r8
 800700c:	f000 fcac 	bl	8007968 <memmove>
 8007010:	68a3      	ldr	r3, [r4, #8]
 8007012:	1b9b      	subs	r3, r3, r6
 8007014:	60a3      	str	r3, [r4, #8]
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	4433      	add	r3, r6
 800701a:	6023      	str	r3, [r4, #0]
 800701c:	2000      	movs	r0, #0
 800701e:	e7db      	b.n	8006fd8 <__ssputs_r+0x58>
 8007020:	462a      	mov	r2, r5
 8007022:	f000 fcc7 	bl	80079b4 <_realloc_r>
 8007026:	4606      	mov	r6, r0
 8007028:	2800      	cmp	r0, #0
 800702a:	d1e1      	bne.n	8006ff0 <__ssputs_r+0x70>
 800702c:	6921      	ldr	r1, [r4, #16]
 800702e:	4650      	mov	r0, sl
 8007030:	f7ff fec6 	bl	8006dc0 <_free_r>
 8007034:	e7c7      	b.n	8006fc6 <__ssputs_r+0x46>
	...

08007038 <_svfiprintf_r>:
 8007038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703c:	4698      	mov	r8, r3
 800703e:	898b      	ldrh	r3, [r1, #12]
 8007040:	061b      	lsls	r3, r3, #24
 8007042:	b09d      	sub	sp, #116	; 0x74
 8007044:	4607      	mov	r7, r0
 8007046:	460d      	mov	r5, r1
 8007048:	4614      	mov	r4, r2
 800704a:	d50e      	bpl.n	800706a <_svfiprintf_r+0x32>
 800704c:	690b      	ldr	r3, [r1, #16]
 800704e:	b963      	cbnz	r3, 800706a <_svfiprintf_r+0x32>
 8007050:	2140      	movs	r1, #64	; 0x40
 8007052:	f7ff ff21 	bl	8006e98 <_malloc_r>
 8007056:	6028      	str	r0, [r5, #0]
 8007058:	6128      	str	r0, [r5, #16]
 800705a:	b920      	cbnz	r0, 8007066 <_svfiprintf_r+0x2e>
 800705c:	230c      	movs	r3, #12
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	f04f 30ff 	mov.w	r0, #4294967295
 8007064:	e0d1      	b.n	800720a <_svfiprintf_r+0x1d2>
 8007066:	2340      	movs	r3, #64	; 0x40
 8007068:	616b      	str	r3, [r5, #20]
 800706a:	2300      	movs	r3, #0
 800706c:	9309      	str	r3, [sp, #36]	; 0x24
 800706e:	2320      	movs	r3, #32
 8007070:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007074:	f8cd 800c 	str.w	r8, [sp, #12]
 8007078:	2330      	movs	r3, #48	; 0x30
 800707a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007224 <_svfiprintf_r+0x1ec>
 800707e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007082:	f04f 0901 	mov.w	r9, #1
 8007086:	4623      	mov	r3, r4
 8007088:	469a      	mov	sl, r3
 800708a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800708e:	b10a      	cbz	r2, 8007094 <_svfiprintf_r+0x5c>
 8007090:	2a25      	cmp	r2, #37	; 0x25
 8007092:	d1f9      	bne.n	8007088 <_svfiprintf_r+0x50>
 8007094:	ebba 0b04 	subs.w	fp, sl, r4
 8007098:	d00b      	beq.n	80070b2 <_svfiprintf_r+0x7a>
 800709a:	465b      	mov	r3, fp
 800709c:	4622      	mov	r2, r4
 800709e:	4629      	mov	r1, r5
 80070a0:	4638      	mov	r0, r7
 80070a2:	f7ff ff6d 	bl	8006f80 <__ssputs_r>
 80070a6:	3001      	adds	r0, #1
 80070a8:	f000 80aa 	beq.w	8007200 <_svfiprintf_r+0x1c8>
 80070ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ae:	445a      	add	r2, fp
 80070b0:	9209      	str	r2, [sp, #36]	; 0x24
 80070b2:	f89a 3000 	ldrb.w	r3, [sl]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 80a2 	beq.w	8007200 <_svfiprintf_r+0x1c8>
 80070bc:	2300      	movs	r3, #0
 80070be:	f04f 32ff 	mov.w	r2, #4294967295
 80070c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070c6:	f10a 0a01 	add.w	sl, sl, #1
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	9307      	str	r3, [sp, #28]
 80070ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070d2:	931a      	str	r3, [sp, #104]	; 0x68
 80070d4:	4654      	mov	r4, sl
 80070d6:	2205      	movs	r2, #5
 80070d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070dc:	4851      	ldr	r0, [pc, #324]	; (8007224 <_svfiprintf_r+0x1ec>)
 80070de:	f7f9 f897 	bl	8000210 <memchr>
 80070e2:	9a04      	ldr	r2, [sp, #16]
 80070e4:	b9d8      	cbnz	r0, 800711e <_svfiprintf_r+0xe6>
 80070e6:	06d0      	lsls	r0, r2, #27
 80070e8:	bf44      	itt	mi
 80070ea:	2320      	movmi	r3, #32
 80070ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070f0:	0711      	lsls	r1, r2, #28
 80070f2:	bf44      	itt	mi
 80070f4:	232b      	movmi	r3, #43	; 0x2b
 80070f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070fa:	f89a 3000 	ldrb.w	r3, [sl]
 80070fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007100:	d015      	beq.n	800712e <_svfiprintf_r+0xf6>
 8007102:	9a07      	ldr	r2, [sp, #28]
 8007104:	4654      	mov	r4, sl
 8007106:	2000      	movs	r0, #0
 8007108:	f04f 0c0a 	mov.w	ip, #10
 800710c:	4621      	mov	r1, r4
 800710e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007112:	3b30      	subs	r3, #48	; 0x30
 8007114:	2b09      	cmp	r3, #9
 8007116:	d94e      	bls.n	80071b6 <_svfiprintf_r+0x17e>
 8007118:	b1b0      	cbz	r0, 8007148 <_svfiprintf_r+0x110>
 800711a:	9207      	str	r2, [sp, #28]
 800711c:	e014      	b.n	8007148 <_svfiprintf_r+0x110>
 800711e:	eba0 0308 	sub.w	r3, r0, r8
 8007122:	fa09 f303 	lsl.w	r3, r9, r3
 8007126:	4313      	orrs	r3, r2
 8007128:	9304      	str	r3, [sp, #16]
 800712a:	46a2      	mov	sl, r4
 800712c:	e7d2      	b.n	80070d4 <_svfiprintf_r+0x9c>
 800712e:	9b03      	ldr	r3, [sp, #12]
 8007130:	1d19      	adds	r1, r3, #4
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	9103      	str	r1, [sp, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	bfbb      	ittet	lt
 800713a:	425b      	neglt	r3, r3
 800713c:	f042 0202 	orrlt.w	r2, r2, #2
 8007140:	9307      	strge	r3, [sp, #28]
 8007142:	9307      	strlt	r3, [sp, #28]
 8007144:	bfb8      	it	lt
 8007146:	9204      	strlt	r2, [sp, #16]
 8007148:	7823      	ldrb	r3, [r4, #0]
 800714a:	2b2e      	cmp	r3, #46	; 0x2e
 800714c:	d10c      	bne.n	8007168 <_svfiprintf_r+0x130>
 800714e:	7863      	ldrb	r3, [r4, #1]
 8007150:	2b2a      	cmp	r3, #42	; 0x2a
 8007152:	d135      	bne.n	80071c0 <_svfiprintf_r+0x188>
 8007154:	9b03      	ldr	r3, [sp, #12]
 8007156:	1d1a      	adds	r2, r3, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	9203      	str	r2, [sp, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	bfb8      	it	lt
 8007160:	f04f 33ff 	movlt.w	r3, #4294967295
 8007164:	3402      	adds	r4, #2
 8007166:	9305      	str	r3, [sp, #20]
 8007168:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007234 <_svfiprintf_r+0x1fc>
 800716c:	7821      	ldrb	r1, [r4, #0]
 800716e:	2203      	movs	r2, #3
 8007170:	4650      	mov	r0, sl
 8007172:	f7f9 f84d 	bl	8000210 <memchr>
 8007176:	b140      	cbz	r0, 800718a <_svfiprintf_r+0x152>
 8007178:	2340      	movs	r3, #64	; 0x40
 800717a:	eba0 000a 	sub.w	r0, r0, sl
 800717e:	fa03 f000 	lsl.w	r0, r3, r0
 8007182:	9b04      	ldr	r3, [sp, #16]
 8007184:	4303      	orrs	r3, r0
 8007186:	3401      	adds	r4, #1
 8007188:	9304      	str	r3, [sp, #16]
 800718a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718e:	4826      	ldr	r0, [pc, #152]	; (8007228 <_svfiprintf_r+0x1f0>)
 8007190:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007194:	2206      	movs	r2, #6
 8007196:	f7f9 f83b 	bl	8000210 <memchr>
 800719a:	2800      	cmp	r0, #0
 800719c:	d038      	beq.n	8007210 <_svfiprintf_r+0x1d8>
 800719e:	4b23      	ldr	r3, [pc, #140]	; (800722c <_svfiprintf_r+0x1f4>)
 80071a0:	bb1b      	cbnz	r3, 80071ea <_svfiprintf_r+0x1b2>
 80071a2:	9b03      	ldr	r3, [sp, #12]
 80071a4:	3307      	adds	r3, #7
 80071a6:	f023 0307 	bic.w	r3, r3, #7
 80071aa:	3308      	adds	r3, #8
 80071ac:	9303      	str	r3, [sp, #12]
 80071ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b0:	4433      	add	r3, r6
 80071b2:	9309      	str	r3, [sp, #36]	; 0x24
 80071b4:	e767      	b.n	8007086 <_svfiprintf_r+0x4e>
 80071b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ba:	460c      	mov	r4, r1
 80071bc:	2001      	movs	r0, #1
 80071be:	e7a5      	b.n	800710c <_svfiprintf_r+0xd4>
 80071c0:	2300      	movs	r3, #0
 80071c2:	3401      	adds	r4, #1
 80071c4:	9305      	str	r3, [sp, #20]
 80071c6:	4619      	mov	r1, r3
 80071c8:	f04f 0c0a 	mov.w	ip, #10
 80071cc:	4620      	mov	r0, r4
 80071ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071d2:	3a30      	subs	r2, #48	; 0x30
 80071d4:	2a09      	cmp	r2, #9
 80071d6:	d903      	bls.n	80071e0 <_svfiprintf_r+0x1a8>
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0c5      	beq.n	8007168 <_svfiprintf_r+0x130>
 80071dc:	9105      	str	r1, [sp, #20]
 80071de:	e7c3      	b.n	8007168 <_svfiprintf_r+0x130>
 80071e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80071e4:	4604      	mov	r4, r0
 80071e6:	2301      	movs	r3, #1
 80071e8:	e7f0      	b.n	80071cc <_svfiprintf_r+0x194>
 80071ea:	ab03      	add	r3, sp, #12
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	462a      	mov	r2, r5
 80071f0:	4b0f      	ldr	r3, [pc, #60]	; (8007230 <_svfiprintf_r+0x1f8>)
 80071f2:	a904      	add	r1, sp, #16
 80071f4:	4638      	mov	r0, r7
 80071f6:	f3af 8000 	nop.w
 80071fa:	1c42      	adds	r2, r0, #1
 80071fc:	4606      	mov	r6, r0
 80071fe:	d1d6      	bne.n	80071ae <_svfiprintf_r+0x176>
 8007200:	89ab      	ldrh	r3, [r5, #12]
 8007202:	065b      	lsls	r3, r3, #25
 8007204:	f53f af2c 	bmi.w	8007060 <_svfiprintf_r+0x28>
 8007208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800720a:	b01d      	add	sp, #116	; 0x74
 800720c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007210:	ab03      	add	r3, sp, #12
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	462a      	mov	r2, r5
 8007216:	4b06      	ldr	r3, [pc, #24]	; (8007230 <_svfiprintf_r+0x1f8>)
 8007218:	a904      	add	r1, sp, #16
 800721a:	4638      	mov	r0, r7
 800721c:	f000 f9d4 	bl	80075c8 <_printf_i>
 8007220:	e7eb      	b.n	80071fa <_svfiprintf_r+0x1c2>
 8007222:	bf00      	nop
 8007224:	08007b00 	.word	0x08007b00
 8007228:	08007b0a 	.word	0x08007b0a
 800722c:	00000000 	.word	0x00000000
 8007230:	08006f81 	.word	0x08006f81
 8007234:	08007b06 	.word	0x08007b06

08007238 <__sfputc_r>:
 8007238:	6893      	ldr	r3, [r2, #8]
 800723a:	3b01      	subs	r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	b410      	push	{r4}
 8007240:	6093      	str	r3, [r2, #8]
 8007242:	da08      	bge.n	8007256 <__sfputc_r+0x1e>
 8007244:	6994      	ldr	r4, [r2, #24]
 8007246:	42a3      	cmp	r3, r4
 8007248:	db01      	blt.n	800724e <__sfputc_r+0x16>
 800724a:	290a      	cmp	r1, #10
 800724c:	d103      	bne.n	8007256 <__sfputc_r+0x1e>
 800724e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007252:	f7ff bad5 	b.w	8006800 <__swbuf_r>
 8007256:	6813      	ldr	r3, [r2, #0]
 8007258:	1c58      	adds	r0, r3, #1
 800725a:	6010      	str	r0, [r2, #0]
 800725c:	7019      	strb	r1, [r3, #0]
 800725e:	4608      	mov	r0, r1
 8007260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007264:	4770      	bx	lr

08007266 <__sfputs_r>:
 8007266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007268:	4606      	mov	r6, r0
 800726a:	460f      	mov	r7, r1
 800726c:	4614      	mov	r4, r2
 800726e:	18d5      	adds	r5, r2, r3
 8007270:	42ac      	cmp	r4, r5
 8007272:	d101      	bne.n	8007278 <__sfputs_r+0x12>
 8007274:	2000      	movs	r0, #0
 8007276:	e007      	b.n	8007288 <__sfputs_r+0x22>
 8007278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727c:	463a      	mov	r2, r7
 800727e:	4630      	mov	r0, r6
 8007280:	f7ff ffda 	bl	8007238 <__sfputc_r>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d1f3      	bne.n	8007270 <__sfputs_r+0xa>
 8007288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800728c <_vfiprintf_r>:
 800728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007290:	460d      	mov	r5, r1
 8007292:	b09d      	sub	sp, #116	; 0x74
 8007294:	4614      	mov	r4, r2
 8007296:	4698      	mov	r8, r3
 8007298:	4606      	mov	r6, r0
 800729a:	b118      	cbz	r0, 80072a4 <_vfiprintf_r+0x18>
 800729c:	6983      	ldr	r3, [r0, #24]
 800729e:	b90b      	cbnz	r3, 80072a4 <_vfiprintf_r+0x18>
 80072a0:	f7ff fc88 	bl	8006bb4 <__sinit>
 80072a4:	4b89      	ldr	r3, [pc, #548]	; (80074cc <_vfiprintf_r+0x240>)
 80072a6:	429d      	cmp	r5, r3
 80072a8:	d11b      	bne.n	80072e2 <_vfiprintf_r+0x56>
 80072aa:	6875      	ldr	r5, [r6, #4]
 80072ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ae:	07d9      	lsls	r1, r3, #31
 80072b0:	d405      	bmi.n	80072be <_vfiprintf_r+0x32>
 80072b2:	89ab      	ldrh	r3, [r5, #12]
 80072b4:	059a      	lsls	r2, r3, #22
 80072b6:	d402      	bmi.n	80072be <_vfiprintf_r+0x32>
 80072b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072ba:	f7ff fd19 	bl	8006cf0 <__retarget_lock_acquire_recursive>
 80072be:	89ab      	ldrh	r3, [r5, #12]
 80072c0:	071b      	lsls	r3, r3, #28
 80072c2:	d501      	bpl.n	80072c8 <_vfiprintf_r+0x3c>
 80072c4:	692b      	ldr	r3, [r5, #16]
 80072c6:	b9eb      	cbnz	r3, 8007304 <_vfiprintf_r+0x78>
 80072c8:	4629      	mov	r1, r5
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7ff faea 	bl	80068a4 <__swsetup_r>
 80072d0:	b1c0      	cbz	r0, 8007304 <_vfiprintf_r+0x78>
 80072d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072d4:	07dc      	lsls	r4, r3, #31
 80072d6:	d50e      	bpl.n	80072f6 <_vfiprintf_r+0x6a>
 80072d8:	f04f 30ff 	mov.w	r0, #4294967295
 80072dc:	b01d      	add	sp, #116	; 0x74
 80072de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e2:	4b7b      	ldr	r3, [pc, #492]	; (80074d0 <_vfiprintf_r+0x244>)
 80072e4:	429d      	cmp	r5, r3
 80072e6:	d101      	bne.n	80072ec <_vfiprintf_r+0x60>
 80072e8:	68b5      	ldr	r5, [r6, #8]
 80072ea:	e7df      	b.n	80072ac <_vfiprintf_r+0x20>
 80072ec:	4b79      	ldr	r3, [pc, #484]	; (80074d4 <_vfiprintf_r+0x248>)
 80072ee:	429d      	cmp	r5, r3
 80072f0:	bf08      	it	eq
 80072f2:	68f5      	ldreq	r5, [r6, #12]
 80072f4:	e7da      	b.n	80072ac <_vfiprintf_r+0x20>
 80072f6:	89ab      	ldrh	r3, [r5, #12]
 80072f8:	0598      	lsls	r0, r3, #22
 80072fa:	d4ed      	bmi.n	80072d8 <_vfiprintf_r+0x4c>
 80072fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072fe:	f7ff fcf8 	bl	8006cf2 <__retarget_lock_release_recursive>
 8007302:	e7e9      	b.n	80072d8 <_vfiprintf_r+0x4c>
 8007304:	2300      	movs	r3, #0
 8007306:	9309      	str	r3, [sp, #36]	; 0x24
 8007308:	2320      	movs	r3, #32
 800730a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800730e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007312:	2330      	movs	r3, #48	; 0x30
 8007314:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80074d8 <_vfiprintf_r+0x24c>
 8007318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800731c:	f04f 0901 	mov.w	r9, #1
 8007320:	4623      	mov	r3, r4
 8007322:	469a      	mov	sl, r3
 8007324:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007328:	b10a      	cbz	r2, 800732e <_vfiprintf_r+0xa2>
 800732a:	2a25      	cmp	r2, #37	; 0x25
 800732c:	d1f9      	bne.n	8007322 <_vfiprintf_r+0x96>
 800732e:	ebba 0b04 	subs.w	fp, sl, r4
 8007332:	d00b      	beq.n	800734c <_vfiprintf_r+0xc0>
 8007334:	465b      	mov	r3, fp
 8007336:	4622      	mov	r2, r4
 8007338:	4629      	mov	r1, r5
 800733a:	4630      	mov	r0, r6
 800733c:	f7ff ff93 	bl	8007266 <__sfputs_r>
 8007340:	3001      	adds	r0, #1
 8007342:	f000 80aa 	beq.w	800749a <_vfiprintf_r+0x20e>
 8007346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007348:	445a      	add	r2, fp
 800734a:	9209      	str	r2, [sp, #36]	; 0x24
 800734c:	f89a 3000 	ldrb.w	r3, [sl]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 80a2 	beq.w	800749a <_vfiprintf_r+0x20e>
 8007356:	2300      	movs	r3, #0
 8007358:	f04f 32ff 	mov.w	r2, #4294967295
 800735c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007360:	f10a 0a01 	add.w	sl, sl, #1
 8007364:	9304      	str	r3, [sp, #16]
 8007366:	9307      	str	r3, [sp, #28]
 8007368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800736c:	931a      	str	r3, [sp, #104]	; 0x68
 800736e:	4654      	mov	r4, sl
 8007370:	2205      	movs	r2, #5
 8007372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007376:	4858      	ldr	r0, [pc, #352]	; (80074d8 <_vfiprintf_r+0x24c>)
 8007378:	f7f8 ff4a 	bl	8000210 <memchr>
 800737c:	9a04      	ldr	r2, [sp, #16]
 800737e:	b9d8      	cbnz	r0, 80073b8 <_vfiprintf_r+0x12c>
 8007380:	06d1      	lsls	r1, r2, #27
 8007382:	bf44      	itt	mi
 8007384:	2320      	movmi	r3, #32
 8007386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800738a:	0713      	lsls	r3, r2, #28
 800738c:	bf44      	itt	mi
 800738e:	232b      	movmi	r3, #43	; 0x2b
 8007390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007394:	f89a 3000 	ldrb.w	r3, [sl]
 8007398:	2b2a      	cmp	r3, #42	; 0x2a
 800739a:	d015      	beq.n	80073c8 <_vfiprintf_r+0x13c>
 800739c:	9a07      	ldr	r2, [sp, #28]
 800739e:	4654      	mov	r4, sl
 80073a0:	2000      	movs	r0, #0
 80073a2:	f04f 0c0a 	mov.w	ip, #10
 80073a6:	4621      	mov	r1, r4
 80073a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ac:	3b30      	subs	r3, #48	; 0x30
 80073ae:	2b09      	cmp	r3, #9
 80073b0:	d94e      	bls.n	8007450 <_vfiprintf_r+0x1c4>
 80073b2:	b1b0      	cbz	r0, 80073e2 <_vfiprintf_r+0x156>
 80073b4:	9207      	str	r2, [sp, #28]
 80073b6:	e014      	b.n	80073e2 <_vfiprintf_r+0x156>
 80073b8:	eba0 0308 	sub.w	r3, r0, r8
 80073bc:	fa09 f303 	lsl.w	r3, r9, r3
 80073c0:	4313      	orrs	r3, r2
 80073c2:	9304      	str	r3, [sp, #16]
 80073c4:	46a2      	mov	sl, r4
 80073c6:	e7d2      	b.n	800736e <_vfiprintf_r+0xe2>
 80073c8:	9b03      	ldr	r3, [sp, #12]
 80073ca:	1d19      	adds	r1, r3, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	9103      	str	r1, [sp, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bfbb      	ittet	lt
 80073d4:	425b      	neglt	r3, r3
 80073d6:	f042 0202 	orrlt.w	r2, r2, #2
 80073da:	9307      	strge	r3, [sp, #28]
 80073dc:	9307      	strlt	r3, [sp, #28]
 80073de:	bfb8      	it	lt
 80073e0:	9204      	strlt	r2, [sp, #16]
 80073e2:	7823      	ldrb	r3, [r4, #0]
 80073e4:	2b2e      	cmp	r3, #46	; 0x2e
 80073e6:	d10c      	bne.n	8007402 <_vfiprintf_r+0x176>
 80073e8:	7863      	ldrb	r3, [r4, #1]
 80073ea:	2b2a      	cmp	r3, #42	; 0x2a
 80073ec:	d135      	bne.n	800745a <_vfiprintf_r+0x1ce>
 80073ee:	9b03      	ldr	r3, [sp, #12]
 80073f0:	1d1a      	adds	r2, r3, #4
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	9203      	str	r2, [sp, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	bfb8      	it	lt
 80073fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80073fe:	3402      	adds	r4, #2
 8007400:	9305      	str	r3, [sp, #20]
 8007402:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80074e8 <_vfiprintf_r+0x25c>
 8007406:	7821      	ldrb	r1, [r4, #0]
 8007408:	2203      	movs	r2, #3
 800740a:	4650      	mov	r0, sl
 800740c:	f7f8 ff00 	bl	8000210 <memchr>
 8007410:	b140      	cbz	r0, 8007424 <_vfiprintf_r+0x198>
 8007412:	2340      	movs	r3, #64	; 0x40
 8007414:	eba0 000a 	sub.w	r0, r0, sl
 8007418:	fa03 f000 	lsl.w	r0, r3, r0
 800741c:	9b04      	ldr	r3, [sp, #16]
 800741e:	4303      	orrs	r3, r0
 8007420:	3401      	adds	r4, #1
 8007422:	9304      	str	r3, [sp, #16]
 8007424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007428:	482c      	ldr	r0, [pc, #176]	; (80074dc <_vfiprintf_r+0x250>)
 800742a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800742e:	2206      	movs	r2, #6
 8007430:	f7f8 feee 	bl	8000210 <memchr>
 8007434:	2800      	cmp	r0, #0
 8007436:	d03f      	beq.n	80074b8 <_vfiprintf_r+0x22c>
 8007438:	4b29      	ldr	r3, [pc, #164]	; (80074e0 <_vfiprintf_r+0x254>)
 800743a:	bb1b      	cbnz	r3, 8007484 <_vfiprintf_r+0x1f8>
 800743c:	9b03      	ldr	r3, [sp, #12]
 800743e:	3307      	adds	r3, #7
 8007440:	f023 0307 	bic.w	r3, r3, #7
 8007444:	3308      	adds	r3, #8
 8007446:	9303      	str	r3, [sp, #12]
 8007448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744a:	443b      	add	r3, r7
 800744c:	9309      	str	r3, [sp, #36]	; 0x24
 800744e:	e767      	b.n	8007320 <_vfiprintf_r+0x94>
 8007450:	fb0c 3202 	mla	r2, ip, r2, r3
 8007454:	460c      	mov	r4, r1
 8007456:	2001      	movs	r0, #1
 8007458:	e7a5      	b.n	80073a6 <_vfiprintf_r+0x11a>
 800745a:	2300      	movs	r3, #0
 800745c:	3401      	adds	r4, #1
 800745e:	9305      	str	r3, [sp, #20]
 8007460:	4619      	mov	r1, r3
 8007462:	f04f 0c0a 	mov.w	ip, #10
 8007466:	4620      	mov	r0, r4
 8007468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800746c:	3a30      	subs	r2, #48	; 0x30
 800746e:	2a09      	cmp	r2, #9
 8007470:	d903      	bls.n	800747a <_vfiprintf_r+0x1ee>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0c5      	beq.n	8007402 <_vfiprintf_r+0x176>
 8007476:	9105      	str	r1, [sp, #20]
 8007478:	e7c3      	b.n	8007402 <_vfiprintf_r+0x176>
 800747a:	fb0c 2101 	mla	r1, ip, r1, r2
 800747e:	4604      	mov	r4, r0
 8007480:	2301      	movs	r3, #1
 8007482:	e7f0      	b.n	8007466 <_vfiprintf_r+0x1da>
 8007484:	ab03      	add	r3, sp, #12
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	462a      	mov	r2, r5
 800748a:	4b16      	ldr	r3, [pc, #88]	; (80074e4 <_vfiprintf_r+0x258>)
 800748c:	a904      	add	r1, sp, #16
 800748e:	4630      	mov	r0, r6
 8007490:	f3af 8000 	nop.w
 8007494:	4607      	mov	r7, r0
 8007496:	1c78      	adds	r0, r7, #1
 8007498:	d1d6      	bne.n	8007448 <_vfiprintf_r+0x1bc>
 800749a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800749c:	07d9      	lsls	r1, r3, #31
 800749e:	d405      	bmi.n	80074ac <_vfiprintf_r+0x220>
 80074a0:	89ab      	ldrh	r3, [r5, #12]
 80074a2:	059a      	lsls	r2, r3, #22
 80074a4:	d402      	bmi.n	80074ac <_vfiprintf_r+0x220>
 80074a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074a8:	f7ff fc23 	bl	8006cf2 <__retarget_lock_release_recursive>
 80074ac:	89ab      	ldrh	r3, [r5, #12]
 80074ae:	065b      	lsls	r3, r3, #25
 80074b0:	f53f af12 	bmi.w	80072d8 <_vfiprintf_r+0x4c>
 80074b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074b6:	e711      	b.n	80072dc <_vfiprintf_r+0x50>
 80074b8:	ab03      	add	r3, sp, #12
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	462a      	mov	r2, r5
 80074be:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <_vfiprintf_r+0x258>)
 80074c0:	a904      	add	r1, sp, #16
 80074c2:	4630      	mov	r0, r6
 80074c4:	f000 f880 	bl	80075c8 <_printf_i>
 80074c8:	e7e4      	b.n	8007494 <_vfiprintf_r+0x208>
 80074ca:	bf00      	nop
 80074cc:	08007ac0 	.word	0x08007ac0
 80074d0:	08007ae0 	.word	0x08007ae0
 80074d4:	08007aa0 	.word	0x08007aa0
 80074d8:	08007b00 	.word	0x08007b00
 80074dc:	08007b0a 	.word	0x08007b0a
 80074e0:	00000000 	.word	0x00000000
 80074e4:	08007267 	.word	0x08007267
 80074e8:	08007b06 	.word	0x08007b06

080074ec <_printf_common>:
 80074ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f0:	4616      	mov	r6, r2
 80074f2:	4699      	mov	r9, r3
 80074f4:	688a      	ldr	r2, [r1, #8]
 80074f6:	690b      	ldr	r3, [r1, #16]
 80074f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074fc:	4293      	cmp	r3, r2
 80074fe:	bfb8      	it	lt
 8007500:	4613      	movlt	r3, r2
 8007502:	6033      	str	r3, [r6, #0]
 8007504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007508:	4607      	mov	r7, r0
 800750a:	460c      	mov	r4, r1
 800750c:	b10a      	cbz	r2, 8007512 <_printf_common+0x26>
 800750e:	3301      	adds	r3, #1
 8007510:	6033      	str	r3, [r6, #0]
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	0699      	lsls	r1, r3, #26
 8007516:	bf42      	ittt	mi
 8007518:	6833      	ldrmi	r3, [r6, #0]
 800751a:	3302      	addmi	r3, #2
 800751c:	6033      	strmi	r3, [r6, #0]
 800751e:	6825      	ldr	r5, [r4, #0]
 8007520:	f015 0506 	ands.w	r5, r5, #6
 8007524:	d106      	bne.n	8007534 <_printf_common+0x48>
 8007526:	f104 0a19 	add.w	sl, r4, #25
 800752a:	68e3      	ldr	r3, [r4, #12]
 800752c:	6832      	ldr	r2, [r6, #0]
 800752e:	1a9b      	subs	r3, r3, r2
 8007530:	42ab      	cmp	r3, r5
 8007532:	dc26      	bgt.n	8007582 <_printf_common+0x96>
 8007534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007538:	1e13      	subs	r3, r2, #0
 800753a:	6822      	ldr	r2, [r4, #0]
 800753c:	bf18      	it	ne
 800753e:	2301      	movne	r3, #1
 8007540:	0692      	lsls	r2, r2, #26
 8007542:	d42b      	bmi.n	800759c <_printf_common+0xb0>
 8007544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007548:	4649      	mov	r1, r9
 800754a:	4638      	mov	r0, r7
 800754c:	47c0      	blx	r8
 800754e:	3001      	adds	r0, #1
 8007550:	d01e      	beq.n	8007590 <_printf_common+0xa4>
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	68e5      	ldr	r5, [r4, #12]
 8007556:	6832      	ldr	r2, [r6, #0]
 8007558:	f003 0306 	and.w	r3, r3, #6
 800755c:	2b04      	cmp	r3, #4
 800755e:	bf08      	it	eq
 8007560:	1aad      	subeq	r5, r5, r2
 8007562:	68a3      	ldr	r3, [r4, #8]
 8007564:	6922      	ldr	r2, [r4, #16]
 8007566:	bf0c      	ite	eq
 8007568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800756c:	2500      	movne	r5, #0
 800756e:	4293      	cmp	r3, r2
 8007570:	bfc4      	itt	gt
 8007572:	1a9b      	subgt	r3, r3, r2
 8007574:	18ed      	addgt	r5, r5, r3
 8007576:	2600      	movs	r6, #0
 8007578:	341a      	adds	r4, #26
 800757a:	42b5      	cmp	r5, r6
 800757c:	d11a      	bne.n	80075b4 <_printf_common+0xc8>
 800757e:	2000      	movs	r0, #0
 8007580:	e008      	b.n	8007594 <_printf_common+0xa8>
 8007582:	2301      	movs	r3, #1
 8007584:	4652      	mov	r2, sl
 8007586:	4649      	mov	r1, r9
 8007588:	4638      	mov	r0, r7
 800758a:	47c0      	blx	r8
 800758c:	3001      	adds	r0, #1
 800758e:	d103      	bne.n	8007598 <_printf_common+0xac>
 8007590:	f04f 30ff 	mov.w	r0, #4294967295
 8007594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007598:	3501      	adds	r5, #1
 800759a:	e7c6      	b.n	800752a <_printf_common+0x3e>
 800759c:	18e1      	adds	r1, r4, r3
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	2030      	movs	r0, #48	; 0x30
 80075a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075a6:	4422      	add	r2, r4
 80075a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075b0:	3302      	adds	r3, #2
 80075b2:	e7c7      	b.n	8007544 <_printf_common+0x58>
 80075b4:	2301      	movs	r3, #1
 80075b6:	4622      	mov	r2, r4
 80075b8:	4649      	mov	r1, r9
 80075ba:	4638      	mov	r0, r7
 80075bc:	47c0      	blx	r8
 80075be:	3001      	adds	r0, #1
 80075c0:	d0e6      	beq.n	8007590 <_printf_common+0xa4>
 80075c2:	3601      	adds	r6, #1
 80075c4:	e7d9      	b.n	800757a <_printf_common+0x8e>
	...

080075c8 <_printf_i>:
 80075c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075cc:	7e0f      	ldrb	r7, [r1, #24]
 80075ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075d0:	2f78      	cmp	r7, #120	; 0x78
 80075d2:	4691      	mov	r9, r2
 80075d4:	4680      	mov	r8, r0
 80075d6:	460c      	mov	r4, r1
 80075d8:	469a      	mov	sl, r3
 80075da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075de:	d807      	bhi.n	80075f0 <_printf_i+0x28>
 80075e0:	2f62      	cmp	r7, #98	; 0x62
 80075e2:	d80a      	bhi.n	80075fa <_printf_i+0x32>
 80075e4:	2f00      	cmp	r7, #0
 80075e6:	f000 80d8 	beq.w	800779a <_printf_i+0x1d2>
 80075ea:	2f58      	cmp	r7, #88	; 0x58
 80075ec:	f000 80a3 	beq.w	8007736 <_printf_i+0x16e>
 80075f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075f8:	e03a      	b.n	8007670 <_printf_i+0xa8>
 80075fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075fe:	2b15      	cmp	r3, #21
 8007600:	d8f6      	bhi.n	80075f0 <_printf_i+0x28>
 8007602:	a101      	add	r1, pc, #4	; (adr r1, 8007608 <_printf_i+0x40>)
 8007604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007608:	08007661 	.word	0x08007661
 800760c:	08007675 	.word	0x08007675
 8007610:	080075f1 	.word	0x080075f1
 8007614:	080075f1 	.word	0x080075f1
 8007618:	080075f1 	.word	0x080075f1
 800761c:	080075f1 	.word	0x080075f1
 8007620:	08007675 	.word	0x08007675
 8007624:	080075f1 	.word	0x080075f1
 8007628:	080075f1 	.word	0x080075f1
 800762c:	080075f1 	.word	0x080075f1
 8007630:	080075f1 	.word	0x080075f1
 8007634:	08007781 	.word	0x08007781
 8007638:	080076a5 	.word	0x080076a5
 800763c:	08007763 	.word	0x08007763
 8007640:	080075f1 	.word	0x080075f1
 8007644:	080075f1 	.word	0x080075f1
 8007648:	080077a3 	.word	0x080077a3
 800764c:	080075f1 	.word	0x080075f1
 8007650:	080076a5 	.word	0x080076a5
 8007654:	080075f1 	.word	0x080075f1
 8007658:	080075f1 	.word	0x080075f1
 800765c:	0800776b 	.word	0x0800776b
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	1d1a      	adds	r2, r3, #4
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	602a      	str	r2, [r5, #0]
 8007668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800766c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007670:	2301      	movs	r3, #1
 8007672:	e0a3      	b.n	80077bc <_printf_i+0x1f4>
 8007674:	6820      	ldr	r0, [r4, #0]
 8007676:	6829      	ldr	r1, [r5, #0]
 8007678:	0606      	lsls	r6, r0, #24
 800767a:	f101 0304 	add.w	r3, r1, #4
 800767e:	d50a      	bpl.n	8007696 <_printf_i+0xce>
 8007680:	680e      	ldr	r6, [r1, #0]
 8007682:	602b      	str	r3, [r5, #0]
 8007684:	2e00      	cmp	r6, #0
 8007686:	da03      	bge.n	8007690 <_printf_i+0xc8>
 8007688:	232d      	movs	r3, #45	; 0x2d
 800768a:	4276      	negs	r6, r6
 800768c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007690:	485e      	ldr	r0, [pc, #376]	; (800780c <_printf_i+0x244>)
 8007692:	230a      	movs	r3, #10
 8007694:	e019      	b.n	80076ca <_printf_i+0x102>
 8007696:	680e      	ldr	r6, [r1, #0]
 8007698:	602b      	str	r3, [r5, #0]
 800769a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800769e:	bf18      	it	ne
 80076a0:	b236      	sxthne	r6, r6
 80076a2:	e7ef      	b.n	8007684 <_printf_i+0xbc>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	6820      	ldr	r0, [r4, #0]
 80076a8:	1d19      	adds	r1, r3, #4
 80076aa:	6029      	str	r1, [r5, #0]
 80076ac:	0601      	lsls	r1, r0, #24
 80076ae:	d501      	bpl.n	80076b4 <_printf_i+0xec>
 80076b0:	681e      	ldr	r6, [r3, #0]
 80076b2:	e002      	b.n	80076ba <_printf_i+0xf2>
 80076b4:	0646      	lsls	r6, r0, #25
 80076b6:	d5fb      	bpl.n	80076b0 <_printf_i+0xe8>
 80076b8:	881e      	ldrh	r6, [r3, #0]
 80076ba:	4854      	ldr	r0, [pc, #336]	; (800780c <_printf_i+0x244>)
 80076bc:	2f6f      	cmp	r7, #111	; 0x6f
 80076be:	bf0c      	ite	eq
 80076c0:	2308      	moveq	r3, #8
 80076c2:	230a      	movne	r3, #10
 80076c4:	2100      	movs	r1, #0
 80076c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076ca:	6865      	ldr	r5, [r4, #4]
 80076cc:	60a5      	str	r5, [r4, #8]
 80076ce:	2d00      	cmp	r5, #0
 80076d0:	bfa2      	ittt	ge
 80076d2:	6821      	ldrge	r1, [r4, #0]
 80076d4:	f021 0104 	bicge.w	r1, r1, #4
 80076d8:	6021      	strge	r1, [r4, #0]
 80076da:	b90e      	cbnz	r6, 80076e0 <_printf_i+0x118>
 80076dc:	2d00      	cmp	r5, #0
 80076de:	d04d      	beq.n	800777c <_printf_i+0x1b4>
 80076e0:	4615      	mov	r5, r2
 80076e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80076e6:	fb03 6711 	mls	r7, r3, r1, r6
 80076ea:	5dc7      	ldrb	r7, [r0, r7]
 80076ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076f0:	4637      	mov	r7, r6
 80076f2:	42bb      	cmp	r3, r7
 80076f4:	460e      	mov	r6, r1
 80076f6:	d9f4      	bls.n	80076e2 <_printf_i+0x11a>
 80076f8:	2b08      	cmp	r3, #8
 80076fa:	d10b      	bne.n	8007714 <_printf_i+0x14c>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	07de      	lsls	r6, r3, #31
 8007700:	d508      	bpl.n	8007714 <_printf_i+0x14c>
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	6861      	ldr	r1, [r4, #4]
 8007706:	4299      	cmp	r1, r3
 8007708:	bfde      	ittt	le
 800770a:	2330      	movle	r3, #48	; 0x30
 800770c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007710:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007714:	1b52      	subs	r2, r2, r5
 8007716:	6122      	str	r2, [r4, #16]
 8007718:	f8cd a000 	str.w	sl, [sp]
 800771c:	464b      	mov	r3, r9
 800771e:	aa03      	add	r2, sp, #12
 8007720:	4621      	mov	r1, r4
 8007722:	4640      	mov	r0, r8
 8007724:	f7ff fee2 	bl	80074ec <_printf_common>
 8007728:	3001      	adds	r0, #1
 800772a:	d14c      	bne.n	80077c6 <_printf_i+0x1fe>
 800772c:	f04f 30ff 	mov.w	r0, #4294967295
 8007730:	b004      	add	sp, #16
 8007732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007736:	4835      	ldr	r0, [pc, #212]	; (800780c <_printf_i+0x244>)
 8007738:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800773c:	6829      	ldr	r1, [r5, #0]
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	f851 6b04 	ldr.w	r6, [r1], #4
 8007744:	6029      	str	r1, [r5, #0]
 8007746:	061d      	lsls	r5, r3, #24
 8007748:	d514      	bpl.n	8007774 <_printf_i+0x1ac>
 800774a:	07df      	lsls	r7, r3, #31
 800774c:	bf44      	itt	mi
 800774e:	f043 0320 	orrmi.w	r3, r3, #32
 8007752:	6023      	strmi	r3, [r4, #0]
 8007754:	b91e      	cbnz	r6, 800775e <_printf_i+0x196>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	f023 0320 	bic.w	r3, r3, #32
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	2310      	movs	r3, #16
 8007760:	e7b0      	b.n	80076c4 <_printf_i+0xfc>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	f043 0320 	orr.w	r3, r3, #32
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	2378      	movs	r3, #120	; 0x78
 800776c:	4828      	ldr	r0, [pc, #160]	; (8007810 <_printf_i+0x248>)
 800776e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007772:	e7e3      	b.n	800773c <_printf_i+0x174>
 8007774:	0659      	lsls	r1, r3, #25
 8007776:	bf48      	it	mi
 8007778:	b2b6      	uxthmi	r6, r6
 800777a:	e7e6      	b.n	800774a <_printf_i+0x182>
 800777c:	4615      	mov	r5, r2
 800777e:	e7bb      	b.n	80076f8 <_printf_i+0x130>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	6826      	ldr	r6, [r4, #0]
 8007784:	6961      	ldr	r1, [r4, #20]
 8007786:	1d18      	adds	r0, r3, #4
 8007788:	6028      	str	r0, [r5, #0]
 800778a:	0635      	lsls	r5, r6, #24
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	d501      	bpl.n	8007794 <_printf_i+0x1cc>
 8007790:	6019      	str	r1, [r3, #0]
 8007792:	e002      	b.n	800779a <_printf_i+0x1d2>
 8007794:	0670      	lsls	r0, r6, #25
 8007796:	d5fb      	bpl.n	8007790 <_printf_i+0x1c8>
 8007798:	8019      	strh	r1, [r3, #0]
 800779a:	2300      	movs	r3, #0
 800779c:	6123      	str	r3, [r4, #16]
 800779e:	4615      	mov	r5, r2
 80077a0:	e7ba      	b.n	8007718 <_printf_i+0x150>
 80077a2:	682b      	ldr	r3, [r5, #0]
 80077a4:	1d1a      	adds	r2, r3, #4
 80077a6:	602a      	str	r2, [r5, #0]
 80077a8:	681d      	ldr	r5, [r3, #0]
 80077aa:	6862      	ldr	r2, [r4, #4]
 80077ac:	2100      	movs	r1, #0
 80077ae:	4628      	mov	r0, r5
 80077b0:	f7f8 fd2e 	bl	8000210 <memchr>
 80077b4:	b108      	cbz	r0, 80077ba <_printf_i+0x1f2>
 80077b6:	1b40      	subs	r0, r0, r5
 80077b8:	6060      	str	r0, [r4, #4]
 80077ba:	6863      	ldr	r3, [r4, #4]
 80077bc:	6123      	str	r3, [r4, #16]
 80077be:	2300      	movs	r3, #0
 80077c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077c4:	e7a8      	b.n	8007718 <_printf_i+0x150>
 80077c6:	6923      	ldr	r3, [r4, #16]
 80077c8:	462a      	mov	r2, r5
 80077ca:	4649      	mov	r1, r9
 80077cc:	4640      	mov	r0, r8
 80077ce:	47d0      	blx	sl
 80077d0:	3001      	adds	r0, #1
 80077d2:	d0ab      	beq.n	800772c <_printf_i+0x164>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	079b      	lsls	r3, r3, #30
 80077d8:	d413      	bmi.n	8007802 <_printf_i+0x23a>
 80077da:	68e0      	ldr	r0, [r4, #12]
 80077dc:	9b03      	ldr	r3, [sp, #12]
 80077de:	4298      	cmp	r0, r3
 80077e0:	bfb8      	it	lt
 80077e2:	4618      	movlt	r0, r3
 80077e4:	e7a4      	b.n	8007730 <_printf_i+0x168>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4632      	mov	r2, r6
 80077ea:	4649      	mov	r1, r9
 80077ec:	4640      	mov	r0, r8
 80077ee:	47d0      	blx	sl
 80077f0:	3001      	adds	r0, #1
 80077f2:	d09b      	beq.n	800772c <_printf_i+0x164>
 80077f4:	3501      	adds	r5, #1
 80077f6:	68e3      	ldr	r3, [r4, #12]
 80077f8:	9903      	ldr	r1, [sp, #12]
 80077fa:	1a5b      	subs	r3, r3, r1
 80077fc:	42ab      	cmp	r3, r5
 80077fe:	dcf2      	bgt.n	80077e6 <_printf_i+0x21e>
 8007800:	e7eb      	b.n	80077da <_printf_i+0x212>
 8007802:	2500      	movs	r5, #0
 8007804:	f104 0619 	add.w	r6, r4, #25
 8007808:	e7f5      	b.n	80077f6 <_printf_i+0x22e>
 800780a:	bf00      	nop
 800780c:	08007b11 	.word	0x08007b11
 8007810:	08007b22 	.word	0x08007b22

08007814 <_sbrk_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	4d06      	ldr	r5, [pc, #24]	; (8007830 <_sbrk_r+0x1c>)
 8007818:	2300      	movs	r3, #0
 800781a:	4604      	mov	r4, r0
 800781c:	4608      	mov	r0, r1
 800781e:	602b      	str	r3, [r5, #0]
 8007820:	f7fa f986 	bl	8001b30 <_sbrk>
 8007824:	1c43      	adds	r3, r0, #1
 8007826:	d102      	bne.n	800782e <_sbrk_r+0x1a>
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	b103      	cbz	r3, 800782e <_sbrk_r+0x1a>
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	bd38      	pop	{r3, r4, r5, pc}
 8007830:	2000031c 	.word	0x2000031c

08007834 <__sread>:
 8007834:	b510      	push	{r4, lr}
 8007836:	460c      	mov	r4, r1
 8007838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783c:	f000 f8ea 	bl	8007a14 <_read_r>
 8007840:	2800      	cmp	r0, #0
 8007842:	bfab      	itete	ge
 8007844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007846:	89a3      	ldrhlt	r3, [r4, #12]
 8007848:	181b      	addge	r3, r3, r0
 800784a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800784e:	bfac      	ite	ge
 8007850:	6563      	strge	r3, [r4, #84]	; 0x54
 8007852:	81a3      	strhlt	r3, [r4, #12]
 8007854:	bd10      	pop	{r4, pc}

08007856 <__swrite>:
 8007856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800785a:	461f      	mov	r7, r3
 800785c:	898b      	ldrh	r3, [r1, #12]
 800785e:	05db      	lsls	r3, r3, #23
 8007860:	4605      	mov	r5, r0
 8007862:	460c      	mov	r4, r1
 8007864:	4616      	mov	r6, r2
 8007866:	d505      	bpl.n	8007874 <__swrite+0x1e>
 8007868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800786c:	2302      	movs	r3, #2
 800786e:	2200      	movs	r2, #0
 8007870:	f000 f868 	bl	8007944 <_lseek_r>
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800787e:	81a3      	strh	r3, [r4, #12]
 8007880:	4632      	mov	r2, r6
 8007882:	463b      	mov	r3, r7
 8007884:	4628      	mov	r0, r5
 8007886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800788a:	f000 b817 	b.w	80078bc <_write_r>

0800788e <__sseek>:
 800788e:	b510      	push	{r4, lr}
 8007890:	460c      	mov	r4, r1
 8007892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007896:	f000 f855 	bl	8007944 <_lseek_r>
 800789a:	1c43      	adds	r3, r0, #1
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	bf15      	itete	ne
 80078a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80078a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078aa:	81a3      	strheq	r3, [r4, #12]
 80078ac:	bf18      	it	ne
 80078ae:	81a3      	strhne	r3, [r4, #12]
 80078b0:	bd10      	pop	{r4, pc}

080078b2 <__sclose>:
 80078b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b6:	f000 b813 	b.w	80078e0 <_close_r>
	...

080078bc <_write_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4d07      	ldr	r5, [pc, #28]	; (80078dc <_write_r+0x20>)
 80078c0:	4604      	mov	r4, r0
 80078c2:	4608      	mov	r0, r1
 80078c4:	4611      	mov	r1, r2
 80078c6:	2200      	movs	r2, #0
 80078c8:	602a      	str	r2, [r5, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	f7fa f8df 	bl	8001a8e <_write>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	d102      	bne.n	80078da <_write_r+0x1e>
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	b103      	cbz	r3, 80078da <_write_r+0x1e>
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	bd38      	pop	{r3, r4, r5, pc}
 80078dc:	2000031c 	.word	0x2000031c

080078e0 <_close_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d06      	ldr	r5, [pc, #24]	; (80078fc <_close_r+0x1c>)
 80078e4:	2300      	movs	r3, #0
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7fa f8eb 	bl	8001ac6 <_close>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_close_r+0x1a>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_close_r+0x1a>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	2000031c 	.word	0x2000031c

08007900 <_fstat_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4d07      	ldr	r5, [pc, #28]	; (8007920 <_fstat_r+0x20>)
 8007904:	2300      	movs	r3, #0
 8007906:	4604      	mov	r4, r0
 8007908:	4608      	mov	r0, r1
 800790a:	4611      	mov	r1, r2
 800790c:	602b      	str	r3, [r5, #0]
 800790e:	f7fa f8e6 	bl	8001ade <_fstat>
 8007912:	1c43      	adds	r3, r0, #1
 8007914:	d102      	bne.n	800791c <_fstat_r+0x1c>
 8007916:	682b      	ldr	r3, [r5, #0]
 8007918:	b103      	cbz	r3, 800791c <_fstat_r+0x1c>
 800791a:	6023      	str	r3, [r4, #0]
 800791c:	bd38      	pop	{r3, r4, r5, pc}
 800791e:	bf00      	nop
 8007920:	2000031c 	.word	0x2000031c

08007924 <_isatty_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4d06      	ldr	r5, [pc, #24]	; (8007940 <_isatty_r+0x1c>)
 8007928:	2300      	movs	r3, #0
 800792a:	4604      	mov	r4, r0
 800792c:	4608      	mov	r0, r1
 800792e:	602b      	str	r3, [r5, #0]
 8007930:	f7fa f8e5 	bl	8001afe <_isatty>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d102      	bne.n	800793e <_isatty_r+0x1a>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	b103      	cbz	r3, 800793e <_isatty_r+0x1a>
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	2000031c 	.word	0x2000031c

08007944 <_lseek_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4d07      	ldr	r5, [pc, #28]	; (8007964 <_lseek_r+0x20>)
 8007948:	4604      	mov	r4, r0
 800794a:	4608      	mov	r0, r1
 800794c:	4611      	mov	r1, r2
 800794e:	2200      	movs	r2, #0
 8007950:	602a      	str	r2, [r5, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	f7fa f8de 	bl	8001b14 <_lseek>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d102      	bne.n	8007962 <_lseek_r+0x1e>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	b103      	cbz	r3, 8007962 <_lseek_r+0x1e>
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	2000031c 	.word	0x2000031c

08007968 <memmove>:
 8007968:	4288      	cmp	r0, r1
 800796a:	b510      	push	{r4, lr}
 800796c:	eb01 0402 	add.w	r4, r1, r2
 8007970:	d902      	bls.n	8007978 <memmove+0x10>
 8007972:	4284      	cmp	r4, r0
 8007974:	4623      	mov	r3, r4
 8007976:	d807      	bhi.n	8007988 <memmove+0x20>
 8007978:	1e43      	subs	r3, r0, #1
 800797a:	42a1      	cmp	r1, r4
 800797c:	d008      	beq.n	8007990 <memmove+0x28>
 800797e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007982:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007986:	e7f8      	b.n	800797a <memmove+0x12>
 8007988:	4402      	add	r2, r0
 800798a:	4601      	mov	r1, r0
 800798c:	428a      	cmp	r2, r1
 800798e:	d100      	bne.n	8007992 <memmove+0x2a>
 8007990:	bd10      	pop	{r4, pc}
 8007992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800799a:	e7f7      	b.n	800798c <memmove+0x24>

0800799c <__malloc_lock>:
 800799c:	4801      	ldr	r0, [pc, #4]	; (80079a4 <__malloc_lock+0x8>)
 800799e:	f7ff b9a7 	b.w	8006cf0 <__retarget_lock_acquire_recursive>
 80079a2:	bf00      	nop
 80079a4:	20000311 	.word	0x20000311

080079a8 <__malloc_unlock>:
 80079a8:	4801      	ldr	r0, [pc, #4]	; (80079b0 <__malloc_unlock+0x8>)
 80079aa:	f7ff b9a2 	b.w	8006cf2 <__retarget_lock_release_recursive>
 80079ae:	bf00      	nop
 80079b0:	20000311 	.word	0x20000311

080079b4 <_realloc_r>:
 80079b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b8:	4680      	mov	r8, r0
 80079ba:	4614      	mov	r4, r2
 80079bc:	460e      	mov	r6, r1
 80079be:	b921      	cbnz	r1, 80079ca <_realloc_r+0x16>
 80079c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079c4:	4611      	mov	r1, r2
 80079c6:	f7ff ba67 	b.w	8006e98 <_malloc_r>
 80079ca:	b92a      	cbnz	r2, 80079d8 <_realloc_r+0x24>
 80079cc:	f7ff f9f8 	bl	8006dc0 <_free_r>
 80079d0:	4625      	mov	r5, r4
 80079d2:	4628      	mov	r0, r5
 80079d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d8:	f000 f82e 	bl	8007a38 <_malloc_usable_size_r>
 80079dc:	4284      	cmp	r4, r0
 80079de:	4607      	mov	r7, r0
 80079e0:	d802      	bhi.n	80079e8 <_realloc_r+0x34>
 80079e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079e6:	d812      	bhi.n	8007a0e <_realloc_r+0x5a>
 80079e8:	4621      	mov	r1, r4
 80079ea:	4640      	mov	r0, r8
 80079ec:	f7ff fa54 	bl	8006e98 <_malloc_r>
 80079f0:	4605      	mov	r5, r0
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d0ed      	beq.n	80079d2 <_realloc_r+0x1e>
 80079f6:	42bc      	cmp	r4, r7
 80079f8:	4622      	mov	r2, r4
 80079fa:	4631      	mov	r1, r6
 80079fc:	bf28      	it	cs
 80079fe:	463a      	movcs	r2, r7
 8007a00:	f7fe fe3a 	bl	8006678 <memcpy>
 8007a04:	4631      	mov	r1, r6
 8007a06:	4640      	mov	r0, r8
 8007a08:	f7ff f9da 	bl	8006dc0 <_free_r>
 8007a0c:	e7e1      	b.n	80079d2 <_realloc_r+0x1e>
 8007a0e:	4635      	mov	r5, r6
 8007a10:	e7df      	b.n	80079d2 <_realloc_r+0x1e>
	...

08007a14 <_read_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	4d07      	ldr	r5, [pc, #28]	; (8007a34 <_read_r+0x20>)
 8007a18:	4604      	mov	r4, r0
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	2200      	movs	r2, #0
 8007a20:	602a      	str	r2, [r5, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f7fa f816 	bl	8001a54 <_read>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_read_r+0x1e>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_read_r+0x1e>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	2000031c 	.word	0x2000031c

08007a38 <_malloc_usable_size_r>:
 8007a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a3c:	1f18      	subs	r0, r3, #4
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	bfbc      	itt	lt
 8007a42:	580b      	ldrlt	r3, [r1, r0]
 8007a44:	18c0      	addlt	r0, r0, r3
 8007a46:	4770      	bx	lr

08007a48 <_init>:
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4a:	bf00      	nop
 8007a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4e:	bc08      	pop	{r3}
 8007a50:	469e      	mov	lr, r3
 8007a52:	4770      	bx	lr

08007a54 <_fini>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	bf00      	nop
 8007a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5a:	bc08      	pop	{r3}
 8007a5c:	469e      	mov	lr, r3
 8007a5e:	4770      	bx	lr
